cscope 15 $HOME/osur-workspace/lab/Chapter_07_Threads/07_Simple_RR               0000402503
	@api/prog_info.c

3 
	~<≠i/¥og_öfo.h
>

5 
	~<≠i/±hªad.h
>

6 
	~<≠i/mÆloc.h
>

8 
PROG_START_FUNC
 ( *
¨gs
[] );

10 
¥og_öfo_t
 
	gpi
 =

12 .
öô
 = 
¥og_öô
,

13 .
	gíåy
 = 
PROG_START_FUNC
,

14 .
	g∑øm
 = 
NULL
,

15 .
	gexô
 = 
±hªad_exô
,

16 .
	g¥io
 = 
THR_DEFAULT_PRIO
,

18 .
	gmpoﬁ
 = 
NULL
,

21 
°dio_öô
 ();

24 
	$¥og_öô
 ( *
¨gs
 )

27 
	`°dio_öô
 ();

30 
pi
.
mpoﬁ
 = 
	`mem_öô
 (Öi.
hóp
,Öi.
hóp_size
 );

33 –((*Ë–* ) ) 
pi
.
íåy
 ) ( 
¨gs
 );

35 
	`±hªad_exô
 ( 
NULL
 );

36 
	}
}

	@api/pthread.c

3 
	~<≠i/±hªad.h
>

5 
	~<≠i/°dio.h
>

6 
	~<kî√l/±hªad.h
>

7 
	~<≠i/î∫o.h
>

8 
	~<ty≥s/basic.h
>

12 
±hªad_¸óã
 ( 
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
,

13 *(*
°¨t_routöe
Ë(*), *
¨g
 )

15 
ASSERT_ERRNO_AND_RETURN
 ( 
°¨t_routöe
, 
EINVAL
 );

17  
sys__±hªad_¸óã
 ( 
thªad
, 
©å
, 
°¨t_routöe
, 
¨g
 );

20 
	$±hªad_exô
 ( *
ªtvÆ
 )

22 
	`sys__±hªad_exô
 ( 
ªtvÆ
 );

23 
	}
}

25 
	$±hªad_joö
 ( 
±hªad_t
 
thªad
, **
ªtvÆ
 )

27  
	`sys__±hªad_joö
 ( &
thªad
, 
ªtvÆ
 );

28 
	}
}

30 
±hªad_t
 
	$±hªad_£lf
 ()

32 
±hªad_t
 
£lf
;

34 
£lf
.
±r
 = 
NULL
;

35 
£lf
.
id
 = 0;

37 
	`sys__±hªad_£lf
 ( &
£lf
 );

39  
£lf
;

40 
	}
}

42 
	$±hªad_©å_öô
 ( 
±hªad_©å_t
 *
©å
 )

44 
	`ASSERT_ERRNO_AND_RETURN
 ( 
©å
, 
EINVAL
 );

46 
©å
->
Êags
 = 
PTHREAD_INHERIT_SCHED
 | 
PTHREAD_CREATE_JOINABLE
 |

47 
PTHREAD_SCOPE_SYSTEM
;

49 
©å
->
sched_pﬁicy
 = 
SCHED_FIFO
;

50 
©å
->
sched_∑øms
.
sched_¥i‹ôy
 = 
THREAD_DEF_PRIO
;

52 
©å
->
°ackaddr
 = 
NULL
;

53 
©å
->
°acksize
 = 0;

55  
EXIT_SUCCESS
;

56 
	}
}

58 
	$±hªad_©å_de°roy
 ( 
±hªad_©å_t
 *
©å
 )

60 
	`ASSERT_ERRNO_AND_RETURN
 ( 
©å
, 
EINVAL
 );

61  
EXIT_SUCCESS
;

62 
	}
}

64 
	$±hªad_©å_£tschedpﬁicy
 ( 
±hªad_©å_t
 *
©å
, 
pﬁicy
 )

66 
	`ASSERT_ERRNO_AND_RETURN
 ( 
©å
, 
EINVAL
 );

67 
	`ASSERT_ERRNO_AND_RETURN
 ( 
pﬁicy
 >0 &&Öﬁicy < 
SCHED_NUM
, 
EINVAL
 );

69 
©å
->
sched_pﬁicy
 = 
pﬁicy
;

71  
EXIT_SUCCESS
;

72 
	}
}

74 
	$±hªad_©å_£tsched∑øm
 ( 
±hªad_©å_t
 *
©å
,

75 
sched_∑øm
 *
∑øm
 )

77 
	`ASSERT_ERRNO_AND_RETURN
 ( 
©å
 && 
∑øm
, 
EINVAL
 );

78 
	`ASSERT_ERRNO_AND_RETURN
 ( 
∑øm
->
sched_¥i‹ôy
 >
THREAD_MIN_PRIO
 &&

79 
∑øm
->
sched_¥i‹ôy
 <
THREAD_MAX_PRIO
, 
EINVAL
 );

81 
©å
->
sched_∑øms
 = *
∑øm
;

83  
EXIT_SUCCESS
;

84 
	}
}

87 
	$±hªad_£tsched∑øm
 ( 
±hªad_t
 
thªad
, 
pﬁicy
,

88 
sched_∑øm
 *
∑øm
 )

90 
	`ASSERT_ERRNO_AND_RETURN
 ( 
pﬁicy
 >0 &&Öﬁicy < 
SCHED_NUM
, 
EINVAL
 );

92 i‡–
∑øm
 )

93 
	`ASSERT_ERRNO_AND_RETURN
 (

94 
∑øm
->
sched_¥i‹ôy
 >
THREAD_MIN_PRIO
 &&

95 
∑øm
->
sched_¥i‹ôy
 <
THREAD_MAX_PRIO
, 
EINVAL
 );

97  
	`sys__±hªad_£tsched∑øm
 ( &
thªad
, 
pﬁicy
, 
∑øm
 );

98 
	}
}

101 
	$±hªad_gësched∑øm
 ( 
±hªad_t
 
thªad
, *
pﬁicy
,

102 
sched_∑øm
 *
∑øm
 )

104 
	`£t_î∫o
 (
ENOTSUP
);

106  
EXIT_FAILURE
;

107 
	}
}

111 
	$±hªad_muãx_öô
 ( 
±hªad_muãx_t
 *
muãx
, 
±hªad_muãx©å_t
 *
©å
 )

113 
	`ASSERT_ERRNO_AND_RETURN
 ( 
muãx
, 
EINVAL
 );

114  
	`sys__±hªad_muãx_öô
 ( 
muãx
, 
©å
 );

115 
	}
}

116 
	$±hªad_muãx_de°roy
 ( 
±hªad_muãx_t
 * 
muãx
 )

118 
	`ASSERT_ERRNO_AND_RETURN
 ( 
muãx
, 
EINVAL
 );

119  
	`sys__±hªad_muãx_de°roy
 ( 
muãx
 );

120 
	}
}

121 
	$±hªad_muãx_lock
 ( 
±hªad_muãx_t
 *
muãx
 )

123 
	`ASSERT_ERRNO_AND_RETURN
 ( 
muãx
, 
EINVAL
 );

124  
	`sys__±hªad_muãx_lock
 ( 
muãx
 );

125 
	}
}

126 
	$±hªad_muãx_u∆ock
 ( 
±hªad_muãx_t
 *
muãx
 )

128 
	`ASSERT_ERRNO_AND_RETURN
 ( 
muãx
, 
EINVAL
 );

129  
	`sys__±hªad_muãx_u∆ock
 ( 
muãx
 );

130 
	}
}

131 
	$±hªad_muãx©å_öô
 ( 
±hªad_muãx©å_t
 *
©å
 )

133 
	`ASSERT_ERRNO_AND_RETURN
 ( 
©å
, 
EINVAL
 );

134 *–(
uöt
*Ë
©å
 ) = 0;

135  
EXIT_SUCCESS
;

136 
	}
}

137 
	$±hªad_muãx©å_de°roy
 ( 
±hªad_muãx©å_t
 *
©å
 )

139 
	`ASSERT_ERRNO_AND_RETURN
 ( 
©å
, 
EINVAL
 );

140  
EXIT_SUCCESS
;

141 
	}
}

144 
	$±hªad_c⁄d_öô
 ( 
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_c⁄d©å_t
 *
©å
 )

146 
	`ASSERT_ERRNO_AND_RETURN
 ( 
c⁄d
, 
EINVAL
 );

147  
	`sys__±hªad_c⁄d_öô
 ( 
c⁄d
, 
©å
 );

148 
	}
}

149 
	$±hªad_c⁄d_de°roy
 ( 
±hªad_c⁄d_t
 *
c⁄d
 )

151 
	`ASSERT_ERRNO_AND_RETURN
 ( 
c⁄d
, 
EINVAL
 );

152  
	`sys__±hªad_c⁄d_de°roy
 ( 
c⁄d
 );

153 
	}
}

154 
	$±hªad_c⁄d_waô
 ( 
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
 )

156 
	`ASSERT_ERRNO_AND_RETURN
 ( 
c⁄d
 && 
muãx
, 
EINVAL
 );

157  
	`sys__±hªad_c⁄d_waô
 ( 
c⁄d
, 
muãx
 );

158 
	}
}

159 
	$±hªad_c⁄d_sig«l
 ( 
±hªad_c⁄d_t
 *
c⁄d
 )

161 
	`ASSERT_ERRNO_AND_RETURN
 ( 
c⁄d
, 
EINVAL
 );

162  
	`sys__±hªad_c⁄d_sig«l
 ( 
c⁄d
 );

163 
	}
}

164 
	$±hªad_c⁄d_brﬂdˇ°
 ( 
±hªad_c⁄d_t
 *
c⁄d
 )

166 
	`ASSERT_ERRNO_AND_RETURN
 ( 
c⁄d
, 
EINVAL
 );

167  
	`sys__±hªad_c⁄d_brﬂdˇ°
 ( 
c⁄d
 );

168 
	}
}

170 
	$±hªad_c⁄d©å_öô
 ( 
±hªad_c⁄d©å_t
 *
©å
 )

172 
	`ASSERT_ERRNO_AND_RETURN
 ( 
©å
, 
EINVAL
 );

173  
EXIT_SUCCESS
;

174 
	}
}

175 
	$±hªad_c⁄d©å_de°roy
 ( 
±hªad_c⁄d©å_t
 *
©å
 )

177 
	`ASSERT_ERRNO_AND_RETURN
 ( 
©å
, 
EINVAL
 );

178  
EXIT_SUCCESS
;

179 
	}
}

182 
	$£m_öô
 ( 
£m_t
 *
£m
, 
psh¨ed
, 
vÆue
 )

184 
	`ASSERT_ERRNO_AND_RETURN
 ( 
£m
, 
EINVAL
 );

185  
	`sys__£m_öô
 ( 
£m
, 
psh¨ed
, 
vÆue
 );

186 
	}
}

187 
	$£m_de°roy
 ( 
£m_t
 *
£m
 )

189 
	`ASSERT_ERRNO_AND_RETURN
 ( 
£m
, 
EINVAL
 );

190  
	`sys__£m_de°roy
 ( 
£m
 );

191 
	}
}

192 
	$£m_po°
 ( 
£m_t
 *
£m
 )

194 
	`ASSERT_ERRNO_AND_RETURN
 ( 
£m
, 
EINVAL
 );

195  
	`sys__£m_po°
 ( 
£m
 );

196 
	}
}

197 
	$£m_waô
 ( 
£m_t
 *
£m
 )

199 
	`ASSERT_ERRNO_AND_RETURN
 ( 
£m
, 
EINVAL
 );

200  
	`sys__£m_waô
 ( 
£m
 );

201 
	}
}

204 
mqd_t
 
	$mq_›í
 ( *
«me
, 
oÊag
, 
mode_t
 
mode
, 
mq_©å
 *
©å
 )

206 
mqd_t
 
mqdes
;

207 i‡–!
«me
 )

209 
mqdes
.
id
 = -1;

210 
mqdes
.
±r
 = (*) -1;

211 
	`£t_î∫o
 (
EINVAL
);

214 
	`sys__mq_›í
 ( 
«me
, 
oÊag
, 
mode
, 
©å
, &
mqdes
 );

216  
mqdes
;

217 
	}
}

218 
	$mq_˛o£
 ( 
mqd_t
 
mqdes
 )

220 
	`ASSERT_ERRNO_AND_RETURN
 ( 
mqdes
.
id
 !-1 && mqdes.
±r
 != (*) -1,

221 
EINVAL
 );

222  
	`sys__mq_˛o£
 ( &
mqdes
 );

223 
	}
}

224 
	$mq_£nd
 ( 
mqd_t
 
mqdes
, *
msg_±r
, 
size_t
 
msg_Àn
, 
uöt
 
msg_¥io
 )

226 
	`ASSERT_ERRNO_AND_RETURN
 ( 
mqdes
.
id
 !-1 && mqdes.
±r
 != (*) -1,

227 
EINVAL
 );

228 
	`ASSERT_ERRNO_AND_RETURN
 ( 
msg_±r
, 
EINVAL
 );

229  
	`sys__mq_£nd
 ( &
mqdes
, 
msg_±r
, 
msg_Àn
, 
msg_¥io
 );

230 
	}
}

231 
ssize_t
 
	$mq_ª˚ive
 (
mqd_t
 
mqdes
, *
msg_±r
, 
size_t
 
msg_Àn
, 
uöt
 *
msg_¥io
)

233 
	`ASSERT_ERRNO_AND_RETURN
 ( 
mqdes
.
id
 !-1 && mqdes.
±r
 != (*) -1,

234 
EINVAL
 );

235 
	`ASSERT_ERRNO_AND_RETURN
 ( 
msg_±r
, 
EINVAL
 );

236  
	`sys__mq_ª˚ive
 ( &
mqdes
, 
msg_±r
, 
msg_Àn
, 
msg_¥io
 );

237 
	}
}

	@api/signal.c

3 
	~<≠i/sig«l.h
>

5 
	~<kî√l/sig«l.h
>

6 
	~<ty≥s/basic.h
>

7 
	~<≠i/°dio.h
>

8 
	~<≠i/î∫o.h
>

19 
	$siga˘i⁄
 ( 
sig
, 
siga˘i⁄_t
 *
a˘
, siga˘i⁄_à*
ﬂ˘
 )

21 
	`ASSERT_ERRNO_AND_RETURN
 ( 
sig
 > 0 && sig <
SIGMAX
, 
EINVAL
 );

23  
	`sys__siga˘i⁄
 ( 
sig
, 
a˘
, 
ﬂ˘
 );

24 
	}
}

33 
	$sigqueue
 ( 
pid_t
 
pid
, 
signo
, 
sigvÆ_t
 
sigvÆ
 )

35 
	`ASSERT_ERRNO_AND_RETURN
 ( 
signo
 > 0 && signÿ<
SIGMAX
, 
EINVAL
 );

37  
	`sys__sigqueue
 ( 
pid
, 
signo
, 
sigvÆ
 );

38 
	}
}

47 
	$sigwaôöfo
 ( 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
 )

49 
	`ASSERT_ERRNO_AND_RETURN
 ( 
£t
, 
EINVAL
 );

51  
	`sys__sigwaôöfo
 ( 
£t
, 
öfo
 );

52 
	}
}

61 
	$±hªad_sigmask
 ( 
how
, 
sig£t_t
 *
£t
, sig£t_à*
o£t
 )

63 
	`ASSERT_ERRNO_AND_RETURN
 ( 
£t
, 
EINVAL
 );

65  
	`sys__±hªad_sigmask
 ( 
how
, 
£t
, 
o£t
 );

66 
	}
}

	@api/stdio.c

3 
	~<≠i/°dio.h
>

5 
	~<kî√l/devi˚.h
>

6 
	~<≠i/î∫o.h
>

7 
	~<lib/°rög.h
>

9 
des¸ùt‹_t
 
	g°d_desc
[
MAX_USER_DESCRIPTORS
];

10 
	g_°dö
, 
	g_°dout
, 
	g_°dîr
;

13 
	$°dio_öô
 ()

15 
i
;

16  
i
 = 0; i < 
MAX_USER_DESCRIPTORS
; i++ )

18 
°d_desc
[
i
].
id
 = 0;

19 
°d_desc
[
i
].
±r
 = 
NULL
;

22 
_°dö
 = 
	`›í
 ( 
U_STDIN
, 
O_RDONLY
 | 
CONSOLE_ASCII
, 0 );

23 
_°dout
 = 
	`›í
 ( 
U_STDOUT
, 
O_WRONLY
 | 
CONSOLE_ASCII
, 0 );

24 
_°dîr
 = 
	`›í
 ( 
U_STDERR
, 
O_WRONLY
 | 
CONSOLE_ASCII
, 0 );

26 
	`ASSERT_ERRNO_AND_RETURN
 ( 
_°dö
 =0 && 
_°dout
 =1 && 
_°dîr
 == 2,

27 
ENOTSUP
 );

29  
EXIT_SUCCESS
;

30 
	}
}

33 
	$›í
 ( *
∑th«me
, 
Êags
, 
mode_t
 
mode
 )

35 
des¸ùt‹_t
 
desc
;

36 
i
, 
ªtvÆ
;

38  
i
 = 0; i < 
MAX_USER_DESCRIPTORS
; i++ )

39 i‡–
°d_desc
[
i
].
id
 == 0 )

42 i‡–
i
 =
MAX_USER_DESCRIPTORS
 )

44 
	`£t_î∫o
 ( 
EMFILE
 );

45  
EXIT_FAILURE
;

48 
ªtvÆ
 = 
	`sys__›í
 ( 
∑th«me
, 
Êags
, 
mode
, &
desc
 );

50 i‡–
ªtvÆ
 )

51  
EXIT_FAILURE
;

53 
°d_desc
[
i
].
id
 = 
desc
.id;

54 
°d_desc
[
i
].
±r
 = 
desc
.ptr;

56  
i
;

57 
	}
}

60 
	$˛o£
 ( 
fd
 )

62 
ªtvÆ
;

64 i‡–
fd
 < 0 || fd >
MAX_USER_DESCRIPTORS
 ||

65 !
°d_desc
[
fd
].
id
 || !°d_desc[fd].
±r
 )

67 
	`£t_î∫o
 ( 
EBADF
 );

68  
EXIT_FAILURE
;

71 
ªtvÆ
 = 
	`sys__˛o£
 ( &
°d_desc
[
fd
] );

73 i‡–
ªtvÆ
 )

74  
EXIT_FAILURE
;

76 
°d_desc
[
fd
].
id
 = 0;

77 
°d_desc
[
fd
].
±r
 = 
NULL
;

79  
EXIT_SUCCESS
;

80 
	}
}

83 
ssize_t
 
	$ªad
 ( 
fd
, *
buf„r
, 
size_t
 
cou¡
 )

85 i‡–
fd
 < 0 || fd >
MAX_USER_DESCRIPTORS
 ||

86 !
°d_desc
[
fd
].
id
 || !°d_desc[fd].
±r
 || !
buf„r
 || !
cou¡
 )

88 
	`£t_î∫o
 ( 
EBADF
 );

89  
EXIT_FAILURE
;

92  
	`sys__ªad
 ( &
°d_desc
[
fd
], 
buf„r
, 
cou¡
 );

93 
	}
}

96 
ssize_t
 
	$wrôe
 ( 
fd
, *
buf„r
, 
size_t
 
cou¡
 )

98 i‡–
fd
 < 0 || fd >
MAX_USER_DESCRIPTORS
 ||

99 !
°d_desc
[
fd
].
id
 || !°d_desc[fd].
±r
 || !
buf„r
 || !
cou¡
 )

101 
	`£t_î∫o
 ( 
EBADF
 );

102  
EXIT_FAILURE
;

105  
	`sys__wrôe
 ( &
°d_desc
[
fd
], 
buf„r
, 
cou¡
 );

106 
	}
}

109 
	$gëch¨
 ()

111 
c
 = 0;

113 
	`ªad
 ( 
_°dö
, &
c
,  () );

115  
c
;

116 
	}
}

119 
	$¥ötf
 ( *
f‹m©
, ... )

121 
buf„r
[
CONSOLE_MAXLEN
];

122 
size_t
 
size
;

124 
size
 = 
	`vs•rötf
 ( 
buf„r
, 
CONSOLE_MAXLEN
, &
f‹m©
 );

126  
	`wrôe
 ( 
_°dout
, 
buf„r
, 
size
 );

127 
	}
}

130 
	$w¨n
 ( *
f‹m©
, ... )

132 
buf„r
[
CONSOLE_MAXLEN
];

133 
size_t
 
size
;

135 
size
 = 
	`vs•rötf
 ( 
buf„r
, 
CONSOLE_MAXLEN
, &
f‹m©
 );

137 
	`wrôe
 ( 
_°dîr
, 
buf„r
, 
size
 );

138 
	}
}

148 
	$pﬁl
 ( 
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
timeout
 )

150 
i
;

152 i‡–!
fds
 || 
nfds
 < 1 )

154 
	`£t_î∫o
 ( 
EBADF
 );

155  
EXIT_FAILURE
;

158  
i
 = 0; i < 
nfds
; i++ )

160 i‡–
fds
[
i
].
fd
 < 0 || fds[i].fd >
MAX_USER_DESCRIPTORS
 ||

161 !
°d_desc
[
fds
[
i
].
fd
].
id
 || !°d_desc[fds[i].fd].
±r
 )

163 
	`£t_î∫o
 ( 
EBADF
 );

164  
EXIT_FAILURE
;

168  
	`sys__pﬁl
 ( 
fds
, 
nfds
, 
timeout
, 
°d_desc
 );

169 
	}
}

	@api/time.c

3 
	~<≠i/time.h
>

5 
	~<kî√l/time.h
>

6 
	~<≠i/°dio.h
>

7 
	~<≠i/î∫o.h
>

17 
	$˛ock_gëtime
 ( 
˛ockid_t
 
˛ockid
, 
time•ec_t
 *
time
 )

19 
	`ASSERT_ERRNO_AND_RETURN
 ( 
time
 && ( 
˛ockid
 =
CLOCK_REALTIME
 ||

20 
˛ockid
 =
CLOCK_MONOTONIC
 ), 
EINVAL
 );

22  
	`sys__˛ock_gëtime
 ( 
˛ockid
, 
time
);

23 
	}
}

31 
	$˛ock_£âime
 ( 
˛ockid_t
 
˛ockid
, 
time•ec_t
 *
time
 )

33 
	`ASSERT_ERRNO_AND_RETURN
 ( 
time
 && ( 
˛ockid
 =
CLOCK_REALTIME
 ||

34 
˛ockid
 =
CLOCK_MONOTONIC
 ), 
EINVAL
 );

36  
	`sys__˛ock_£âime
 ( 
˛ockid
, 
time
 );

37 
	}
}

47 
	$˛ock_«no¶ìp
 ( 
˛ockid_t
 
˛ockid
, 
Êags
, 
time•ec_t
 *
ªque°
,

48 
time•ec_t
 *
ªmaö
 )

50 
	`ASSERT_ERRNO_AND_RETURN
 ( 
ªque°
 && ( 
˛ockid
 =
CLOCK_REALTIME
 ||

51 
˛ockid
 =
CLOCK_MONOTONIC
 ), 
EINVAL
 );

53  
	`sys__˛ock_«no¶ìp
 ( 
˛ockid
, 
Êags
, 
ªque°
, 
ªmaö
 );

54 
	}
}

62 
	$«no¶ìp
 ( 
time•ec_t
 *
ªque°
,Åime•ec_à*
ªmaö
 )

64 
	`ASSERT_ERRNO_AND_RETURN
 ( 
ªque°
, 
EINVAL
 );

66  
	`sys__˛ock_«no¶ìp
 ( 
CLOCK_REALTIME
, 0, 
ªque°
, 
ªmaö
 );

67 
	}
}

79 
	$timî_¸óã
 ( 
˛ockid_t
 
˛ockid
, 
sigevít_t
 *
evp
, 
timî_t
 *
timî
 )

81 
	`ASSERT_ERRNO_AND_RETURN
 ( 
evp
 && 
timî
 && ( 
˛ockid
 =
CLOCK_REALTIME


82 || 
˛ockid
 =
CLOCK_MONOTONIC
 ), 
EINVAL
 );

84  
	`sys__timî_¸óã
 ( 
˛ockid
, 
evp
, 
timî
 );

85 
	}
}

92 
	$timî_dñëe
 ( 
timî_t
 *
timî
 )

94 
	`ASSERT_ERRNO_AND_RETURN
 ( 
timî
, 
EINVAL
 );

96  
	`sys__timî_dñëe
 ( 
timî
 );

97 
	}
}

107 
	$timî_£âime
 ( 
timî_t
 *
timî
, 
Êags
, 
ôimî•ec_t
 *
vÆue
,

108 
ôimî•ec_t
 *
ovÆue
 )

110 
	`ASSERT_ERRNO_AND_RETURN
 ( 
timî
, 
EINVAL
 );

112  
	`sys__timî_£âime
 ( 
timî
, 
Êags
, 
vÆue
, 
ovÆue
 );

113 
	}
}

121 
	$timî_gëtime
 ( 
timî_t
 *
timî
, 
ôimî•ec_t
 *
vÆue
 )

123 
	`ASSERT_ERRNO_AND_RETURN
 ( 
timî
 && 
vÆue
, 
EINVAL
 );

125  
	`sys__timî_gëtime
 ( 
timî
, 
vÆue
 );

126 
	}
}

	@arch/arm/bits.h

3 
	~<ty≥s/basic.h
>

6 
	#ARCH_MSB_INDEX


	)

7 
	#ARCH_LSB_INDEX


	)

14 
ölöe
 
uöt32
 
	$¨ch_msb_ödex
 ( 
uöt32
 
num
 )

16  31 - 
	`__buûtö_˛z
 (
num
);

17 
	}
}

24 
ölöe
 
uöt32
 
	$¨ch_lsb_ödex
 ( 
uöt32
 
num
 )

26  
	`__buûtö_ffs
 (
num
) - 1;

27 
	}
}

	@arch/arm/config.h

3 #¥agm®
⁄˚


6 
	mPB926EJS
 = 1,

7 
	mRASPBERRYPI
,

11 
	#ARM_SYSTEM
 
PB926EJS


	)

13 #i‡–
ARM_SYSTEM
 =
PB926EJS
 )

17 
	#UART0_BASE
 0x101f1000

	)

18 
	#VICBASE
 0x10140000

	)

19 
	#SICBASE
 0x10003000

	)

20 
	#TIMER0_BASE
 0x101E2000

	)

21 
	#TIMER1_BASE
 0x101E2020

	)

	@arch/arm/context.c

3 
	#_ARCH_


	)

4 
	~"c⁄ãxt.h
"

10 
¨ch_¸óã_thªad_c⁄ãxt
 ( 
c⁄ãxt_t
 *
c⁄ãxt
,

11 (
func
Ë(*), *
∑øm
, (*
thªad_exô
)(),

12 *
°ack
, 
size_t
 
°ack_size
 )

15 
c⁄ãxt
->context = (*)

16 ((
uöt32
Ë
°ack
Ë+ 
°ack_size
 -  (
¨ch_c⁄ãxt_t
);

19 
c⁄ãxt
->c⁄ãxt->
pc
 = (
uöt32
Ë
func
;

20 
c⁄ãxt
->c⁄ãxt->
r
[0] = (
uöt32
Ë
∑øm
;

21 
c⁄ãxt
->c⁄ãxt->
r
[13] = (
uöt32
Ë
thªad_exô
;

22 
c⁄ãxt
->c⁄ãxt->
˝§
 = 
INIT_CPSR
;

25 
	}
}

	@arch/arm/context.h

3 #¥agm®
⁄˚


5 
	~<ty≥s/basic.h
>

6 
	~<¨ch/c⁄ãxt.h
>

7 
	~<¨ch/¥o˚ss‹.h
>

9 
	#INIT_CPSR
 
CPSR_MODE_SYS


	)

14 
	s_¨ch_c⁄ãxt_t_


16 
uöt32
 
	m˝§
;

17 
uöt32
 
	mr
[14];

20 
uöt32
 
	mpc
;

22 
	t¨ch_c⁄ãxt_t
;

34 
	s_c⁄ãxt_t_


36 
¨ch_c⁄ãxt_t
 *
	mc⁄ãxt
;

	@arch/arm/device.h

3 #¥agm®
⁄˚


5 
	~<ty≥s/io.h
>

	@arch/arm/drivers/pl011.c

3 #ifde‡
PL011


5 
	~"∂011.h
"

6 
	~<ty≥s/io.h
>

7 
	~<lib/°rög.h
>

8 
	~<ty≥s/basic.h
>

9 
	~<¨ch/devi˚.h
>

10 
	~<¨ch/öãºu±.h
>

11 
	~<kî√l/î∫o.h
>

13 
u¨t_öô
 (
uöt
 
Êags
, *
∑øms
, 
devi˚_t
 *
dev
 );

14 
u¨t_de°roy
 ( 
uöt
 
Êags
, *
∑øms
, 
devi˚_t
 *
dev
 );

15 
u¨t_öãºu±_h™dÀr
 ( 
úq_num
, *
dev
 );

16 
u¨t_wrôe
 ( 
¨ch_u¨t_t
 *
up
 );

17 
u¨t_£nd
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
dev
 );

18 
u¨t_ªad
 ( 
¨ch_u¨t_t
 *
up
 );

19 
u¨t_ªcv
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
dev
 );

23 
	$u¨t_öô
 ( 
uöt
 
Êags
, *
∑øms
, 
devi˚_t
 *
dev
 )

25 vﬁ©ûê*
u¨t_ibrd
, *
u¨t_fbrd
;

26 vﬁ©ûê*
u¨t_l¸_h
, *
u¨t_¸
, *
u¨t_imsc
;

27 
¨ch_u¨t_t
 *
up
;

29 
	`ASSERT
 ( 
dev
 );

31 
up
 = 
dev
->
∑øms
;

33 
u¨t_ibrd
 = (*Ë(
up
->
ba£
 + 
UART_IBRD
);

34 
u¨t_fbrd
 = (*Ë(
up
->
ba£
 + 
UART_FBRD
);

35 
u¨t_l¸_h
 = (*Ë(
up
->
ba£
 + 
UART_LCR_H
);

36 
u¨t_¸
 = (*Ë(
up
->
ba£
 + 
UART_CR
);

37 
u¨t_imsc
 = (*Ë(
up
->
ba£
 + 
UART_IMSC
);

39 *
u¨t_¸
 = 0;

41 *
u¨t_ibrd
 = 
UART_IBRD_V
;

42 *
u¨t_fbrd
 = 
UART_FBRD_V
;

43 *
u¨t_l¸_h
 = 
UART_LCR_H_WL
;

44 *
u¨t_imsc
 = 
UART_IMSC_RXIM
 | 
UART_IMSC_TXIM
;

46 *
u¨t_¸
 = 
UART_CR_RXE
 | 
UART_CR_TXE
 | 
UART_CR_UARTEN
;

49 
	}
}

52 
	$u¨t_de°roy
 ( 
uöt
 
Êags
, *
∑øms
, 
devi˚_t
 *
dev
 )

54 vﬁ©ûê*
u¨t_¸
;

55 
¨ch_u¨t_t
 *
up
;

57 
	`ASSERT
 ( 
dev
 );

59 
up
 = 
dev
->
∑øms
;

61 
u¨t_¸
 = (*Ë(
up
->
ba£
 + 
UART_CR
);

62 *
u¨t_¸
 = 0;

65 
	}
}

68 
	$u¨t_öãºu±_h™dÀr
 ( 
úq_num
, *
dev
 )

70 vﬁ©ûê*
u¨t_i¸
;

71 
devi˚_t
 *
u¨t
 = 
dev
;

72 
¨ch_u¨t_t
 *
up
;

74 
	`ASSERT
 ( 
dev
 );

76 
up
 = 
u¨t
->
∑øms
;

82 
u¨t_i¸
 = (*Ë(
up
->
ba£
 + 
UART_ICR
);

83 *
u¨t_i¸
 = 
UART_IMSC_RXIM
 | 
UART_IMSC_TXIM
;

86 
	`u¨t_wrôe
 ( 
u¨t
->
∑øms
 );

87 
	`u¨t_ªad
 ( 
u¨t
->
∑øms
 );

90 
	}
}

94 
	$u¨t_wrôe
 ( 
¨ch_u¨t_t
 *
up
 )

96 vﬁ©ûê*
u¨t_dr
;

97 vﬁ©ûê*
u¨t_‰
;

99 
	`ASSERT
 ( 
up
 );

101 
u¨t_dr
 = (*Ë(
up
->
ba£
 + 
UART_DR
);

102 
u¨t_‰
 = (*Ë(
up
->
ba£
 + 
UART_FR
);

105  
up
->
outsz
 > 0 && ( (*
u¨t_‰
Ë& 
UART_FR_TXFF
 ) == 0 )

107 *
u¨t_dr
 = (Ë
up
->
outbuff
[up->
outf
];

108 
	`INC_MOD
 ( 
up
->
outf
, up->
outbufsz
 );

109 
up
->
outsz
--;

111 
	}
}

114 
	$u¨t_£nd
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
dev
 )

116 
¨ch_u¨t_t
 *
up
;

117 
uöt8
 *
d
;

119 
	`ASSERT
 ( 
dev
 );

121 
up
 = 
dev
->
∑øms
;

122 
d
 = 
d©a
;

125  
size
 > 0 && 
up
->
outsz
 < up->
outbufsz
 )

127 i‡–*
d
 =0 && 
Êags
 =
CONSOLE_PRINT
 )

129 
size
 = 0;

132 
up
->
outbuff
[up->
oué
] = *
d
++;

133 
	`INC_MOD
 ( 
up
->
oué
, up->
outbufsz
 );

134 
up
->
outsz
++;

135 
size
--;

139 
	`u¨t_wrôe
 ( 
up
 );

141  
size
;

142 
	}
}

145 
	$u¨t_ªad
 ( 
¨ch_u¨t_t
 *
up
 )

147 vﬁ©ûê*
u¨t_dr
;

148 vﬁ©ûê*
u¨t_‰
;

150 
	`ASSERT
 ( 
up
 );

152 
u¨t_dr
 = (*Ë(
UART0_BASE
 + 
UART_DR
);

153 
u¨t_‰
 = (*Ë(
UART0_BASE
 + 
UART_FR
);

156  ( (*
u¨t_‰
Ë& 
UART_FR_RXFE
 ) =0 && 
up
->
ösz
 < up->
öbufsz
 )

158 
up
->
öbuff
[up->
öl
] = *
u¨t_dr
;

159 
	`INC_MOD
 ( 
up
->
öl
, up->
öbufsz
 );

160 
up
->
ösz
++;

162 
	}
}

165 
	$u¨t_ªcv
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
dev
 )

167 
¨ch_u¨t_t
 *
up
;

168 
uöt8
 *
d
;

169 
i
;

171 
	`ASSERT
 ( 
dev
 );

173 
up
 = 
dev
->
∑øms
;

176 
	`u¨t_ªad
 ( 
up
 );

179 
d
 = 
d©a
;

180 
i
 = 0;

181  
i
 < 
size
 && 
up
->
ösz
 > 0 )

183 
d
[
i
] = 
up
->
öbuff
[up->
öf
];

184 
	`INC_MOD
 ( 
up
->
öf
, up->
öbufsz
 );

185 
up
->
ösz
--;

186 
i
++;

189  
i
;

190 
	}
}

193 
	$u¨t_°©us
 ( 
uöt
 
Êags
, 
devi˚_t
 *
dev
 )

195 
¨ch_u¨t_t
 *
up
;

196 
rÊags
 = 0;

198 
	`ASSERT
 ( 
dev
 );

200 
up
 = 
dev
->
∑øms
;

203 i‡–
up
->
ösz
 > 0 )

204 
rÊags
 |
DEV_IN_READY
;

206 i‡–
up
->
outsz
 < up->
outbufsz
 )

207 
rÊags
 |
DEV_OUT_READY
;

209  
rÊags
;

210 
	}
}

213 
uöt8
 
	gu¨t0_öbuf
[
BUFFER_SIZE
];

214 
uöt8
 
	gu¨t0_outbuf
[
BUFFER_SIZE
];

216 
¨ch_u¨t_t
 
	gu¨t0_∑øms
 = (arch_uart_t)

218 .
ba£
 = 
UART0_BASE
,

219 .
	göbuff
 = 
u¨t0_öbuf
,

220 .
	göbufsz
=
BUFFER_SIZE
, .
	göf
 = 0, .
	göl
 = 0, .
	gösz
 = 0,

221 .
	goutbuff
 = 
u¨t0_outbuf
,

222 .
	goutbufsz
=
BUFFER_SIZE
, .
	goutf
 = 0, .
	goué
 = 0, .
	goutsz
 = 0

226 
devi˚_t
 
	g∂011_dev
 = (device_t)

228 .
dev_«me
 = "PL011",

229 .
	gúq_num
 = 
IRQ_OFFSET
 + 
UART0IRQL
,

230 .
	gúq_h™dÀr
 = 
u¨t_öãºu±_h™dÀr
,

232 .
	göô
 = 
u¨t_öô
,

233 .
	gde°roy
 = 
u¨t_de°roy
,

234 .
	g£nd
 = 
u¨t_£nd
,

235 .
	gªcv
 = 
u¨t_ªcv
,

236 .
	g°©us
 = 
u¨t_°©us
,

238 .
	gÊags
 = 
DEV_TYPE_SHARED
 | 
DEV_TYPE_CONSOLE
,

239 .
	g∑øms
 = (*Ë&
u¨t0_∑øms


	@arch/arm/drivers/pl011.h

3 #ifde‡
PL011


5 
	~<ty≥s/basic.h
>

6 
	~<ARCH/c⁄fig.h
>

9 
	#UART_DR
 0x000

	)

10 
	#UART_RSR
 0x004

	)

11 
	#UART_ECR
 0x004

	)

12 
	#UART_FR
 0x018

	)

13 
	#UART_IBRD
 0x024

	)

14 
	#UART_FBRD
 0x028

	)

15 
	#UART_LCR_H
 0x02C

	)

16 
	#UART_CR
 0x030

	)

17 
	#UART_IFLS
 0x034

	)

18 
	#UART_IMSC
 0x038

	)

19 
	#UART_RIS
 0x03C

	)

20 
	#UART_MIS
 0x040

	)

21 
	#UART_ICR
 0x044

	)

22 
	#UART_DMACR
 0x048

	)

24 
	#DR_ERR_MASK
 0x0f00

	)

27 
	#UART_HZ
 24000000

	)

28 
	#UART_BIT_RATE
 115200

	)

30 
	#UART_IBRD_V
 ( 
UART_HZ
 / ( 16 * 
UART_BIT_RATE
 ) )

	)

31 
	#UART_FBRD_V
 \

32 –(
uöt
Ë––1. * 
UART_HZ
 / ( 16. * 
UART_BIT_RATE
 ) - 
UART_IBRD_V
 ) * 64 + 0.5 ) )

	)

34 
	#UART_LCR_H_WL
 0x60

	)

35 
	#UART_LCR_H_FEN
 0x10

	)

37 
	#UART_CR_RXE
 0x20

	)

38 
	#UART_CR_TXE
 0x10

	)

39 
	#UART_CR_UARTEN
 0x01

	)

41 
	#UART_IMSC_TXIM
 0x20

	)

42 
	#UART_IMSC_RXIM
 0x10

	)

44 
	#UART_FR_TXFF
 (1<<5Ë

	)

45 
	#UART_FR_RXFE
 (1<<4Ë

	)

49 
	#BUFFER_SIZE
 256

	)

53 
	s_u¨t_t_


55 
	m•ìd
;

56 
öt8
 
	md©a_bôs
;

57 
öt8
 
	m∑rôy
;

58 
öt8
 
	m°›_bô
;

59 
öt8
 
	mmode
;

61 
	tu¨t_t
;

63 
	s_¨ch_u¨t_t_


65 
uöt
 
	mba£
;

67 
u¨t_t
 
	m∑øms
;

69 
uöt8
 *
	möbuff
;

70 
	möbufsz
, 
	möf
, 
	möl
, 
	mösz
;

71 
uöt8
 *
	moutbuff
;

72 
	moutbufsz
, 
	moutf
, 
	moué
, 
	moutsz
;

74 
	t¨ch_u¨t_t
;

76 
	#INC_MOD
(
X
,
MOD
Ëdÿ{ (XË–(X)+1 < MOD ? (X)+1 : 0 ); } 0)

	)

	@arch/arm/drivers/pl190.c

2 #ifde‡
PL190


4 
	~"∂190.h
"

6 
	~<ARCH/öãºu±.h
>

7 
	~<kî√l/î∫o.h
>

9 
∂190_öô
 ();

10 
∂190_úq_íabÀ
 ( 
úq
 );

11 
∂190_úq_dißbÀ
 ( 
úq
 );

12 
∂190_úq_dißbÀ
 ( 
úq
 );

13 
∂190_©_exô
 ( 
úq
 );

14 
∂190_gë_úq
 ();

15 *
∂190_öãºu±_des¸ùti⁄
 ( 
n
 );

19 
¨ch_ic_t
 
	g∂190
 = (arch_ic_t)

21 .
öô
 = 
∂190_öô
,

22 .
	gdißbÀ_úq
 = 
∂190_úq_dißbÀ
,

23 .
	gíabÀ_úq
 = 
∂190_úq_íabÀ
,

24 .
	g©_exô
 = 
∂190_©_exô
,

25 .
	ggë_úq
 = 
∂190_gë_úq
,

26 .
	göt_des¸
 = 
∂190_öãºu±_des¸ùti⁄


31 
	$∂190_öô
 ()

33 vﬁ©ûê
uöt32
 *
vi¸eg
;

36 
vi¸eg
 = (*Ë–
VICBASE
 + 
VICINTENABLE
 );

37 *
vi¸eg
 = 0;

40 
vi¸eg
 = (*Ë–
VICBASE
 + 
VICINTSELECT
 );

41 *
vi¸eg
 = 0;

44 
vi¸eg
 = (*Ë–
VICBASE
 + 
VICSOFTINT
 );

45 *
vi¸eg
 = 0;

48 
vi¸eg
 = (*Ë–
VICBASE
 + 
VICPROTECTION
 );

49 *
vi¸eg
 = 0;

52 
	}
}

58 
	$∂190_úq_íabÀ
 ( 
úq
 )

60 vﬁ©ûê
uöt32
 *
vi¸eg
;

62 
	`ASSERT
 ( 
úq
 >
IRQ_OFFSET
 && irq < 
INTERRUPTS
 );

64 
úq
 -
IRQ_OFFSET
;

66 i‡–
úq
 < 32 )

68 
vi¸eg
 = (*Ë–
VICBASE
 + 
VICINTENABLE
 );

69 *
vi¸eg
 = (*vi¸egË| ( 1 << 
úq
 );

74 
	}
}

80 
	$∂190_úq_dißbÀ
 ( 
úq
 )

82 vﬁ©ûê
uöt32
 *
vi¸eg
;

84 
	`ASSERT
 ( 
úq
 >
IRQ_OFFSET
 && irq < 
INTERRUPTS
 );

86 
úq
 -
IRQ_OFFSET
;

88 i‡–
úq
 < 32 )

90 
vi¸eg
 = (*Ë–
VICBASE
 + 
VICINTENABLE
 );

91 *
vi¸eg
 = (*vi¸egË& ( ~–1 << 
úq
 ) );

96 
	}
}

102 
	$∂190_©_exô
 ( 
úq
 )

104 
	}
}

106 
	$∂190_gë_úq
 ()

108 vﬁ©ûê
uöt32
 *
vi¸eg
, 
mask
, 
úq
;

110 
vi¸eg
 = (*Ë–
VICBASE
 + 
VICIRQSTATUS
 );

112 
mask
 = *
vi¸eg
;

114 i‡–
mask
 )

119 
úq
 = 31 - 
	`__buûtö_˛z
 ( 
mask
 ) + 
IRQ_OFFSET
;

121 
úq
 = 
	`__buûtö_ffs
 ( 
mask
 ) - 1 + 
IRQ_OFFSET
;

125 
úq
 = 0;

128  
úq
;

129 
	}
}

131 #ifde‡
DEBUG


133 *
	g¨ch_úq_desc
[
INTERRUPTS
] =

217 *
	$∂190_öãºu±_des¸ùti⁄
 ( 
n
 )

219 i‡–
n
 < 
INTERRUPTS
 )

220  
¨ch_úq_desc
[
n
];

223 
	}
}

225 *
	$∂190_öãºu±_des¸ùti⁄
 ( 
n
 )

228 
	}
}

	@arch/arm/drivers/pl190.h

2 #ifde‡
PL190


4 #¥agm®
⁄˚


6 #i‚de‡
ASM_FILE


8 
	~<ARCH/c⁄fig.h
>

20 
	#VICIRQSTATUS
 0x000

	)

21 
	#VICFIQSTATUS
 0x004

	)

22 
	#VICRAWINTR
 0x008

	)

23 
	#VICINTSELECT
 0x00C

	)

24 
	#VICINTENABLE
 0x010

	)

25 
	#VICINTENCLEAR
 0x014

	)

26 
	#VICSOFTINT
 0x018

	)

27 
	#VICSOFTINTCLEAR
 0x01C

	)

28 
	#VICPROTECTION
 0x020

	)

31 
	#VICVECTADDR
 0x030

	)

32 
	#VICDEFVECTADDR
 0x034

	)

34 
	#VICVECTADDR0
 0x100

	)

36 
	#VICVECTADDR15
 0x13c

	)

37 
	#VICVECTCNTL0
 0x200

	)

39 
	#VICVECTCNTL15
 0x23¯

	)

45  
	mWATCHDOG
 = 0,

46  
	mSWI
,

47  
	mCOM_RX
,

48  
	mCOM_TX
,

49  
	mTIMER01
,

50  
	mTIMER23
,

51  
	mGPIO0
,

52  
	mGPIO1
,

53  
	mGPIO2
,

54  
	mGPIO3
,

55  
	mRTC
,

56  
	mSSP
,

57  
	mUART0IRQL
,

58  
	mUART1IRQL
,

59  
	mUART2IRQL
,

60  
	mSCI0
,

61  
	mCLCD
,

62  
	mDMA
,

63  
	mPWRFAIL
,

64  
	mMBX
,

65  
	mGND
,

66  
	mVICINTSOURCE21
,

67  
	mVICINTSOURCE22
,

68  
	mVICINTSOURCE23
,

69  
	mVICINTSOURCE24
,

70  
	mVICINTSOURCE25
,

71  
	mVICINTSOURCE26
,

72  
	mVICINTSOURCE27
,

73  
	mVICINTSOURCE28
,

74  
	mVICINTSOURCE29
,

75  
	mVICINTSOURCE30
,

76  
	mVICINTSOURCE31
,

85 
	#SIC_STATUS
 0x0000

	)

86 
	#SIC_RAWSTAT
 0x0004

	)

87 
	#SIC_ENABLE
 0x0008

	)

88 
	#SIC_ENSET
 0x0008

	)

89 
	#SIC_ENCLR
 0x000C

	)

90 
	#SIC_SOFTINTSET
 0x0010

	)

91 
	#SIC_SOFTINTCLR
 0x0014

	)

92 
	#SIC_PICENABLE
 0x0020

	)

93 
	#SIC_PICENSET
 0x0020

	)

94 
	#SIC_PICENCLR
 0x0024

	)

98  
	mSOFTINT2
 = 0,

99  
	mMMCI0B
,

100  
	mMMCI1B
,

101  
	mKMI0
,

102  
	mKMI1
,

103  
	mSCI1
,

104  
	mUART3
,

105  
	mCHAR_LCD
,

106  
	mTOUCHSCREEN
,

107  
	mKEYPAD
,

108  
	mRESERVED10
,

109  
	mRESERVED11
,

110  
	mRESERVED12
,

111  
	mRESERVED13
,

112  
	mRESERVED14
,

113  
	mRESERVED15
,

114  
	mRESERVED16
,

115  
	mRESERVED17
,

116  
	mRESERVED18
,

117  
	mRESERVED19
,

118  
	mRESERVED20
,

119  
	mDISKONCHIP
,

120  
	mMMCI0A
,

121  
	mMMCI1A
,

122  
	mAACI
,

123  
	mETHERNET
,

124  
	mUSB
,

125  
	mPCI0
,

126  
	mPCI1
,

127  
	mPCI2
,

128  
	mPCI3
,

129  
	mRESERVED31
,

	@arch/arm/drivers/sp804.c

2 #ifde‡
SP804


4 
	~"•804.h
"

6 
	~<¨ch/öãºu±.h
>

7 
	~<kî√l/î∫o.h
>

9 
•804_öô
 ();

10 
•804_£t
 ( 
uöt
 
˙t
 );

11 
uöt
 
•804_gë
 ();

12 
•804_íabÀ_öãºu±
 ();

13 
•804_dißbÀ_öãºu±
 ();

14 
•804_ªgi°î_öãºu±
 ( *
h™dÀr
 );

15 
•804_£t_time_to_cou¡î
 ( 
time•ec_t
 *
time
 );

16 
•804_gë_time_‰om_cou¡î
 ( 
time•ec_t
 *
time
 );

17 (*
	g•804_h™dÀr
) ();

21 
¨ch_timî_t
 
	g•804
 = (arch_timer_t)

23 .
mö_öãrvÆ
 = { 0, 0 },

24 .
	gmax_öãrvÆ
 = { 0, 0 },

25 .
	göô
 = 
•804_öô
,

26 .
	g£t_öãrvÆ
 = 
•804_£t_time_to_cou¡î
,

27 .
	ggë_öãrvÆ_ªmaödî
 = 
•804_gë_time_‰om_cou¡î
,

28 .
	gíabÀ_öãºu±
 = 
•804_íabÀ_öãºu±
,

29 .
	gdißbÀ_öãºu±
 = 
•804_dißbÀ_öãºu±
,

30 .
	gªgi°î_öãºu±
 = 
•804_ªgi°î_öãºu±


35 
	$•804_öô
 ()

37 vﬁ©ûê
uöt32
 *
±r
;

39 
•804_h™dÀr
 = 
NULL
;

41 
	`COUNT_TO_TIME
 ( 
ISP804_COUNT_MIN
, &
•804
.
mö_öãrvÆ
 );

42 
	`COUNT_TO_TIME
 ( 
ISP804_COUNT_MAX
, &
•804
.
max_öãrvÆ
 );

45 
±r
 = (
uöt32
 *Ë–
TIMER1_BASE
 + 
TIMER_CONTROL
 );

46 *
±r
 = *±∏& ( ~
TIMER_INT_ENABLE
 );

49 
±r
 = (
uöt32
 *Ë–
TIMER0_BASE
 + 
TIMER_CONTROL
 );

50 *
±r
 = 
TIMER_SIZE_32
;

51 
	`•804_£t
 ( 
ISP804_COUNT_MAX
 );

52 *
±r
 = 
TIMER_ENABLE
 | 
TIMER_MODE_PERIODIC
 | 
TIMER_SIZE_32
;

56 
	`¨ch_úq_íabÀ
 ( 
TIMER01
 + 
IRQ_OFFSET
 );

57 
	}
}

60 
	$•804_£t
 ( 
uöt
 
˙t
 )

62 vﬁ©ûê
uöt32
 *
±r
;

64 
±r
 = (
uöt32
 *Ë–
TIMER0_BASE
 + 
TIMER_LOAD
 );

65 *
±r
 = 
˙t
;

66 
	}
}

69 
uöt
 
	$•804_gë
 ()

71 vﬁ©ûê
uöt32
 *
±r
;

73 
±r
 = (
uöt32
 *Ë–
TIMER0_BASE
 + 
TIMER_VALUE
 );

75  *
±r
;

76 
	}
}

79 
	$•804_£t_time_to_cou¡î
 ( 
time•ec_t
 *
time
 )

81 
uöt
 
˙t
;

83 
	`ASSERT
 ( 
time
 && 
	`time_cmp
 (Åime, &
•804
.
max_öãrvÆ
 ) <= 0 &&

84 
	`time_cmp
 ( 
time
, &
•804
.
mö_öãrvÆ
 ) >= 0 );

86 
	`TIME_TO_COUNT
 ( 
time
, 
˙t
 );

88 
	`•804_£t
 ( 
˙t
 );

89 
	}
}

92 
	$•804_gë_time_‰om_cou¡î
 ( 
time•ec_t
 *
time
 )

94 
uöt
 
˙t
;

96 
	`ASSERT
 ( 
time
 );

98 
˙t
 = 
	`•804_gë
();

100 
	`COUNT_TO_TIME
 ( 
˙t
, 
time
 );

101 
	}
}

104 
	$•804_íabÀ_öãºu±
 ()

106 vﬁ©ûê
uöt32
 *
±r
;

109 
±r
 = (
uöt32
 *Ë–
TIMER0_BASE
 + 
TIMER_CONTROL
 );

110 *
±r
 = *±∏| 
TIMER_INT_ENABLE
;

111 
	}
}

114 
	$•804_dißbÀ_öãºu±
 ()

116 vﬁ©ûê
uöt32
 *
±r
;

119 
±r
 = (
uöt32
 *Ë–
TIMER0_BASE
 + 
TIMER_CONTROL
 );

120 *
±r
 = *±∏& ( ~
TIMER_INT_ENABLE
 );

121 
	}
}

124 
	$•804_öãºu±_h™dÀr
 ()

126 vﬁ©ûê
uöt32
 *
±r
;

129 
±r
 = (
uöt32
 *Ë–
TIMER0_BASE
 + 
TIMER_INTCLR
 );

130 *
±r
 = 0;

132 i‡–
•804_h™dÀr
 )

133 
	`•804_h™dÀr
 ();

134 
	}
}

137 
	$•804_ªgi°î_öãºu±
 ( *
h™dÀr
 )

139 
•804_h™dÀr
 = 
h™dÀr
;

140 
	`¨ch_ªgi°î_öãºu±_h™dÀr
 ( 
TIMER01
 + 
IRQ_OFFSET
,

141 
•804_öãºu±_h™dÀr
, &
•804
 );

142 
	}
}

	@arch/arm/drivers/sp804.h

2 #ifde‡
SP804


4 #¥agm®
⁄˚


6 
	~<ARCH/time.h
>

7 
	~<ARCH/c⁄fig.h
>

9 
	#ISP804_FREQ
 1000000

	)

10 
	#N1E9
 1000000000L

	)

12 
	#ISP804_COUNT_MAX
 ( (
uöt32
Ë0xfffffff‡Ë

	)

13 
	#ISP804_COUNT_MIN
 100

	)

16 
	#COUNT_TO_TIME
(
C
, 
T
) \

18 (
T
)->
tv_£c
 = (
C
Ë/ 
ISP804_FREQ
; \

19 (
T
)->
tv_n£c
 = ((
C
Ë% 
ISP804_FREQ
Ë* ( 
N1E9
 / ISP804_FREQ ); \

20 } 0)

	)

23 
	#TIME_TO_COUNT
(
T
, 
C
) \

25 (
C
Ë(
T
)->
tv_£c
 * 
ISP804_FREQ
 + (T)->
tv_n£c
 / ( 
N1E9
 / ISP804_FREQ ) ;\

26 } 0)

	)

32 
	#TIMER_LOAD
 0x00000000

	)

33 
	#TIMER_VALUE
 0x00000004

	)

34 
	#TIMER_CONTROL
 0x00000008

	)

35 
	#TIMER_INTCLR
 0x0000000c

	)

36 
	#TIMER_RIS
 0x00000010

	)

37 
	#TIMER_MIS
 0x00000014

	)

38 
	#TIMER_BGLOAD
 0x00000018

	)

41 
	#TIMER_ENABLE
 (1<<7Ë

	)

42 
	#TIMER_MODE_PERIODIC
 (1<<6Ë

	)

43 
	#TIMER_INT_ENABLE
 (1<<5Ë

	)

46 
	#TIMER_SIZE_32
 (1<<1Ë

	)

47 
	#TIMER_ONESHOT
 (1<<0Ë

	)

	@arch/arm/drivers/uart0.c

3 #ifde‡
UART0


5 
	~<ty≥s/io.h
>

6 
	~<lib/°rög.h
>

7 
	~<ty≥s/basic.h
>

8 
	~<¨ch/devi˚.h
>

9 
	~<kî√l/î∫o.h
>

10 
	~<ARCH/c⁄fig.h
>

12 
	#UART0_FR
 (
UART0_BASE
 + 0x18)

	)

13 
	#UART0_DR
 (
UART0_BASE
 + 0x00)

	)

14 
	#UART0_IMSC
 (
UART0_BASE
 + 0x38)

	)

16 
u¨t0_putch¨
 ( 
c
 );

17 
u¨t0_gëch¨
 ();

18 
u¨t0_öô
 ();

19 
u¨t0_£nd
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
dev
 );

20 
u¨t0_ªcv
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
dev
 );

27 
	$u¨t0_putch¨
 ( 
c
 )

29 vﬁ©ûê*
u¨t_dr
 = (*Ë
UART0_DR
;

30 vﬁ©ûê*
u¨t_‰
 = (*Ë
UART0_FR
;

33  (*
u¨t_‰
) & (1 << 5) )

37 *
u¨t_dr
 = (Ë
c
;

39 
	}
}

44 
	$u¨t0_gëch¨
 ()

46 vﬁ©ûê*
u¨t_dr
 = (*Ë
UART0_DR
;

47 vﬁ©ûê*
u¨t_‰
 = (*Ë
UART0_FR
;

49 i‡–(*
u¨t_‰
) & (1 << 4) )

52  *
u¨t_dr
;

53 
	}
}

56 
	$u¨t0_öô
 ( 
uöt
 
Êags
, *
∑øms
, 
devi˚_t
 *
dev
 )

59 
	}
}

62 
	$u¨t0_£nd
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
dev
 )

64 *
ãxt
 = 
d©a
;

66 i‡–
dev
->
Êags
 & 
DEV_TYPE_CONSOLE
 )

68 i‡–
ãxt
 =
NULL
 )

71  *
ãxt
 != '\0' )

72 
	`u¨t0_putch¨
 ( *
ãxt
++ );

74  
	`°æí
 ( 
ãxt
 );

77  
EXIT_FAILURE
;

79 
	}
}

84 
	$u¨t0_ªcv
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
dev
 )

86 
c
;

88 i‡–!
d©a
 || 
size
 < 1 )

91 
c
 = 
	`u¨t0_gëch¨
 ();

93 i‡–
c
 == -1 )

96 *–(
uöt
 *Ë
d©a
 ) = 
c
;

99 
	}
}

102 
	$u¨t_°©us
 ( 
uöt
 
Êags
, 
devi˚_t
 *
dev
 )

104 
rÊags
 = 0;

105 vﬁ©ûê*
u¨t_‰
 = (*Ë
UART0_FR
;

107 i‡–!–(*
u¨t_‰
) & (1 << 4) ) )

108 
rÊags
 |
DEV_IN_READY
;

110 i‡–!–(*
u¨t_‰
) & (1 << 5) ) )

111 
rÊags
 |
DEV_OUT_READY
;

113  
DEV_IN_READY
;

114 
	}
}

117 
devi˚_t
 
	gu¨t0_dev
 = (device_t)

119 .
dev_«me
 = "UART0",

120 .
	gúq_num
 = -1,

121 .
	gúq_h™dÀr
 = 
NULL
,

123 .
	göô
 = 
u¨t0_öô
,

124 .
	gde°roy
 = 
NULL
,

125 .
	g£nd
 = 
u¨t0_£nd
,

126 .
	gªcv
 = 
u¨t0_ªcv
,

127 .
	g°©us
 = 
u¨t_°©us
,

129 .
	gÊags
 = 
DEV_TYPE_SHARED
 | 
DEV_TYPE_CONSOLE
,

130 .
	g∑øms
 = (*Ë&
u¨t0_dev


	@arch/arm/interrupt.c

3 
	#_ARCH_INTERRUPTS_C_


	)

4 
	~"öãºu±.h
"

6 
	~<¨ch/¥o˚ss‹.h
>

7 
	~<kî√l/î∫o.h
>

8 
	~<lib/li°.h
>

9 
	~<kî√l/mem‹y.h
>

12 
¨ch_ic_t
 
IC_DEV
;

13 
¨ch_ic_t
 *
	gicdev
 = &
IC_DEV
;

16 
li°_t
 
	gih™dÀrs
[
INTERRUPTS
];

22 
	g√w_mode
 = 
KERNEL_MODE
;

23 
	g¥ev_mode
 = 
KERNEL_MODE
;

25 
	sihndÃ


27 *
	mdevi˚
;

28 (*
	mih™dÀr
Ë–, *
	mdevi˚
 );

30 
li°_h
 
	mli°
;

34 
	$¨ch_öô_öãºu±s
 ()

36 
i
;

38 
icdev
->
	`öô
 ();

40  
i
 = 0; i < 
INTERRUPTS
; i++ )

41 
	`li°_öô
 ( &
ih™dÀrs
[
i
] );

42 
	}
}

48 
	$¨ch_úq_íabÀ
 ( 
úq
 )

50 
icdev
->
	`íabÀ_úq
 ( 
úq
 );

51 
	}
}

52 
	$¨ch_úq_dißbÀ
 ( 
úq
 )

54 
icdev
->
	`dißbÀ_úq
 ( 
úq
 );

55 
	}
}

58 
	$¨ch_ªgi°î_öãºu±_h™dÀr
 ( 
öum
, *
h™dÀr
,

59 *
devi˚
 )

61 
ihndÃ
 *
ih
;

63 i‡–
öum
 < 
INTERRUPTS
 )

65 
ih
 = 
	`kmÆloc
 (  (
ihndÃ
) );

66 
	`ASSERT
 ( 
ih
 );

68 
ih
->
devi˚
 = device;

69 
ih
->
ih™dÀr
 = 
h™dÀr
;

71 
	`li°_≠≥nd
 ( &
ih™dÀrs
[
öum
], 
ih
, &ih->
li°
 );

74 
	`LOG
 ( 
ERROR
, "I¡îru± %d c™'àbêu£d!\n", 
öum
 );

75 
	`hÆt
 ();

77 
	}
}

80 
	$¨ch_uƒegi°î_öãºu±_h™dÀr
 ( 
úq_num
, *
h™dÀr
,

81 *
devi˚
 )

83 
ihndÃ
 *
ih
, *
√xt
;

85 
	`ASSERT
 ( 
úq_num
 >0 && irq_num < 
INTERRUPTS
 );

87 
ih
 = 
	`li°_gë
 ( &
ih™dÀrs
[
úq_num
], 
FIRST
 );

89  
ih
 )

91 
√xt
 = 
	`li°_gë_√xt
 ( &
ih
->
li°
 );

93 i‡–
ih
->
ih™dÀr
 =
h™dÀr
 && ih->
devi˚
 == device )

94 
	`li°_ªmove
 ( &
ih™dÀrs
[
úq_num
], 
FIRST
, &
ih
->
li°
 );

96 
ih
 = 
√xt
;

98 
	}
}

104 
	$¨ch_öãºu±_h™dÀr
 ( 
˝§
 )

106 
ihndÃ
 *
ih
;

107 
úqn
 = 
	`¨ch_gë_úqn
 ( 
˝§
 & 0x001f );

110 if–
úqn
 =
INT_SRC_IRQ
 || irq¿=
INT_SRC_FIQ
 )

111 
úqn
 = 
icdev
->
	`gë_úq
 ();

113 if–
úqn
 > 0 && irq¿< 
INTERRUPTS
 )

115 i‡––
ih
 = 
	`li°_gë
 ( &
ih™dÀrs
[
úqn
], 
FIRST
ËË!
NULL
 )

118  
ih
 )

120 
ih
->
	`ih™dÀr
 ( 
úqn
, ih->
devi˚
 );

122 
ih
 = 
	`li°_gë_√xt
 ( &ih->
li°
 );

126 
	`LOG
 ( 
ERROR
, "Unregistered interrupt: %d!\n(%s)\n",

127 
úqn
, 
icdev
->
	`öt_des¸
 ( irqn ) );

128 
	`hÆt
 ();

132 
	`LOG
 ( 
ERROR
, "Unknow¿öãºu±: %d !\n", 
úqn
 );

133 
	`hÆt
 ();

136 
¥ev_mode
 = 
√w_mode
;

137 
√w_mode
 = 
USER_MODE
;

138 
	}
}

141 
	$¨ch_√w_mode
 ()

143  
√w_mode
;

144 
	}
}

147 
	$¨ch_¥ev_mode
 ()

149  
¥ev_mode
;

150 
	}
}

	@arch/arm/interrupt.h

3 #¥agm®
⁄˚


8 
	#INT_SRC_UNUSED
 0

	)

9 
	#INT_SRC_UNDEF
 1

	)

10 
	#INT_SRC_SWI
 2

	)

11 
	#INT_SRC_PRE_ABORT
 3

	)

12 
	#INT_SRC_ABORT
 4

	)

13 
	#INT_SRC_IRQ
 5

	)

14 
	#INT_SRC_FIQ
 6

	)

15 
	#INT_SRC_NUM
 7

	)

17 
	#SOFT_IRQ
 
INT_SRC_SWI


	)

18 
	#INT_MEM_FAULT
 
INT_SRC_ABORT


	)

19 
	#INT_UNDEF_FAULT
 
INT_SRC_UNDEF


	)

22 
	#INTERRUPTS
 ( 
INT_SRC_NUM
 + 32 + 32 )

	)

23 
	#IRQ_OFFSET
 
INT_SRC_NUM


	)

25 #i‚de‡
ASM_FILE


27 
	~<¨ch/öãºu±.h
>

30 
	s_öãºu±_c⁄åﬁÀr_


32 (*
	möô
) ();

33 (*
	mdißbÀ_úq
Ë–
	múq
 );

34 (*
	míabÀ_úq
Ë–
	múq
 );

35 (*
	m©_exô
Ë–
	múq
 );

36 (*
	mgë_úq
) ();

38 *(*
	möt_des¸
Ë–
	múq
 );

40 
	t¨ch_ic_t
;

43 
	~<ARCH/drivîs/∂190.h
>

	@arch/arm/memory.c

3 
	#_ARCH_


	)

4 
	~<¨ch/mem‹y.h
>

7 
uöt8
 
	gsy°em_°ack
 [ 
KERNEL_STACK_SIZE
 ];

10 
m£g_t
 
	gm£g
[3];

16 
m£g_t
 *
	$¨ch_mem‹y_öô
 ()

18 
kî√l_code_addr
, 
kî√l_íd_addr
;

21 
m£g
[0].
ty≥
 = 
MS_KERNEL
;

22 
m£g
[0].
°¨t
 = &
kî√l_code_addr
;

23 
m£g
[0].
size
 = (
uöt
Ë&
kî√l_íd_addr
 - (uötË&
kî√l_code_addr
;

26 
m£g
[1].
ty≥
 = 
MS_KHEAP
;

27 
m£g
[1].
°¨t
 = &
kî√l_íd_addr
;

28 
m£g
[1].
size
 = 
SYSTEM_MEMORY
 - (
uöt
Ëm£g[1].
°¨t
;

30 
m£g
[2].
ty≥
 = 
MS_END
;

32  
m£g
;

33 
	}
}

	@arch/arm/processor.h

3 #¥agm®
⁄˚


5 
	#CPSR_IRQ
 0xc0

	)

7 
	#CPSR_MODE_FIQ
 0x11

	)

8 
	#CPSR_MODE_IRQ
 0x12

	)

9 
	#CPSR_MODE_SVC
 0x13

	)

10 
	#CPSR_MODE_ABT
 0x17

	)

11 
	#CPSR_MODE_UND
 0x1b

	)

12 
	#CPSR_MODE_SYS
 0x1f

	)

14 
	#CPSR_MODE_SYS_IF
 (
CPSR_MODE_SYS
|
CPSR_IRQ
)

	)

16 #i‚de‡
ASM_FILE


18 
	#¨ch_dißbÀ_öãºu±s
() \

19 
	`asm
 ( "push {r0}\n\t" \

23 "p› {r0}\n\t" )

	)

25 
	#¨ch_íabÀ_öãºu±s
() \

26 
	`asm
 ( "push {r0}\n\t" \

30 "p› {r0}\n\t" )

	)

32 
	#¨ch_hÆt
() \

34 
	`¨ch_dißbÀ_öãºu±s
(); \

35 
asm
 volatile ( "b .\n\t" ); \

36 } 0)

	)

38 
	#¨ch_su•íd
(Ë
	`asm
 ("" : : : "mem‹y"Ë

	)

40 
	#¨ch_øi£_öãºu±
(
p
Ë
asm
 volatile ( "svc %0\n\t" :: \

41 "i" (
p
):"mem‹y")

	)

43 
	#¨ch_mem‹y_b¨rõr
(Ë
	`asm
 ("" : : : "mem‹y")

	)

46 
ölöe
 
	$£t_öãºu±s
 ( 
íabÀ
 )

48 
ﬁd_Êags
;

50 
asm
 vﬁ©ûê–"mr†%0, cp§\n\t" : "Ù" (
ﬁd_Êags
) );

52 i‡(
íabÀ
)

53 
	`¨ch_íabÀ_öãºu±s
 ();

55 
	`¨ch_dißbÀ_öãºu±s
 ();

57  (
ﬁd_Êags
 & 
CPSR_IRQ
) == 0;

58 
	}
}

60 
	~"öãºu±.h
"

62 
ölöe
 
	$¨ch_gë_úqn
 ( 
mode
 )

64  
mode
 )

66 
CPSR_MODE_FIQ
:  
INT_SRC_FIQ
;

67 
CPSR_MODE_IRQ
:  
INT_SRC_IRQ
;

68 
CPSR_MODE_ABT
:  
INT_SRC_ABORT
;

69 
CPSR_MODE_SVC
:  
INT_SRC_SWI
;

70 
CPSR_MODE_UND
:  
INT_SRC_UNDEF
;

73 
	}
}

	@arch/arm/time.c

3 
	~"time.h
"

5 
	~<ty≥s/time.h
>

7 
¨ch_timî_t
 
TIMER
;

8 
¨ch_timî_t
 *
	gtimî
 = &
TIMER
;

10 
time•ec_t
 
	g˛ock
;

11 
time•ec_t
 
	gdñay
;

12 
time•ec_t
 
	gœ°_lﬂd
;

14 
time•ec_t
 
	gthªshﬁd
;

16 (*
	gÆ¨m_h™dÀr
) ();

19 
¨ch_timî_h™dÀr
 ();

21 
	$¨ch_íabÀ_timî_öãºu±
 (Ë{ 
timî
->
	`íabÀ_öãºu±
 (); 
	}
}

22 
	$¨ch_dißbÀ_timî_öãºu±
 (Ë{ 
timî
->
	`dißbÀ_öãºu±
 (); 
	}
}

24 
	$¨ch_gë_mö_öãrvÆ
 ( 
time•ec_t
 *
time
 )

26 *
time
 = 
timî
->
mö_öãrvÆ
;

27 
	}
}

30 
	$¨ch_timî_öô
 ()

32 
˛ock
.
tv_£c
 = clock.
tv_n£c
 = 0;

33 
Æ¨m_h™dÀr
 = 
NULL
;

35 
timî
->
	`öô
 ();

37 
œ°_lﬂd
 = 
dñay
 = 
timî
->
max_öãrvÆ
;

39 
timî
->
	`£t_öãrvÆ
 ( &
œ°_lﬂd
 );

40 
timî
->
	`ªgi°î_öãºu±
 ( 
¨ch_timî_h™dÀr
 );

41 
timî
->
	`íabÀ_öãºu±
 ();

43 
thªshﬁd
.
tv_£c
 = 
timî
->
mö_öãrvÆ
.tv_sec / 2;

44 
thªshﬁd
.
tv_n£c
 = 
timî
->
mö_öãrvÆ
.tv_nsec / 2;

45 i‡–
timî
->
mö_öãrvÆ
.
tv_£c
 % 2 )

46 
thªshﬁd
.
tv_n£c
 += 1000000000L / 2;

49 
	}
}

56 
	$¨ch_timî_£t
 ( 
time•ec_t
 *
time
, *
Æ¨m_func
 )

58 
time•ec_t
 
ªmaödî
;

60 
timî
->
	`gë_öãrvÆ_ªmaödî
 ( &
ªmaödî
 );

61 
	`time_sub
 ( &
œ°_lﬂd
, &
ªmaödî
 );

62 
	`time_add
 ( &
˛ock
, &
œ°_lﬂd
 );

64 
dñay
 = *
time
;

65 i‡–
	`time_cmp
 ( &
dñay
, &
timî
->
mö_öãrvÆ
 ) < 0 )

66 
dñay
 = 
timî
->
mö_öãrvÆ
;

68 
Æ¨m_h™dÀr
 = 
Æ¨m_func
;

70 i‡–
	`time_cmp
 ( &
dñay
, &
timî
->
max_öãrvÆ
 ) > 0 )

71 
œ°_lﬂd
 = 
timî
->
max_öãrvÆ
;

73 
œ°_lﬂd
 = 
dñay
;

75 
timî
->
	`£t_öãrvÆ
 ( &
œ°_lﬂd
 );

76 
	}
}

82 
	$¨ch_gë_time
 ( 
time•ec_t
 *
time
 )

84 
time•ec_t
 
ªmaödî
;

86 
timî
->
	`gë_öãrvÆ_ªmaödî
 ( &
ªmaödî
 );

88 *
time
 = 
œ°_lﬂd
;

89 
	`time_sub
 ( 
time
, &
ªmaödî
 );

90 
	`time_add
 ( 
time
, &
˛ock
 );

91 
	}
}

98 
	$¨ch_£t_time
 ( 
time•ec_t
 *
time
 )

100 (*
k_h™dÀr
) ();

102 
˛ock
 = *
time
;

105 i‡–
Æ¨m_h™dÀr
 )

107 
k_h™dÀr
 = 
Æ¨m_h™dÀr
;

108 
Æ¨m_h™dÀr
 = 
NULL
;

109 
	`k_h™dÀr
 ();

111 
	}
}

117 
	$¨ch_timî_h™dÀr
 ()

119 (*
k_h™dÀr
) ();

121 
	`time_add
 ( &
˛ock
, &
œ°_lﬂd
 );

123 
	`time_sub
 ( &
dñay
, &
œ°_lﬂd
 );

124 
œ°_lﬂd
 = 
timî
->
max_öãrvÆ
;

126 i‡–
	`time_cmp
 ( &
dñay
, &
thªshﬁd
 ) <= 0 )

129 
dñay
 = 
timî
->
max_öãrvÆ
;

130 
timî
->
	`£t_öãrvÆ
 ( &
œ°_lﬂd
 );

132 i‡–
Æ¨m_h™dÀr
 )

134 
k_h™dÀr
 = 
Æ¨m_h™dÀr
;

135 
Æ¨m_h™dÀr
 = 
NULL
;

136 
	`k_h™dÀr
 ();

140 i‡–
	`time_cmp
 ( &
dñay
, &
timî
->
mö_öãrvÆ
 ) < 0 )

141 
œ°_lﬂd
 = 
timî
->
mö_öãrvÆ
;

142 i‡–
	`time_cmp
 ( &
dñay
, &
œ°_lﬂd
 ) < 0 )

143 
œ°_lﬂd
 = 
dñay
;

145 
timî
->
	`£t_öãrvÆ
 ( &
œ°_lﬂd
 );

147 
	}
}

	@arch/arm/time.h

3 #¥agm®
⁄˚


5 
	~<ty≥s/time.h
>

8 
	s_¨ch_timî_t_


10 
time•ec_t
 
	mmö_öãrvÆ
;

11 
time•ec_t
 
	mmax_öãrvÆ
;

13 (*
	möô
) ();

14 (*
	m£t_öãrvÆ
Ë–
	mtime•ec_t
 * );

15 (*
	mgë_öãrvÆ_ªmaödî
Ë–
	mtime•ec_t
 * );

16 (*
	míabÀ_öãºu±
) ();

17 (*
	mdißbÀ_öãºu±
) ();

18 (*
	mªgi°î_öãºu±
Ë–*
	mh™dÀr
 );

20 
	t¨ch_timî_t
;

22 
	~<¨ch/time.h
>

	@arch/arm/types.h

3 #¥agm®
⁄˚


5 
	t¨ch_öt8
;

6 
	t¨ch_uöt8
;

7 
	t¨ch_öt16
;

8 
	t¨ch_uöt16
;

9 
	t¨ch_öt32
;

10 
	t¨ch_uöt32
;

11 
	t¨ch_uöt
;

13 
	t¨ch_öt64
;

14 
	t¨ch_uöt64
;

17 
	t¨ch_aöt
;

20 
	#__ARCH_WORD_SIZE
 32

	)

21 
	t¨ch_w‹d_t
;

22 
	t¨ch_sw‹d_t
;

24 
	~<¨ch/ty≥s.h
>

	@arch/i386/bits.h

3 
	~<ty≥s/basic.h
>

6 
	#ARCH_MSB_INDEX


	)

7 
	#ARCH_LSB_INDEX


	)

8 
	#ARCH_MUL_DIV_32


	)

15 
ölöe
 
uöt32
 
	$¨ch_msb_ödex
 ( 
uöt32
 
num
 )

23   31 - 
	`__buûtö_˛z
 (
num
);

24 
	}
}

31 
ölöe
 
uöt32
 
	$¨ch_lsb_ödex
 ( 
uöt32
 
num
 )

38   
	`__buûtö_ffs
 (
num
) - 1;

39 
	}
}

48 
ölöe
 
uöt32
 
	$¨ch_mul_div_32
 ( 
uöt32
 
a
, uöt32 
b
, uöt32 
c
 )

50 
uöt32
 
ªsu…
, 
m1
, 
m0
, 
mod
;

52 
	`asm
 ("muŒ %2":"˜" (
m0
), "=d" (
m1
):"rm" (
b
), "0" (
a
) );

53 
	`asm
 ("div»%2":"˜" (
ªsu…
), "=d" (
mod
):"rm" (
c
), "0" (
m0
), "1" (
m1
) );

55  
ªsu…
;

56 
	}
}

	@arch/i386/context.c

3 
	#_ARCH_


	)

4 
	~"c⁄ãxt.h
"

6 
	~"öãºu±.h
"

7 
	~"des¸ùt‹.h
"

8 
	~<kî√l/mem‹y.h
>

10 #ifde‡
USE_SSE


11 
uöt32
 
	g¨ch_s£_suµ‹ãd
 = 0;

18 
¨ch_¸óã_thªad_c⁄ãxt
 ( 
c⁄ãxt_t
 *
c⁄ãxt
,

19 (
func
Ë(*), *
∑øm
, (*
thªad_exô
)(),

20 *
°ack
, 
size_t
 
°ack_size
 )

22 
uöt32
 *
t°ack
;

25 
t°ack
 = 
°ack
 + 
°ack_size
;

28 *–--
t°ack
 ) = (
uöt32
Ë
∑øm
;

30 *–--
t°ack
 ) = (
uöt32
Ë
thªad_exô
;

33 
c⁄ãxt
->c⁄ãxà(*Ë
t°ack
 -  (
¨ch_c⁄ãxt_t
);

36 
c⁄ãxt
->c⁄ãxt->
eù
 = (
uöt32
Ë
func
;

37 
c⁄ãxt
->c⁄ãxt->
eÊags
 = 
INIT_EFLAGS
;

41 #ifde‡
USE_SSE


42 i‡–
¨ch_s£_suµ‹ãd
 )

44 
uöt32
 
t›
 = (uöt32Ë
c⁄ãxt
->context;

47 
c⁄ãxt
->
s£_mmx_Âu
 = ( 
t›
 - 512 ) & 0xfffffff0;

50 
asm
 volatile (

53 :: "m" (
c⁄ãxt
->
s£_mmx_Âu
)

57 
	}
}

60 
	$¨ch_swôch_to_thªad
 ( 
c⁄ãxt_t
 *
‰om
, c⁄ãxt_à*
to
 )

62 #i‚de‡
USE_SSE


63 
asm
 volatile (

79 : "=m" (
‰om
->
c⁄ãxt
)

80 : "m" (
‰om
),

81 "m" (
to
->
c⁄ãxt
)

84 
asm
 volatile (

119 : "=m" (
‰om
->
c⁄ãxt
),

120 "=m" (
‰om
->
s£_mmx_Âu
)

121 : "m" (
‰om
),

122 "m" (
to
->
c⁄ãxt
),

123 "m" (
to
->
s£_mmx_Âu
),

124 "m" (
¨ch_s£_suµ‹ãd
)

127 
	}
}

130 
	$¨ch_thªad_exô_wôh_°ack_swôch
 ( *
kthªad
, *
exô_°©us
, 
f‹˚
 )

132 
uöt8
 
sy°em_°ack
[];

134 
asm
 volatile (

150 :: "m" (
kthªad
),

151 "m" (
exô_°©us
),

152 "m" (
f‹˚
),

153 "i" (
sy°em_°ack
 + 
KERNEL_STACK_SIZE
)

155 
	}
}

	@arch/i386/context.h

3 #¥agm®
⁄˚


5 
	~<ty≥s/basic.h
>

6 
	~<¨ch/c⁄ãxt.h
>

8 
	#INIT_EFLAGS
 0x0202

	)

13 
	s_¨ch_c⁄ãxt_t_


15 
öt32
 
	medi
, 
	mesi
, 
	mebp
, 
	m_e•
, 
	mebx
, 
	medx
, 
	mecx
, 
	móx
;

16 
uöt32
 
	meÊags
;

17 
uöt32
 
	meù
;

19 
	t__©åibuã__
((
	t__∑cked__
)Ë
	t¨ch_c⁄ãxt_t
;

22 
	s_c⁄ãxt_t_


24 
¨ch_c⁄ãxt_t
 *
	mc⁄ãxt
;

26 #ifde‡
USE_SSE


27 
uöt32
 
	ms£_mmx_Âu
;

	@arch/i386/descriptor.c

3 
	#_ARCH_DESCRIPTORS_C_


	)

4 
	~"des¸ùt‹.h
"

6 
	~<¨ch/öãºu±.h
>

7 
	~<kî√l/î∫o.h
>

10 
GDT_t
 
	ggdt
[] =

12 
GDT_0
,

13 
GDT_CODE
, 
GDT_DATA
,

14 
GDT_TSS


18 
IDT_t
 
	gidt
[
INTERRUPTS
];

21 
tss_t
 
	gtss
;

25 
	$¨ch_des¸ùt‹s_öô
 ()

27 
	`GDT_öô
 ();

28 
	`IDT_öô
 ();

29 
	}
}

32 
	$GDT_öô
 ()

34 
GDTR_t
 
gdå
;

37 
	`¨ch_upd_£gm_des¸
 (
SEGM_CODE
, 
NULL
, (
size_t
Ë0xffffffff, 
PRIV_KERNEL
);

38 
	`¨ch_upd_£gm_des¸
 (
SEGM_DATA
, 
NULL
, (
size_t
Ë0xffffffff, 
PRIV_KERNEL
);

39 
	`¨ch_upd_£gm_des¸
 (
SEGM_TSS
, &
tss
, (
tss_t
Ë- 1, 
PRIV_KERNEL
);

41 
gdå
.
gdt
 = gdt;

42 
gdå
.
limô
 = (
gdt
) - 1;

45 
	`asm
 ( "lgdt %0\n\t" :: "m" (
gdå
) );

48 
asm
 volatile (

59 :: "i" ( 
	`GDT_DESCRIPTOR
 ( 
SEGM_CODE
, 
GDT
, 
PRIV_KERNEL
 ) ),

60 "i" ( 
	`GDT_DESCRIPTOR
 ( 
SEGM_DATA
, 
GDT
, 
PRIV_KERNEL
 ) )

65 
	`asm
 ( "…rw %w0\n\t" :: "r" 
	`GDT_DESCRIPTOR
(
SEGM_TSS
, 
GDT
, 
PRIV_KERNEL
));

66 
	}
}

69 
	$IDT_öô
 ()

72 
uöt32
 
¨ch_öãºu±_h™dÀrs
[
INTERRUPTS
];

73 
IDTR_t
 
idå
;

74 
i
;

75 
uöt32
 
off£t
;

78  
i
 = 0; i < 
INTERRUPTS
; i++ )

80 
off£t
 = (
uöt32
Ë
¨ch_öãºu±_h™dÀrs
[
i
];

82 
idt
[
i
].
off£t_lo
 = 
off£t
 & 0xffff;

83 
idt
[
i
].
£g_£l
 = 
	`GDT_DESCRIPTOR
 ( 
SEGM_CODE
, 
GDT
, 
PRIV_KERNEL
);

84 
idt
[
i
].
zîo
 = 0;

85 
idt
[
i
].
ty≥
 = 0x0e;

86 
idt
[
i
].
DPL
 = 
PRIV_KERNEL
;

87 
idt
[
i
].
¥e£¡
 = 1;

88 
idt
[
i
].
off£t_hi
 = (
off£t
 >> 16) & 0xffff;

92 
idå
.
ba£
 = 
idt
;

93 
idå
.
limô
 = (
IDT_t
Ë* 
INTERRUPTS
 - 1;

94 
	`asm
 ( "lidà%0" : : "m" (
idå
) );

95 
	}
}

98 
	$¨ch_upd_£gm_des¸
 ( 
id
, *
°¨t_addr
, 
size_t
 
size
,

99 
¥iv_Àvñ
 )

101 
uöt32
 
addr
 = (uöt32Ë
°¨t_addr
;

102 
uöt32
 
gsize
 = 
size
;

104 
	`ASSERT
 ( 
id
 > 0 && id <= 3 );

106 
gdt
[
id
].
ba£_addr0
 = 
addr
 & 0x0000ffff;

107 
gdt
[
id
].
ba£_addr1
 = (
addr
 & 0x00ff0000) >> 16;

108 
gdt
[
id
].
ba£_addr2
 = (
addr
 & 0xff000000) >> 24;

110 i‡(
size
 < (1 << 20)) {

111 
gsize
 = 
size
 - 1;

112 
gdt
[
id
].
G
 = 0;

115 
gsize
 = 
size
 >> 12;

116 i‡(
size
 & 0x0fff)

117 
gsize
++;

118 
gsize
--;

119 
gdt
[
id
].
G
 = 1;

122 
gdt
[
id
].
£gm_limô0
 = 
gsize
 & 0x0000ffff;

123 
gdt
[
id
].
£gm_limô1
 = (
gsize
 & 0x000f0000) >> 16;

125 
gdt
[
id
].
DPL
 = 
¥iv_Àvñ
;

126 
	}
}

	@arch/i386/descriptor.h

3 #¥agm®
⁄˚


6 
	#SEGM_CODE
 1

	)

7 
	#SEGM_DATA
 2

	)

8 
	#SEGM_TSS
 3

	)

10 
	#PRIV_KERNEL
 0

	)

11 
	#PRIV_USER
 3

	)

13 
	#GDT
 0

	)

14 
	#LDT
 1

	)

16 
	#GDT_DESCRIPTOR
(
ID
, 
TABLE
, 
PRIV_LEVEL
) \

17 –((
ID
Ë<< 3Ë| ((
TABLE
Ë<< 2Ë| (
PRIV_LEVEL
Ë)

	)

19 #i‚de‡
ASM_FILE


21 
	~<ty≥s/basic.h
>

23 
¨ch_des¸ùt‹s_öô
 ();

27 #ifde‡
_ARCH_DESCRIPTORS_C_


32 
	s_GDT_t_


34 
uöt16
 
	m£gm_limô0
;

35 
uöt16
 
	mba£_addr0
;

36 
uöt8
 
	mba£_addr1
;

37 
uöt8
 
	mty≥
 : 4;

38 
uöt8
 
	mS
 : 1;

39 
uöt8
 
	mDPL
 : 2;

40 
uöt8
 
	mP
 : 1;

41 
uöt8
 
	m£gm_limô1
: 4;

42 
uöt8
 
	mAVL
 : 1;

43 
uöt8
 
	mL
 : 1;

44 
uöt8
 
	mDB
 : 1;

45 
uöt8
 
	mG
 : 1;

46 
uöt8
 
	mba£_addr2
;

48 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tGDT_t
;

51 
	s_GDTR_t_


53 
uöt16
 
	mlimô
;

54 
GDT_t
 *
	mgdt
;

56 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tGDTR_t
;

61 
	#GDT_0
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

67 
	#GDT_CODE
 \

81 }

	)

87 
	#GDT_DATA
 \

101 }

	)

105 
	#GDT_TSS
 \

106 { (
tss_t
), \

119 }

	)

125 
	s_IDT_T_


127 
uöt16
 
	moff£t_lo
;

128 
uöt16
 
	m£g_£l
;

129 
uöt8
 
	mzîo
;

130 
uöt8
 
	mty≥
 : 5;

131 
uöt8
 
	mDPL
 : 2;

132 
uöt8
 
	m¥e£¡
 : 1;

133 
uöt16
 
	moff£t_hi
;

135 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tIDT_t
;

140 
uöt16
 
	mlimô
;

141 
IDT_t
 *
	mba£
;

143 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tIDTR_t
;

147 
	s_tss_t_


149 
uöt32
 
	mlök
;

151 
uöt32
 
	me•0
;

152 
uöt16
 
	mss0
;

154 
uöt16
 
	mss0__
;

157 
uöt32
 
	me•1
, 
	mss1
, 
	me•2
, 
	mss2
;

159 
uöt32
 
	m¸3
;

161 
uöt32
 
	meù
, 
	meÊags
, 
	mªg
[8], 
	m£g
[6];

163 
uöt32
 
	mldt
;

165 
uöt16
 
	må≠
;

167 
uöt16
 
	mui_m≠
;

169 
	t__©åibuã__
((
	t__∑cked__
)Ë
	ttss_t
;

172 
GDT_öô
 ();

173 
IDT_öô
 ();

174 
¨ch_upd_£gm_des¸
 (
id
, *
°¨t
, 
size_t
 
size
, 
¥iv
);

	@arch/i386/device.h

3 #¥agm®
⁄˚


5 
	~<ty≥s/io.h
>

10 
	~"drivîs/i8042.h
"

	@arch/i386/drivers/i8042.c

2 #ifde‡
I8042


4 
	~"i8042.h
"

6 
	~"../io.h
"

7 
	~"../öãºu±.h
"

8 
	~"../¥o˚ss‹.h
"

9 
	~<kî√l/î∫o.h
>

10 
	~<¨ch/devi˚.h
>

12 
	#KEYB_DR
 0x60

	)

13 
	#KEYB_SR
 0x64

	)

15 
	#KEYB_BUFF_SIZE
 256

	)

17 
	#CAPSLED
 0x04

	)

19 
	#ASCII_KEY
(
KEY
Ë((KEYË& 0x000000ffË

	)

21 
	#SHIFT_ON
(
S
Ë––((SË& (
LSHIFT
 | 
RSHIFT
)Ë&& !((SË& 
CAPSL
) ) || \

22 –!((
S
Ë& (
LSHIFT
 | 
RSHIFT
)Ë&& ((SË& 
CAPSL
ËË)

	)

25 
i8042_öô
–
uöt
 
Êags
, *
kî√l_ˇŒback_fun˘i⁄
, 
devi˚_t
 *
d
);

26 
i8042_de°roy
 ( 
uöt
 
Êags
, *
∑øms
, 
devi˚_t
 *
d
 );

27 
i8042_£nd
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
d
 );

28 
i8042_gë
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
d
 );

29 
i8042_öãºu±_h™dÀr
 ( 
úq_num
, *
devi˚
 );

31 
i8042_£nd_cmd
 ( 
cmd
 );

32 
i8042_£t_Àds
 ();

33 
öt32
 
i8042_¥ï¨e_ch¨
 ( 
c
 );

34 
öt32
 
i8042_ªad
 ();

35 
i8042_ö£π_key°roke
 ( 
c
 );

39 vﬁ©ûê
öt32
 
	gkeyb_buf„r
[
KEYB_BUFF_SIZE
];

40 vﬁ©ûê
	gbuf_fú°
;

41 vﬁ©ûê
	gbuf_œ°
;

42 vﬁ©ûê
	gbuf_size
;

45 vﬁ©ûê
öt32
 
	g•ec_keys_down
;

47 vﬁ©ûê
uöt32
 
	gkeyb_Êags
;

49 (*
kî√l_öãºu±_ˇŒback_fun˘i⁄
)(Ë
NULL
;

52 
	$i8042_öô
 (
uöt
 
Êags
, *
kî√l_ˇŒback_fun˘i⁄
, 
devi˚_t
 *
d
)

54 
buf_fú°
 = 
buf_œ°
 = 
buf_size
 = 0;

55 
•ec_keys_down
 = (
öt32
) 0;

56 
keyb_Êags
 = 
Êags
;

59  
	`i8042_ªad
 () > 0 )

62 
kî√l_öãºu±_ˇŒback_fun˘i⁄
 = 
kî√l_ˇŒback_fun˘i⁄
;

65 
	}
}

68 
	$i8042_de°roy
 ( 
uöt
 
Êags
, *
∑øms
, 
devi˚_t
 *
d
 )

70 
kî√l_öãºu±_ˇŒback_fun˘i⁄
 = 
NULL
;

73 
	}
}

76 
	$i8042_£nd
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
d
 )

78 
i
, *
ch¨s
 = (*Ë
d©a
;

80  
i
 = 0; i < 
size
; i++ )

81 
	`i8042_ö£π_key°roke
 ( 
ch¨s
[
i
] );

84 
	}
}

88 
	$i8042_gë
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
d
 )

90 
öt32
 
key
 = (int32) 0;

92 i‡–
buf_size
 > 0 )

94 i‡––
Êags
 & 
ONLY_LAST
 ) )

97 
buf_fú°
 = (
buf_œ°
>0 ? buf_œ°-1 : 
KEYB_BUFF_SIZE
);

98 
buf_size
 = 1;

102 
key
 = 
keyb_buf„r
[
buf_fú°
];

103 
buf_fú°
 = ( buf_fú° + 1 ) % 
KEYB_BUFF_SIZE
;

104 
buf_size
--;

106  ( 
Êags
 & 
CONSOLE_ASCII
 ) && !–
key
 = 
	`ASCII_KEY
 (key) )

107 && 
buf_size
 > 0 );

109 i‡–
Êags
 & 
CLEAR_BUFFER
 )

110 
buf_fú°
 = 
buf_œ°
 = 
buf_size
 = 0;

112 i‡–
key
 && 
d©a
 )

113 *–(
öt32
 *Ë
d©a
 ) = 
key
;

116  ( 
key
 ? 1 : 0 );

117 
	}
}

120 
	$i8042_öãºu±_h™dÀr
 ( 
úq_num
, *
devi˚
 )

122 
öt32
 
c
;

123 
√w_key°rokes
 = 
FALSE
;

125  ( 
c
 = 
	`i8042_ªad
 () ) >= 0 )

127 
√w_key°rokes
 |
	`i8042_ö£π_key°roke
 ( 
c
 );

129 i‡–
	`ASCII_KEY
 ( 
c
 ) && ( 
keyb_Êags
 & 
ECHO_ON
 ) )

130 
	`k¥ötf
 ( "%c", 
	`ASCII_KEY
 ( 
c
 ) );

138 i‡–
√w_key°rokes
 && 
kî√l_öãºu±_ˇŒback_fun˘i⁄
 )

139 
	`kî√l_öãºu±_ˇŒback_fun˘i⁄
 ();

141  
√w_key°rokes
;

142 
	}
}

145 
	$i8042_ö£π_key°roke
 ( 
c
 )

147 i‡–
c
 =(
öt32
) 0 )

150 i‡––
keyb_Êags
 & 
CONSOLE_ASCII
 ) && 
	`ASCII_KEY
 ( 
c
 ) == 0 )

155 
keyb_buf„r
[
buf_œ°
] = 
c
 | 
•ec_keys_down
;

157 
buf_œ°
 = ( buf_œ° + 1 ) % 
KEYB_BUFF_SIZE
;

159 i‡–
buf_size
 < 
KEYB_BUFF_SIZE
 )

160 
buf_size
++;

162 
buf_fú°
 = ( buf_fú° + 1 ) % 
KEYB_BUFF_SIZE
;

166 
	}
}

169 
	gkeyb_codes
[128] =

180 
	gkeyb_codes_shi·
[128] =

194 
öt32
 
	$i8042_ªad
 ()

196 i‡–!–
	`öb
 ( 
KEYB_SR
 ) & 0x01 ) )

197  
EXIT_FAILURE
;

199 i‡–
keyb_Êags
 & 
RAW_KEYSTROKES
 )

200  (
öt32
Ë
	`öb
 ( 
KEYB_DR
 );

202  
	`i8042_¥ï¨e_ch¨
 ( 
	`öb
 ( 
KEYB_DR
 ) );

203 
	}
}

209 
öt32
 
	$i8042_¥ï¨e_ch¨
 ( 
c
 )

211 
mu…i_code
 = 0;

212 
öt32
 
key
 = (int32) 0;

214 i‡–
c
 =0xE0 && !
mu…i_code
 )

216 
mu…i_code
 = 1;

217  
key
;

220 i‡–!
mu…i_code
 )

222 
c
) {

224 
•ec_keys_down
 ^
CAPSL
;

225 
key
 = 
	`K_SPEC_KEY
 ( 
K_CAPSL
 );

226 
	`i8042_£t_Àds
 ();

230 
•ec_keys_down
 &~ 
LSHIFT
;

231 
key
 = 
	`K_SPEC_KEY
 ( 
K_LSHIFT_UP
 );

235 
•ec_keys_down
 |
LSHIFT
;

236 
key
 = 
	`K_SPEC_KEY
 ( 
K_LSHIFT_DOWN
 );

240 
•ec_keys_down
 &~ 
RSHIFT
;

241 
key
 = 
	`K_SPEC_KEY
 ( 
K_RSHIFT_UP
 );

245 
•ec_keys_down
 |
RSHIFT
;

246 
key
 = 
	`K_SPEC_KEY
 ( 
K_RSHIFT_DOWN
 );

250 
•ec_keys_down
 |
LCTRL
;

251 
key
 = 
	`K_SPEC_KEY
 ( 
K_LCTRL_DOWN
 );

255 
•ec_keys_down
 &~ 
LCTRL
;

256 
key
 = 
	`K_SPEC_KEY
 ( 
K_LCTRL_UP
 );

260 
•ec_keys_down
 |
LALT
;

261 
key
 = 
	`K_SPEC_KEY
 ( 
K_LALT_DOWN
 );

265 
•ec_keys_down
 &~ 
LALT
;

266 
key
 = 
	`K_SPEC_KEY
 ( 
K_LALT_UP
 );

270 i‡–
c
 < 128 )

272 i‡–
	`SHIFT_ON
 ( 
•ec_keys_down
 ) )

273 
key
 = (
öt32
Ë
keyb_codes_shi·
[
c
];

275 
key
 = (
öt32
Ë
keyb_codes
[
c
];

283 
c
) {

285 
•ec_keys_down
 |
RCTRL
;

286 
key
 = 
	`K_SPEC_KEY
 ( 
K_RCTRL_DOWN
 );

290 
•ec_keys_down
 &~ 
RCTRL
;

291 
key
 = 
K_RCTRL_UP
;

295 
•ec_keys_down
 |
RALT
;

296 
key
 = 
	`K_SPEC_KEY
 ( 
K_RALT_DOWN
 );

300 
•ec_keys_down
 &~ 
RALT
;

301 
key
 = 
	`K_SPEC_KEY
 ( 
K_RALT_UP
 );

305 
mu…i_code
 = 0;

308  
key
;

309 
	}
}

312 
	$i8042_£nd_cmd
 ( 
cmd
 )

315  
	`öb
 ( 
KEYB_SR
 ) & 0x02)

319 
	`outb
 ( 
KEYB_DR
, (Ë
cmd
 );

320 
	}
}

323 
	$i8042_£t_Àds
 ()

325 
	`i8042_£nd_cmd
 ( 0xED );

327 i‡–
•ec_keys_down
 & 
CAPSL
 )

328 
	`i8042_£nd_cmd
 ( 
CAPSLED
 );

330 
	`i8042_£nd_cmd
 ( 0 );

331 
	}
}

334 
	$i8042_°©us
 ( 
uöt
 
Êags
, 
devi˚_t
 *
dev
 )

336 
rÊags
 = 0;

339 i‡–
buf_size
 > 0 )

340 
rÊags
 |
DEV_IN_READY
;

342 i‡–
buf_size
 < 
KEYB_BUFF_SIZE
 )

343 
rÊags
 |
DEV_OUT_READY
;

345  
rÊags
;

346 
	}
}

349 
devi˚_t
 
	gi8042_dev
 = (device_t)

351 .
dev_«me
 = "i8042",

353 .
	gúq_num
 = 
IRQ_KEYBOARD
,

354 .
	gúq_h™dÀr
 = 
i8042_öãºu±_h™dÀr
,

356 .
	göô
 = 
i8042_öô
,

357 .
	gde°roy
 = 
i8042_de°roy
,

358 .
	g£nd
 = 
i8042_£nd
,

359 .
	gªcv
 = 
i8042_gë
,

360 .
	g°©us
 = 
i8042_°©us
,

362 .
	gÊags
 = 
DEV_TYPE_SHARED
,

363 .
	g∑øms
 = 
NULL
,

	@arch/i386/drivers/i8042.h

2 #ifde‡
I8042


4 #¥agm®
⁄˚


6 
	~<ty≥s/io.h
>

20 
	#LSHIFT
 ( (
öt32
Ë1 << 16 )

	)

21 
	#RSHIFT
 ( (
öt32
Ë1 << 17 )

	)

22 
	#LALT
 ( (
öt32
Ë1 << 18 )

	)

23 
	#RALT
 ( (
öt32
Ë1 << 19 )

	)

24 
	#LCTRL
 ( (
öt32
Ë1 << 20 )

	)

25 
	#RCTRL
 ( (
öt32
Ë1 << 21 )

	)

26 
	#CAPSL
 ( (
öt32
Ë1 << 22 )

	)

31 
	mK_LSHIFT_DOWN
 = 1,

32 
	mK_LSHIFT_UP
,

34 
	mK_RSHIFT_DOWN
,

35 
	mK_RSHIFT_UP
,

37 
	mK_LALT_DOWN
,

38 
	mK_LALT_UP
,

40 
	mK_RALT_DOWN
,

41 
	mK_RALT_UP
,

43 
	mK_LCTRL_DOWN
,

44 
	mK_LCTRL_UP
,

46 
	mK_RCTRL_DOWN
,

47 
	mK_RCTRL_UP
,

49 
	mK_CAPSL
,

52 
	mKEYS_CNT


55 
	#K_SPEC_KEY
(
KEY
Ë–(KEYË<< 8 )

	)

58 
	#ECHO_OFF
 1

	)

59 
	#ECHO_ON
 2

	)

60 
	#ONLY_LAST
 8

	)

61 
	#RAW_KEYSTROKES
 16

	)

62 
	#CLEAR_BUFFER
 32

	)

	@arch/i386/drivers/i8253.c

2 #ifde‡
I8253


4 
	~"i8253.h
"

6 
	~"../öãºu±.h
"

7 
	~"../io.h
"

9 
	~<kî√l/î∫o.h
>

12 
¨ch_timî_t
 
	gi8253
 = (arch_timer_t)

14 .
mö_öãrvÆ
 = { 0, 0 },

15 .
	gmax_öãrvÆ
 = { 0, 0 },

16 .
	göô
 = 
i8253_öô
,

17 .
	g£t_öãrvÆ
 = 
i8253_£t_time_to_cou¡î
,

18 .
	ggë_öãrvÆ_ªmaödî
 = 
i8253_gë_time_‰om_cou¡î
,

19 .
	gíabÀ_öãºu±
 = 
i8253_íabÀ_öãºu±
,

20 .
	gdißbÀ_öãºu±
 = 
i8253_dißbÀ_öãºu±
,

21 .
	gªgi°î_öãºu±
 = 
i8253_ªgi°î_öãºu±


26 
	$i8253_öô
 ()

28 
	`COUNT_TO_TIME
 ( 
COUNT_MIN
, &
i8253
.
mö_öãrvÆ
 );

29 
	`COUNT_TO_TIME
 ( 
COUNT_MAX
, &
i8253
.
max_öãrvÆ
 );

31 
	`i8253_£t
 ( 
COUNT_MAX
 );

32 
	}
}

35 
	$i8253_£t
 ( 
uöt
 
˙t
 )

37 
uöt8
 
cou¡î
;

39 
	`outb
 ( 
I8253_CMD
, 
I8253_CMD_LOAD
 );

41 
cou¡î
 = (
uöt8
Ë–
˙t
 & 0x00ff );

42 
	`outb
 ( 
I8253_CH0
, 
cou¡î
 );

44 
cou¡î
 = (
uöt8
Ë––
˙t
 >> 8 ) & 0x00ff );

45 
	`outb
 ( 
I8253_CH0
, 
cou¡î
 );

46 
	}
}

49 
uöt
 
	$i8253_gë
 ()

51 
uöt
 
lowî_byã
, 
highî_byã
;

53 
	`outb
 ( 
I8253_CMD
, 
I8253_CMD_LATCH
 );

54 
lowî_byã
 = 
	`öb
 ( 
I8253_CH0
 );

55 
highî_byã
 = 
	`öb
 ( 
I8253_CH0
 );

57  
lowî_byã
 + ( 
highî_byã
 << 8 );

58 
	}
}

61 
	$i8253_£t_time_to_cou¡î
 ( 
time•ec_t
 *
time
 )

63 
uöt
 
˙t
;

65 
	`ASSERT
 ( 
time
 &&Åime->
tv_£c
 == 0 &&

66 
time
->
tv_n£c
 <
i8253
.
max_öãrvÆ
.tv_nsec &&

67 
time
->
tv_n£c
 >
i8253
.
mö_öãrvÆ
.tv_nsec );

69 
	`TIME_TO_COUNT
 ( 
time
, 
˙t
 );

71 
	`i8253_£t
 ( 
˙t
 );

72 
	}
}

75 
	$i8253_gë_time_‰om_cou¡î
 ( 
time•ec_t
 *
time
 )

77 
uöt
 
˙t
;

79 
	`ASSERT
 ( 
time
 );

81 
˙t
 = 
	`i8253_gë
();

83 
	`COUNT_TO_TIME
 ( 
˙t
, 
time
 );

84 
	}
}

87 
	$i8253_íabÀ_öãºu±
 ()

89 
	`¨ch_úq_íabÀ
 ( 
IRQ_TIMER
 );

90 
	}
}

93 
	$i8253_dißbÀ_öãºu±
 ()

95 
	`¨ch_úq_dißbÀ
 ( 
IRQ_TIMER
 );

96 
	}
}

99 
	$i8253_ªgi°î_öãºu±
 ( *
h™dÀr
 )

101 
	`¨ch_ªgi°î_öãºu±_h™dÀr
 ( 
IRQ_TIMER
, 
h™dÀr
, &
i8253
 );

102 
	}
}

	@arch/i386/drivers/i8253.h

2 #ifde‡
I8253


4 #¥agm®
⁄˚


6 
	~"../time.h
"

7 
	~<kî√l/time.h
>

8 
	~<ty≥s/bôs.h
>

10 
	#I8253_FREQ
 1193180

	)

11 
	#N1E9
 1000000000L

	)

13 
	#COUNT_MAX
 0xffff

	)

14 
	#COUNT_MIN
 ( 
COUNT_MAX
 >> 10 )

	)

17 
	#COUNT_TO_TIME
(
C
, 
T
) \

18 dÿ{ (
T
)->
tv_£c
 = 0; (T)->
tv_n£c
 = 
	`mul_div_32
 ( 
C
, 
N1E9
, 
I8253_FREQ
 ); } 0)

	)

24 
	#TIME_TO_COUNT
(
T
, 
C
) \

25 dÿ{ 
C
 = 
	`mul_div_32
 ( (
T
)->
tv_n£c
, 
I8253_FREQ
, 
N1E9
 ); } 0)

	)

31 
	#I8253_CH0
 0x40

	)

32 
	#I8253_CH1
 0x41

	)

33 
	#I8253_CH2
 0x42

	)

34 
	#I8253_CMD
 0x43

	)

35 
	#I8253_CMD_LOAD
 0x34

	)

36 
	#I8253_CMD_LATCH
 0x04

	)

38 
i8253_öô
 ();

39 
i8253_£t
 ( 
uöt
 
˙t
 );

40 
uöt
 
i8253_gë
 ();

41 
i8253_íabÀ_öãºu±
 ();

42 
i8253_dißbÀ_öãºu±
 ();

44 
i8253_ªgi°î_öãºu±
 ( *
h™dÀr
 );

46 
i8253_£t_time_to_cou¡î
 ( 
time•ec_t
 *
time
 );

47 
i8253_gë_time_‰om_cou¡î
 ( 
time•ec_t
 *
time
 );

	@arch/i386/drivers/i8259.c

2 #ifde‡
I8259


4 
	~"i8259.h
"

6 
	~"../io.h
"

7 
	~"../öãºu±.h
"

9 
i8259_öô
 ();

10 
i8259_úq_íabÀ
 ( 
úq
 );

11 
i8259_úq_dißbÀ
 ( 
úq
 );

12 
i8259_úq_dißbÀ
 ( 
úq
 );

13 
i8259_©_exô
 ( 
úq
 );

14 *
i8259_öãºu±_des¸ùti⁄
 ( 
n
 );

18 
¨ch_ic_t
 
	gi8259
 = (arch_ic_t)

20 .
öô
 = 
i8259_öô
,

21 .
	gdißbÀ_úq
 = 
i8259_úq_dißbÀ
,

22 .
	gíabÀ_úq
 = 
i8259_úq_íabÀ
,

23 .
	g©_exô
 = 
i8259_©_exô
,

24 .
	göt_des¸
 = 
i8259_öãºu±_des¸ùti⁄


27 
	#PIC1_CMD
 0x20

	)

28 
	#PIC2_CMD
 0xA0

	)

29 
	#PIC1_DATA
 0x21

	)

30 
	#PIC2_DATA
 0xA1

	)

31 
	#PIC_EOI
 0x20

	)

35 
	$i8259_öô
 ()

37 
	`outb
 ( 
PIC1_CMD
, 0x11 );

38 
	`outb
 ( 
PIC2_CMD
, 0x11 );

40 
	`outb
 ( 
PIC1_DATA
, 
IRQ_OFFSET
 & 0xf8 );

41 
	`outb
 ( 
PIC2_DATA
, (
IRQ_OFFSET
 + 8) & 0xf8 );

43 
	`outb
 ( 
PIC1_DATA
, 0x4 );

44 
	`outb
 ( 
PIC2_DATA
, 0x2 );

46 
	`outb
 ( 
PIC1_DATA
, 0x1 );

47 
	`outb
 ( 
PIC2_DATA
, 0x1 );

49 
	`outb
 ( 
PIC1_DATA
, 0xfb );

50 
	`outb
 ( 
PIC2_DATA
, 0xff );

53 
	}
}

59 
	$i8259_úq_íabÀ
 ( 
úq
 )

61 
úq
 -
IRQ_OFFSET
;

62 i‡–
úq
 < 8 )

63 
	`outb
 ( 
PIC1_DATA
, 
	`öb
 (PIC1_DATAË& ~(1 << 
úq
) );

65 
	`outb
 ( 
PIC2_DATA
, 
	`öb
 (PIC2_DATAË& ~(1 << (
úq
 - 8)) );

66 
	}
}

72 
	$i8259_úq_dißbÀ
 ( 
úq
 )

74 
úq
 -
IRQ_OFFSET
;

75 i‡–
úq
 < 8 )

76 
	`outb
 ( 
PIC1_DATA
, 
	`öb
 (PIC1_DATAË| (1 << 
úq
) );

78 
	`outb
 ( 
PIC2_DATA
, 
	`öb
 (PIC2_DATAË| (1 << (
úq
 - 8)) );

79 
	}
}

85 
	$i8259_©_exô
 ( 
úq
 )

87 i‡–
úq
 >
IRQ_OFFSET
 && irq < 
HW_INTERRUPTS
 )

89 
	`outb
 ( 
PIC1_CMD
, 
PIC_EOI
 );

90 i‡–
úq
 >
IRQ_OFFSET
 + 8 )

91 
	`outb
 ( 
PIC2_CMD
, 
PIC_EOI
 );

93 
	}
}

95 #ifde‡
DEBUG


97 *
	g¨ch_öt_desc
[] =

162 *
	$i8259_öãºu±_des¸ùti⁄
 ( 
n
 )

164 i‡–
n
 < 
INTERRUPTS
 )

165  
¨ch_öt_desc
[
n
];

168 
	}
}

170 *
	$i8259_öãºu±_des¸ùti⁄
 ( 
n
 )

173 
	}
}

	@arch/i386/drivers/i8259.h

2 #ifde‡
I8259


4 #¥agm®
⁄˚


6 
	#IRQ_OFFSET
 0x20

	)

8 #i‚de‡
ASM_FILE


12 
	mIRQ_TIMER
 = 
IRQ_OFFSET
,

13 
	mIRQ_KEYBOARD
,

14 
	mIRQ_SLAVE_PIC
,

15 
	mIRQ_COM2
,

16 
	mIRQ_COM1
,

17 
	mIRQ_LPT2
,

18 
	mIRQ_FLOPPY
,

19 
	mIRQ_LPT1
,

20 
	mIRQ_RT_CLOCK
,

21 
	mIRQ_MASTER_PIC
,

22 
	mIRQ_RESERVED1
,

23 
	mIRQ_RESERVED2
,

24 
	mIRQ_RESERVED3
,

25 
	mIRQ_COPROCESSOR
,

26 
	mIRQ_HARD_DISK
,

27 
	mIRQ_RESERVED4
,

29 
	mHW_INTERRUPTS


32 
	#SOFT_IRQ
 
HW_INTERRUPTS


	)

36 
	#SOFT_IRQ
 48

	)

40 
	#NUM_IRQS
 ( 
SOFT_IRQ
 + 1 )

	)

	@arch/i386/drivers/uart.c

2 #ifde‡
UART


4 
	~"u¨t.h
"

6 
	~"../io.h
"

7 
	~"../öãºu±.h
"

8 
	~<¨ch/devi˚.h
>

9 
	~<kî√l/î∫o.h
>

16 
	$idítify_UART
 ( 
¨ch_u¨t_t
 *
up
 )

18 
ã°
;

20 i‡–
up
->
u¨t_ty≥
 )

21  
up
->
u¨t_ty≥
;

23 
	`outb
 ( 
COM1_BASE
 + 
FCR
, 0xE7 );

24 
ã°
 = 
	`öb
 ( 
COM1_BASE
 + 
IIR
 );

25 i‡–
ã°
 & 0x40 )

27 i‡–
ã°
 & 0x80 )

29 i‡–
ã°
 & 0x20 )

30 
up
->
u¨t_ty≥
 = 
UT16750
;

32 
up
->
u¨t_ty≥
 = 
UT16550A
;

35 
up
->
u¨t_ty≥
 = 
UT16550
;

39 
	`outb
 ( 
COM1_BASE
 + 
SR
, 0x2A );

40 
ã°
 = 
	`öb
 ( 
COM1_BASE
 + 
SR
 );

41 i‡–
ã°
 == 0x2A )

42 
up
->
u¨t_ty≥
 = 
UT16450
;

44 
up
->
u¨t_ty≥
 = 
UT8250
;

47  
up
->
u¨t_ty≥
;

48 
	}
}

51 
	$u¨t_öô
 ( 
uöt
 
Êags
, *
∑øms
, 
devi˚_t
 *
dev
 )

53 
¨ch_u¨t_t
 *
up
;

56 
up
 = 
dev
->
∑øms
;

59 
	`idítify_UART
 ( 
up
 );

61 i‡–
up
->
u¨t_ty≥
 )

64  
	`u¨t_c⁄fig
 ( 
dev
, &
up
->
∑øms
 );

65 
	}
}

68 
	$u¨t_c⁄fig
 ( 
devi˚_t
 *
dev
, 
u¨t_t
 *
∑øms
 )

70 
¨ch_u¨t_t
 *
up
;

71 
uöt8
 
£âög
;

73 
	`ASSERT_AND_RETURN_ERRNO
 ( 
dev
 && 
∑øms
, -
EINVAL
 );

75 
	`ASSERT_AND_RETURN_ERRNO
 ( 
∑øms
->
d©a_bôs
 >= 5 ||Öarams->data_bits<=8,

76 -
EINVAL
 );

77 
	`ASSERT_AND_RETURN_ERRNO
 ( 
∑øms
->
∑rôy
 >= 0 ||Öarams->parity <= 7,

78 -
EINVAL
 );

79 
	`ASSERT_AND_RETURN_ERRNO
 ( 
∑øms
->
°›_bô
 >
STOPBIT_1
 ||

80 
∑øms
->
°›_bô
 <
STOPBIT_15
,

81 -
EINVAL
 );

82 
	`ASSERT_AND_RETURN_ERRNO
 ( 
∑øms
->
mode
 =
UART_BYTE
 ||

83 
∑øms
->
mode
 =
UART_STREAM
,

84 -
EINVAL
 );

86 
up
 = 
dev
->
∑øms
;

87 
up
->
∑øms
 = *params;

90 
	`outb
 ( 
up
->
p‹t
 + 
IER
, 0 );

93 i‡–
up
->
u¨t_ty≥
 > 
UT8250
 )

95 
£âög
 = 
FCR_ENABLE
 | 
FCR_CLEAR
;

97 i‡–
∑øms
->
mode
 =
UART_BYTE
 )

98 
£âög
 |
FCR_BYTE_MODE
;

100 
£âög
 |
FCR_STREAM_MODE
;

102 i‡–
up
->
u¨t_ty≥
 =
UT16750
 )

103 
£âög
 |
FCR_64BYTES
;

105 
	`outb
 ( 
up
->
p‹t
 + 
FCR
, 
£âög
 );

109 
	`outb
 ( 
up
->
p‹t
 + 
LCR
, 
LCR_DLAB_ON
 );

110 
	`outb
 ( 
up
->
p‹t
 + 
DLL
, up->
∑øms
.
•ìd
 & 0xff );

111 
	`outb
 ( 
up
->
p‹t
 + 
DLM
, up->
∑øms
.
•ìd
 >> 8 );

112 
	`outb
 ( 
up
->
p‹t
 + 
LCR
, 
LCR_DLAB_OFF
 );

115 
£âög
 = 
up
->
∑øms
.
d©a_bôs
 - 5;

116 
£âög
 |
up
->
∑øms
.
∑rôy
 | up->∑øms.
°›_bô
 | 
LCR_DLAB_OFF
;

117 i‡–
up
->
u¨t_ty≥
 >
UT16550
 )

118 
£âög
 |
LCR_BREAK
;

121 
	`outb
 ( 
up
->
p‹t
 + 
MCR
, 
MCR_DEFAULT
 );

124 
	`outb
 ( 
up
->
p‹t
 + 
IER
, 
IER_DEFAULT
 );

127 
up
->
öf
 = up->
öl
 = up->
ösz
 = 0;

128 
up
->
outf
 = up->
oué
 = up->
outsz
 = 0;

131 
	}
}

134 
	$u¨t_de°roy
 ( 
uöt
 
Êags
, *
∑øms
, 
devi˚_t
 *
dev
 )

136 
¨ch_u¨t_t
 *
up
;

138 
	`ASSERT
 ( 
dev
 );

140 
up
 = 
dev
->
∑øms
;

143 
	`outb
 ( 
up
->
p‹t
 + 
IER
, 
IER_DISABLE
 );

146 
	}
}

149 
	$u¨t_öãºu±_h™dÀr
 ( 
úq_num
, *
devi˚
 )

151 
devi˚_t
 *
dev
;

152 
¨ch_u¨t_t
 *
up
;

153 
uöt8
 
iú
;

154 
brk
, 
rcv
, 
¢d
;

156 
dev
 = 
devi˚
;

157 
up
 = 
dev
->
∑øms
;

158 
rcv
 = 
¢d
 = 
brk
 = 
FALSE
;

162 
iú
 = 
	`öb
 ( 
up
->
p‹t
 + 
IIR
 );

164 i‡–!–
iú
 & 
IIR_INT_PENDING
 ) )

167 i‡–
iú
 & 
IIR_TIMEOUT
 )

168 
brk
 = 
TRUE
;

170 i‡–
iú
 & 
IIR_LINE
 )

172 i‡–
	`öb
 ( 
up
->
p‹t
 + 
LSR
 ) & 
LSR_DATA_READY
 )

173 
rcv
 = 
TRUE
;

174 i‡–
	`öb
 ( 
up
->
p‹t
 + 
LSR
 ) & 
LSR_THR_EMPTY
 )

175 
¢d
 = 
TRUE
;

176 i‡–
	`öb
 ( 
up
->
p‹t
 + 
LSR
 ) & 
LSR_BREAK
 )

177 
¢d
 = 
TRUE
;

181 i‡–
rcv
 || 
brk
 || ( 
iú
 & 
IIR_RECV_DATA
 ) )

184 
	`u¨t_ªad
 ( 
up
 );

185 
rcv
 = 
TRUE
;

189 i‡–
¢d
 || 
iú
 & 
IIR_THR_EMPTY
 )

192 
	`u¨t_wrôe
 ( 
up
 );

193 
¢d
 = 
TRUE
;

197 i‡–
iú
 & 
IIR_MODEM
 )

205 
	}
}

208 
	$u¨t_wrôe
 ( 
¨ch_u¨t_t
 *
up
 )

210  
up
->
outsz
 > 0 && 
	`öb
 ( up->
p‹t
 + 
LSR
 ) & 
LSR_THR_EMPTY
 )

212 
	`outb
 ( 
up
->
p‹t
 + 
THR
, up->
outbuff
[up->
outf
] );

213 
	`INC_MOD
 ( 
up
->
outf
, up->
outbufsz
 );

214 
up
->
outsz
--;

216 
	}
}

219 
	$u¨t_£nd
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
dev
 )

221 
¨ch_u¨t_t
 *
up
;

222 
uöt8
 *
d
;

224 
	`ASSERT
 ( 
dev
 );

226 i‡–
Êags
 & 
UART_SETCONF
 )

227  
	`u¨t_c⁄fig
 ( 
dev
, (
u¨t_t
 *Ë
d©a
 );

230 
Êags
 &~
UART_SETCONF
;

232 
up
 = 
dev
->
∑øms
;

233 
d
 = 
d©a
;

237  
size
 > 0 && 
up
->
outsz
 < up->
outbufsz
 )

239 i‡–*
d
 =0 && 
Êags
 =
CONSOLE_PRINT
 )

241 
size
 = 0;

244 
up
->
outbuff
[up->
oué
] = *
d
++;

245 
	`INC_MOD
 ( 
up
->
oué
, up->
outbufsz
 );

246 
up
->
outsz
++;

247 
size
--;

251 
	`u¨t_wrôe
 ( 
up
 );

253  
size
 > 0 && 
up
->
outsz
 < up->
outbufsz
 );

255  
size
;

256 
	}
}

259 
	$u¨t_ªad
 ( 
¨ch_u¨t_t
 *
up
 )

262  ( 
	`öb
 ( 
up
->
p‹t
 + 
LSR
 ) & 
LSR_DATA_READY
 )

263 && 
up
->
ösz
 < up->
öbufsz
 )

265 
up
->
öbuff
[up->
öl
] = 
	`öb
 ( up->
p‹t
 + 
RBR
 );

266 
	`INC_MOD
 ( 
up
->
öl
, up->
öbufsz
 );

267 
up
->
ösz
++;

269 
	}
}

272 
	$u¨t_ªcv
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
dev
 )

274 
¨ch_u¨t_t
 *
up
;

275 
uöt8
 *
d
;

276 
i
;

278 
	`ASSERT
 ( 
dev
 );

280 
up
 = 
dev
->
∑øms
;

282 i‡–
Êags
 & 
UART_GETCONF
 )

284 i‡–
size
 <  (
u¨t_t
) )

285  
EXIT_FAILURE
;

287 *–(
u¨t_t
 *Ë
d©a
 ) = 
up
->
∑øms
;

289   (
u¨t_t
);

295 
	`u¨t_ªad
 ( 
up
 );

298 
d
 = 
d©a
;

299 
i
 = 0;

300  
i
 < 
size
 && 
up
->
ösz
 > 0 )

302 
d
[
i
] = 
up
->
öbuff
[up->
öf
];

303 
	`INC_MOD
 ( 
up
->
öf
, up->
öbufsz
 );

304 
up
->
ösz
--;

305 
i
++;

308  
i
;

309 
	}
}

312 
	$u¨t_°©us
 ( 
uöt
 
Êags
, 
devi˚_t
 *
dev
 )

314 
¨ch_u¨t_t
 *
up
;

315 
rÊags
 = 0;

317 
	`ASSERT
 ( 
dev
 );

319 
up
 = 
dev
->
∑øms
;

322 
	`u¨t_ªad
 ( 
up
 );

325 i‡–
up
->
ösz
 > 0 )

326 
rÊags
 |
DEV_IN_READY
;

328 i‡–
up
->
outsz
 < up->
outbufsz
 )

329 
rÊags
 |
DEV_OUT_READY
;

332  
rÊags
;

333 
	}
}

336 
uöt8
 
	gcom1_öbuf
[
BUFFER_SIZE
];

337 
uöt8
 
	gcom1_outbuf
[
BUFFER_SIZE
];

340 
¨ch_u¨t_t
 
	gcom1_∑øms
 = (arch_uart_t)

342 .
u¨t_ty≥
 = 
UNDEFINED
,

343 .
	g∑øms
 = 
UART_DEFAULT_SETTING
,

344 .
	gp‹t
 = 
COM1_BASE
,

345 .
	göbuff
 = 
com1_öbuf
,

346 .
	göbufsz
=
BUFFER_SIZE
, .
	göf
 = 0, .
	göl
 = 0, .
	gösz
 = 0,

347 .
	goutbuff
 = 
com1_outbuf
,

348 .
	goutbufsz
=
BUFFER_SIZE
, .
	goutf
 = 0, .
	goué
 = 0, .
	goutsz
 = 0

352 
devi˚_t
 
	gu¨t_com1
 = (device_t)

354 .
dev_«me
 = "COM1",

356 .
	gúq_num
 = 
IRQ_COM1
,

357 .
	gúq_h™dÀr
 = 
u¨t_öãºu±_h™dÀr
,

359 .
	göô
 = 
u¨t_öô
,

360 .
	gde°roy
 = 
u¨t_de°roy
,

361 .
	g£nd
 = 
u¨t_£nd
,

362 .
	gªcv
 = 
u¨t_ªcv
,

363 .
	g°©us
 = 
u¨t_°©us
,

365 .
	gÊags
 = 
DEV_TYPE_SHARED
 | 
DEV_TYPE_CONSOLE
,

366 .
	g∑øms
 = &
com1_∑øms


	@arch/i386/drivers/uart.h

2 #ifde‡
UART


4 #¥agm®
⁄˚


6 
	~<¨ch/devi˚.h
>

7 
	~<ty≥s/io.h
>

11 
	#UART_SETCONF
 ( 1 << 30 )

	)

12 
	#UART_GETCONF
 ( 1 << 31 )

	)

15 
	s_u¨t_t_


17 
	m•ìd
;

18 
öt8
 
	md©a_bôs
;

19 
öt8
 
	m∑rôy
;

20 
öt8
 
	m°›_bô
;

21 
öt8
 
	mmode
;

23 
	tu¨t_t
;

25 
	#PARITY_NONE
 ( 0 << 3 )

	)

26 
	#PARITY_ODD
 ( 1 << 3 )

	)

27 
	#PARITY_EVEN
 ( 3 << 3 )

	)

28 
	#PARITY_MARK
 ( 5 << 3 )

	)

29 
	#PARITY_SPACE
 ( 7 << 3 )

	)

31 
	#STOPBIT_1
 ( 0 << 2 )

	)

32 
	#STOPBIT_15
 ( 1 << 2 )

	)

35 
	#UART_BYTE
 1

	)

36 
	#UART_STREAM
 2

	)

39 
	#COM1_BASE
 0x3f8

	)

40 
	#COM2_BASE
 0x2f8

	)

41 
	#COM3_BASE
 0x3e8

	)

42 
	#COM4_BASE
 0x2e8

	)

44 
	#THR
 0

	)

45 
	#RBR
 0

	)

46 
	#DLL
 0

	)

47 
	#IER
 1

	)

48 
	#DLM
 1

	)

49 
	#IIR
 2

	)

50 
	#FCR
 2

	)

51 
	#LCR
 3

	)

52 
	#MCR
 4

	)

53 
	#LSR
 5

	)

54 
	#MSR
 6

	)

55 
	#SR
 7

	)

57 
	#IER_DEFAULT
 7

	)

58 
	#IER_DISABLE
 0

	)

60 
	#FCR_ENABLE
 0x01

	)

61 
	#FCR_CLEAR
 0x06

	)

62 
	#FCR_BYTE_MODE
 0x00

	)

63 
	#FCR_STREAM_MODE
 0xC0

	)

64 
	#FCR_64BYTES
 0x20

	)

66 
	#LCR_DLAB_ON
 0x80

	)

67 
	#LCR_DLAB_OFF
 0x00

	)

68 
	#LCR_BREAK
 0x40

	)

70 
	#MCR_DEFAULT
 0x08

	)

72 
	#IIR_INT_PENDING
 ( 1 << 0 )

	)

73 
	#IIR_MODEM
 ( 0 << 1 )

	)

74 
	#IIR_THR_EMPTY
 ( 1 << 1 )

	)

75 
	#IIR_RECV_DATA
 ( 2 << 1 )

	)

76 
	#IIR_LINE
 ( 3 << 1 )

	)

77 
	#IIR_TIMEOUT
 ( 6 << 1 )

	)

79 
	#LSR_DATA_READY
 ( 1 << 0 )

	)

80 
	#LSR_BREAK
 ( 1 << 4 )

	)

81 
	#LSR_THR_EMPTY
 ( 1 << 5 )

	)

82 
	#LSR_DHR_EMPTY
 ( 1 << 6 )

	)

85 
	#BUFFER_SIZE
 256

	)

87 
	s_¨ch_u¨t_t_


89 
	mu¨t_ty≥
;

91 
u¨t_t
 
	m∑øms
;

93 
	mp‹t
;

95 
uöt8
 *
	möbuff
;

96 
	möbufsz
, 
	möf
, 
	möl
, 
	mösz
;

97 
uöt8
 *
	moutbuff
;

98 
	moutbufsz
, 
	moutf
, 
	moué
, 
	moutsz
;

100 
	t¨ch_u¨t_t
;

102 
	#INC_MOD
(
X
,
MOD
Ëdÿ{ X = ( X+1 < MOD ? X+1 : 0 ); } 0)

	)

104 
	#UART_DEFAULT_SETTING
 \

105 { 115200, 8, 
PARITY_NONE
, 
STOPBIT_1
, 
UART_BYTE
 }

	)

109 
	mUNDEFINED
 = 0,

110 
	mUT8250
,

111 
	mUT16450
,

112 
	mUT16550
,

113 
	mUT16550A
,

114 
	mUT16750


118 
u¨t_ªad
 ( 
¨ch_u¨t_t
 *
up
 );

119 
u¨t_wrôe
 ( 
¨ch_u¨t_t
 *
up
 );

120 
u¨t_c⁄fig
 ( 
devi˚_t
 *
dev
, 
u¨t_t
 *
∑øms
 );

	@arch/i386/drivers/vga_text.c

3 #ifde‡
VGA_TEXT


5 
	~"../io.h
"

6 
	~<¨ch/devi˚.h
>

7 
	~<ty≥s/io.h
>

8 
	~<lib/°rög.h
>

9 
	~<kî√l/î∫o.h
>

11 
	#VIDEO
 0x000B8000

	)

12 
	#COLS
 80

	)

13 
	#ROWS
 25

	)

16 
	gxpos
 = 0;

17 
	gypos
 = 0;

20 vﬁ©ûê*
	gvideo
 = (*Ë
VIDEO
;

23 
	#COLOR_WHITE
 7

	)

24 
	#COLOR_RED
 4

	)

25 
	#COLOR_GREEN
 2

	)

26 
	#COLOR_DEFAULT
 
COLOR_WHITE


	)

39 
	gf⁄t_cﬁ‹
 = 
COLOR_DEFAULT
;

41 
	gcﬁ‹
[3] = {

47 
	#PUT_CHAR
(
X
,
Y
,
CHAR
) \

49 
video
 [ (
X
 + (
Y
Ë* 
COLS
Ë* 2 ] = (
CHAR
) & 0x00FF; \

50 
video
 [ (
X
 + (
Y
Ë* 
COLS
Ë* 2 + 1 ] = 
f⁄t_cﬁ‹
; \

51 } 0)

	)

54 
vga_ãxt_˛ór
 ();

55 
vga_ãxt_gŸoxy
 ( 
x
, 
y
 );

58 
	$vga_ãxt_öô
 ( 
uöt
 
Êags
, *
∑øms
, 
devi˚_t
 *
dev
 )

60 
video
 = (*Ë
VIDEO
;

61 
xpos
 = 
ypos
 = 0;

63  
	`vga_ãxt_˛ór
 ();

64 
	}
}

67 
	$vga_ãxt_˛ór
 ()

69 
i
;

71  
i
 = 0; i < 
COLS
 * 
ROWS
; i++ )

73 
video
 [2*
i
] = 0;

74 
video
 [2*
i
+1] = 
cﬁ‹
[2];

77  
	`vga_ãxt_gŸoxy
 ( 0, 0 );

78 
	}
}

85 
	$vga_ãxt_gŸoxy
 ( 
x
, 
y
 )

87 
t
;

89 
xpos
 = 
x
;

90 
ypos
 = 
y
;

91 
t
 = 
ypos
 * 80 + 
xpos
;

93 
	`outb
 ( 0x3D4, 14 );

94 
	`outb
 ( 0x3D5, 
t
 >> 8 );

95 
	`outb
 ( 0x3D4, 15 );

96 
	`outb
 ( 0x3D5, 
t
 & 0xFF );

99 
	}
}

102 
	$vga_¥o˚ss_esˇ≥_£quí˚
 ( *
ãxt
 )

104 
i
 = 0, 
n
, 
m
;

106 i‡–
ãxt
[
i
] != '[' )

107  
i
;

109 
i
++;

110 i‡–
ãxt
[
i
] >= '0' &&Åext[i] <= '9' ) {

111 
n
 = 
ãxt
[
i
++] - '0';

112 i‡–
ãxt
[
i
] >= '0' &&Åext[i] <= '9' )

113 
n
 =Ç * 10 + 
ãxt
[
i
++] - '0';

115 i‡–
ãxt
[
i
] == 'J' ) {

116 i‡–
n
 == 2 )

117 
	`vga_ãxt_˛ór
 ();

120 
i
++;

123 i‡–
ãxt
[
i
] == 'm' ) {

124  
n
 ) {

125 
ESC_COLOR_RED
:

126 
f⁄t_cﬁ‹
 = 
COLOR_RED
;

128 
ESC_COLOR_GREEN
:

129 
f⁄t_cﬁ‹
 = 
COLOR_GREEN
;

131 
ESC_COLOR_WHITE
:

132 
f⁄t_cﬁ‹
 = 
COLOR_WHITE
;

134 
ESC_COLOR_DEFAULT
:

135 
f⁄t_cﬁ‹
 = 
COLOR_DEFAULT
;

140 
i
++;

143 i‡–
ãxt
[
i
] == ';' ) {

144 
i
++;

145 i‡–
ãxt
[
i
] >= '0' &&Åext[i] <= '9' ) {

146 
m
 = 
ãxt
[
i
++] - '0';

147 i‡–
ãxt
[
i
] >= '0' &&Åext[i] <= '9' )

148 
m
 = m * 10 + 
ãxt
[
i
++] - '0';

150 i‡–
ãxt
[
i
] == 'H' ||Åext[i] == 'f' ) {

151 i‡–
m
 <
COLS
 && 
n
 <
ROWS
 )

152 
	`vga_ãxt_gŸoxy
 ( 
m
-1, 
n
-1 );

154 
i
++;

164  
i
;

165 
	}
}

175 
	$vga_ãxt_£nd
 ( *
d©a
, 
size_t
 
size
, 
uöt
 
Êags
, 
devi˚_t
 *
dev
 )

177 *
ãxt
 = 
d©a
;

178 
i
, 
c
, 
j
=0;

180 i‡–! ( 
dev
->
Êags
 & 
DEV_TYPE_CONSOLE
 ) )

181  
EXIT_FAILURE
;

183  
ãxt
[
j
] )

185 i‡–
ãxt
[
j
] =
ESCAPE
 ) {

186 
j
++;

187 
j
 +
	`vga_¥o˚ss_esˇ≥_£quí˚
 ( &
ãxt
[j] );

191  
c
 = 
ãxt
[
j
++] )

194 
xpos
 = ( xpos / 8 + 1 ) * 8;

198 
xpos
 = 0;

204 i‡–
xpos
 > 0 )

206 
xpos
--;

207 
	`PUT_CHAR
 ( 
xpos
, 
ypos
, ' ' );

212 
	`PUT_CHAR
 ( 
xpos
, 
ypos
, 
c
 );

213 
xpos
++;

216 i‡–
xpos
 >
COLS
 || 
c
 == '\n' )

218 
xpos
 = 0;

219 i‡–
ypos
 < 
ROWS
 - 1 )

221 
ypos
++;

225  
i
 = 0; i < 
COLS
 * 2 * (
ROWS
-1); i++ )

226 
video
 [
i
] = videÿ[ i + 
COLS
 * 2 ];

228  
i
 = 0; i < 
COLS
; i++ )

229 
	`PUT_CHAR
 ( 
i
, 
ROWS
-1, ' ' );

234 
	`vga_ãxt_gŸoxy
 ( 
xpos
, 
ypos
 );

236  
j
;

237 
	}
}

240 
	$vga_ãxt_°©us
 ( 
uöt
 
Êags
, 
devi˚_t
 *
dev
 )

245  
DEV_OUT_READY
;

246 
	}
}

249 
devi˚_t
 
	gvga_ãxt_dev
 = (device_t)

251 .
dev_«me
 = "VGA_TXT",

252 .
	gúq_num
 = -1,

253 .
	gúq_h™dÀr
 = 
NULL
,

255 .
	göô
 = 
vga_ãxt_öô
,

256 .
	gde°roy
 = 
NULL
,

257 .
	g£nd
 = 
vga_ãxt_£nd
,

258 .
	gªcv
 = 
NULL
,

259 .
	g°©us
 = 
vga_ãxt_°©us
,

261 .
	gÊags
 = 
DEV_TYPE_SHARED
 | 
DEV_TYPE_CONSOLE
,

262 .
	g∑øms
 = (*Ë&
vga_ãxt_dev


	@arch/i386/interrupt.c

3 
	#_ARCH_INTERRUPTS_C_


	)

4 
	~"öãºu±.h
"

6 
	~<¨ch/¥o˚ss‹.h
>

7 
	~<kî√l/î∫o.h
>

8 
	~<lib/li°.h
>

9 
	~<kî√l/mem‹y.h
>

12 
¨ch_ic_t
 
IC_DEV
;

13 
¨ch_ic_t
 *
	gicdev
 = &
IC_DEV
;

16 
li°_t
 
	gih™dÀrs
[
INTERRUPTS
];

22 
	g√w_mode
 = 
KERNEL_MODE
;

23 
	g¥ev_mode
 = 
KERNEL_MODE
;

25 
	sihndÃ


27 *
	mdevi˚
;

28 (*
	mih™dÀr
Ë–, *
	mdevi˚
 );

30 
li°_h
 
	mli°
;

34 
	$¨ch_öô_öãºu±s
 ()

36 
i
;

38 
icdev
->
	`öô
 ();

40  
i
 = 0; i < 
INTERRUPTS
; i++ )

41 
	`li°_öô
 ( &
ih™dÀrs
[
i
] );

42 
	}
}

48 
	$¨ch_úq_íabÀ
 ( 
úq
 )

50 
icdev
->
	`íabÀ_úq
 ( 
úq
 );

51 
	}
}

52 
	$¨ch_úq_dißbÀ
 ( 
úq
 )

54 
icdev
->
	`dißbÀ_úq
 ( 
úq
 );

55 
	}
}

58 
	$¨ch_ªgi°î_öãºu±_h™dÀr
 ( 
öum
, *
h™dÀr
,

59 *
devi˚
 )

61 
ihndÃ
 *
ih
;

63 i‡–
öum
 < 
INTERRUPTS
 )

65 
ih
 = 
	`kmÆloc
 (  (
ihndÃ
) );

66 
	`ASSERT
 ( 
ih
 );

68 
ih
->
devi˚
 = device;

69 
ih
->
ih™dÀr
 = 
h™dÀr
;

71 
	`li°_≠≥nd
 ( &
ih™dÀrs
[
öum
], 
ih
, &ih->
li°
 );

74 
	`LOG
 ( 
ERROR
, "I¡îru± %d c™'àbêu£d!\n", 
öum
 );

75 
	`hÆt
 ();

77 
	}
}

80 
	$¨ch_uƒegi°î_öãºu±_h™dÀr
 ( 
úq_num
, *
h™dÀr
,

81 *
devi˚
 )

83 
ihndÃ
 *
ih
, *
√xt
;

85 
	`ASSERT
 ( 
úq_num
 >0 && irq_num < 
INTERRUPTS
 );

87 
ih
 = 
	`li°_gë
 ( &
ih™dÀrs
[
úq_num
], 
FIRST
 );

89  
ih
 )

91 
√xt
 = 
	`li°_gë_√xt
 ( &
ih
->
li°
 );

93 i‡–
ih
->
ih™dÀr
 =
h™dÀr
 && ih->
devi˚
 == device )

94 
	`li°_ªmove
 ( &
ih™dÀrs
[
úq_num
], 
FIRST
, &
ih
->
li°
 );

96 
ih
 = 
√xt
;

98 
	}
}

104 
	$¨ch_öãºu±_h™dÀr
 ( 
úq_num
 )

106 
ihndÃ
 *
ih
;

108 i‡–
úq_num
 < 
INTERRUPTS
 && (
ih
 = 
	`li°_gë
 (&
ih™dÀrs
[úq_num], 
FIRST
)) )

113 i‡–
icdev
->
©_exô
 )

114 
icdev
->
	`©_exô
 ( 
úq_num
 );

117  
ih
 )

119 
ih
->
	`ih™dÀr
 ( 
úq_num
, ih->
devi˚
 );

121 
ih
 = 
	`li°_gë_√xt
 ( &ih->
li°
 );

125 i‡–
úq_num
 < 
INTERRUPTS
 )

127 
	`LOG
 ( 
ERROR
, "Unregistered interrupt: %d - %s!\n",

128 
úq_num
, 
icdev
->
	`öt_des¸
 ( irq_num ) );

129 
	`hÆt
 ();

132 
	`LOG
 ( 
ERROR
, "Uƒegi°îed i¡îru±: %d !\n", 
úq_num
 );

133 
	`hÆt
 ();

136 
¥ev_mode
 = 
√w_mode
;

137 
√w_mode
 = 
USER_MODE
;

138 
	}
}

141 
	$¨ch_√w_mode
 ()

143  
√w_mode
;

144 
	}
}

147 
	$¨ch_¥ev_mode
 ()

149  
¥ev_mode
;

150 
	}
}

	@arch/i386/interrupt.h

3 #¥agm®
⁄˚


6 
	#INT_STF
 12

	)

7 
	#INT_GPF
 13

	)

9 
	#INT_MEM_FAULT
 
INT_STF


	)

10 
	#INT_UNDEF_FAULT
 
INT_GPF


	)

12 #i‚de‡
ASM_FILE


14 
	~<¨ch/öãºu±.h
>

17 
	s_öãºu±_c⁄åﬁÀr_


19 (*
	möô
) ();

20 (*
	mdißbÀ_úq
Ë–
	múq
 );

21 (*
	míabÀ_úq
Ë–
	múq
 );

22 (*
	m©_exô
Ë–
	múq
 );

24 *(*
	möt_des¸
Ë–
	múq
 );

26 
	t¨ch_ic_t
;

31 
	~<ARCH/drivîs/i8259.h
>

33 
	#INTERRUPTS
 (
SOFT_IRQ
 + 1)

	)

	@arch/i386/io.h

5 #¥agm®
⁄˚


7 
	~<ty≥s/basic.h
>

14 
ölöe
 
	$outb
 ( 
uöt16
 
p‹t
, 
uöt8
 
d©a
 )

16 
	`asm
 ( "outb %b0, %w1" : : "a" (
d©a
), "d" (
p‹t
) );

17 
	}
}

24 
ölöe
 
uöt8
 
	$öb
 ( 
uöt16
 
p‹t
 )

26 
uöt8
 
r
;

28 
asm
 vﬁ©ûê–"öb %w1, %b0" : "˜" (
r
Ë: "d" (
p‹t
) );

30  
r
;

31 
	}
}

38 
ölöe
 
	$outw
 ( 
uöt16
 
p‹t
, uöt16 
d©a
 )

40 
	`asm
 ( "outw %w0, %w1" : : "a" (
d©a
), "d" (
p‹t
) );

41 
	}
}

48 
ölöe
 
uöt16
 
	$öw
 ( 
uöt16
 
p‹t
 )

50 
uöt16
 
r
;

52 
asm
 vﬁ©ûê–"öw %w1, %w0" : "˜" (
r
Ë: "d" (
p‹t
) );

54  
r
;

55 
	}
}

63 
ölöe
 
	$outsw
 ( 
uöt16
 
p‹t
, *
d©a
, uöt16 
size
 )

65 
asm
 volatile ( "cld\n\t"

67 : "+S" (
d©a
), "+c" (
size
Ë: "d" (
p‹t
) );

68 
	}
}

76 
ölöe
 
	$ösw
 ( 
uöt16
 
p‹t
, *
d©a
, uöt16 
size
 )

78 
asm
 volatile ( "cld\n\t"

80 : "+D" (
d©a
), "+c" (
size
Ë: "d" (
p‹t
) );

81 
	}
}

	@arch/i386/memory.c

3 
	#_ARCH_


	)

4 
	~<¨ch/mem‹y.h
>

7 
uöt8
 
	gsy°em_°ack
 [ 
KERNEL_STACK_SIZE
 ];

10 
m£g_t
 
	gm£g
[3];

16 
m£g_t
 *
	$¨ch_mem‹y_öô
 ()

18 
kî√l_code_addr
, 
kî√l_íd_addr
;

21 
m£g
[0].
ty≥
 = 
MS_KERNEL
;

22 
m£g
[0].
°¨t
 = &
kî√l_code_addr
;

23 
m£g
[0].
size
 = (
uöt
Ë&
kî√l_íd_addr
 - (uötË&
kî√l_code_addr
;

26 
m£g
[1].
ty≥
 = 
MS_KHEAP
;

27 
m£g
[1].
°¨t
 = &
kî√l_íd_addr
;

28 
m£g
[1].
size
 = 
SYSTEM_MEMORY
 - (
uöt
Ëm£g[1].
°¨t
;

30 
m£g
[2].
ty≥
 = 
MS_END
;

32  
m£g
;

33 
	}
}

	@arch/i386/processor.h

3 #¥agm®
⁄˚


5 
	#¨ch_dißbÀ_öãºu±s
(Ë
asm
 vﬁ©ûê–"˛i\n\t" )

	)

6 
	#¨ch_íabÀ_öãºu±s
(Ë
asm
 vﬁ©ûê–"°i\n\t" )

	)

8 
	#¨ch_hÆt
(Ë
asm
 vﬁ©ûê–"˛ò\n\t" "h… \n\t" )

	)

10 
	#¨ch_su•íd
(Ë
asm
 vﬁ©ûê–"h… \n\t" )

	)

12 
	#¨ch_øi£_öãºu±
(
p
Ë
asm
 volatile ( "int %0\n\t" :: \

13 "i" (
p
):"mem‹y")

	)

15 
	#¨ch_mem‹y_b¨rõr
(Ë
	`asm
 ("" : : : "mem‹y")

	)

17 
	~<¨ch/¥o˚ss‹.h
>

19 
	#EFLAGS_IF
 0x00000200

	)

22 
ölöe
 
	$£t_öãºu±s
 ( 
íabÀ
 )

24 
ﬁd_Êags
;

26 
asm
 volatile ( "pushf\n\t"

28 : "Ù" (
ﬁd_Êags
) );

29 i‡(
íabÀ
)

30 
	`¨ch_íabÀ_öãºu±s
 ();

32 
	`¨ch_dißbÀ_öãºu±s
 ();

34  
ﬁd_Êags
 & 
EFLAGS_IF
;

35 
	}
}

	@arch/i386/time.c

3 
	~"time.h
"

5 
	~<ty≥s/time.h
>

7 
¨ch_timî_t
 
TIMER
;

8 
¨ch_timî_t
 *
	gtimî
 = &
TIMER
;

10 
time•ec_t
 
	g˛ock
;

11 
time•ec_t
 
	gdñay
;

12 
time•ec_t
 
	gœ°_lﬂd
;

14 
time•ec_t
 
	gthªshﬁd
;

16 (*
	gÆ¨m_h™dÀr
) ();

19 
¨ch_timî_h™dÀr
 ();

21 
	$¨ch_íabÀ_timî_öãºu±
 (Ë{ 
timî
->
	`íabÀ_öãºu±
 (); 
	}
}

22 
	$¨ch_dißbÀ_timî_öãºu±
 (Ë{ 
timî
->
	`dißbÀ_öãºu±
 (); 
	}
}

24 
	$¨ch_gë_mö_öãrvÆ
 ( 
time•ec_t
 *
time
 )

26 *
time
 = 
timî
->
mö_öãrvÆ
;

27 
	}
}

30 
	$¨ch_timî_öô
 ()

32 
˛ock
.
tv_£c
 = clock.
tv_n£c
 = 0;

33 
Æ¨m_h™dÀr
 = 
NULL
;

35 
timî
->
	`öô
 ();

37 
œ°_lﬂd
 = 
dñay
 = 
timî
->
max_öãrvÆ
;

39 
timî
->
	`£t_öãrvÆ
 ( &
œ°_lﬂd
 );

40 
timî
->
	`ªgi°î_öãºu±
 ( 
¨ch_timî_h™dÀr
 );

41 
timî
->
	`íabÀ_öãºu±
 ();

43 
thªshﬁd
.
tv_£c
 = 
timî
->
mö_öãrvÆ
.tv_sec / 2;

44 
thªshﬁd
.
tv_n£c
 = 
timî
->
mö_öãrvÆ
.tv_nsec / 2;

45 i‡–
timî
->
mö_öãrvÆ
.
tv_£c
 % 2 )

46 
thªshﬁd
.
tv_n£c
 += 1000000000L / 2;

49 
	}
}

56 
	$¨ch_timî_£t
 ( 
time•ec_t
 *
time
, *
Æ¨m_func
 )

58 
time•ec_t
 
ªmaödî
;

60 
timî
->
	`gë_öãrvÆ_ªmaödî
 ( &
ªmaödî
 );

61 
	`time_sub
 ( &
œ°_lﬂd
, &
ªmaödî
 );

62 
	`time_add
 ( &
˛ock
, &
œ°_lﬂd
 );

64 
dñay
 = *
time
;

65 i‡–
	`time_cmp
 ( &
dñay
, &
timî
->
mö_öãrvÆ
 ) < 0 )

66 
dñay
 = 
timî
->
mö_öãrvÆ
;

68 
Æ¨m_h™dÀr
 = 
Æ¨m_func
;

70 i‡–
	`time_cmp
 ( &
dñay
, &
timî
->
max_öãrvÆ
 ) > 0 )

71 
œ°_lﬂd
 = 
timî
->
max_öãrvÆ
;

73 
œ°_lﬂd
 = 
dñay
;

75 
timî
->
	`£t_öãrvÆ
 ( &
œ°_lﬂd
 );

76 
	}
}

82 
	$¨ch_gë_time
 ( 
time•ec_t
 *
time
 )

84 
time•ec_t
 
ªmaödî
;

86 
timî
->
	`gë_öãrvÆ_ªmaödî
 ( &
ªmaödî
 );

88 *
time
 = 
œ°_lﬂd
;

89 
	`time_sub
 ( 
time
, &
ªmaödî
 );

90 
	`time_add
 ( 
time
, &
˛ock
 );

91 
	}
}

98 
	$¨ch_£t_time
 ( 
time•ec_t
 *
time
 )

100 (*
k_h™dÀr
) ();

102 
˛ock
 = *
time
;

105 i‡–
Æ¨m_h™dÀr
 )

107 
k_h™dÀr
 = 
Æ¨m_h™dÀr
;

108 
Æ¨m_h™dÀr
 = 
NULL
;

109 
	`k_h™dÀr
 ();

111 
	}
}

117 
	$¨ch_timî_h™dÀr
 ()

119 (*
k_h™dÀr
) ();

121 
	`time_add
 ( &
˛ock
, &
œ°_lﬂd
 );

123 
	`time_sub
 ( &
dñay
, &
œ°_lﬂd
 );

124 
œ°_lﬂd
 = 
timî
->
max_öãrvÆ
;

126 i‡–
	`time_cmp
 ( &
dñay
, &
thªshﬁd
 ) <= 0 )

129 
dñay
 = 
timî
->
max_öãrvÆ
;

130 
timî
->
	`£t_öãrvÆ
 ( &
œ°_lﬂd
 );

132 i‡–
Æ¨m_h™dÀr
 )

134 
k_h™dÀr
 = 
Æ¨m_h™dÀr
;

135 
Æ¨m_h™dÀr
 = 
NULL
;

136 
	`k_h™dÀr
 ();

140 i‡–
	`time_cmp
 ( &
dñay
, &
timî
->
mö_öãrvÆ
 ) < 0 )

141 
œ°_lﬂd
 = 
timî
->
mö_öãrvÆ
;

142 i‡–
	`time_cmp
 ( &
dñay
, &
œ°_lﬂd
 ) < 0 )

143 
œ°_lﬂd
 = 
dñay
;

145 
timî
->
	`£t_öãrvÆ
 ( &
œ°_lﬂd
 );

147 
	}
}

	@arch/i386/time.h

3 #¥agm®
⁄˚


5 
	~<ty≥s/time.h
>

8 
	s_¨ch_timî_t_


10 
time•ec_t
 
	mmö_öãrvÆ
;

11 
time•ec_t
 
	mmax_öãrvÆ
;

13 (*
	möô
) ();

14 (*
	m£t_öãrvÆ
Ë–
	mtime•ec_t
 * );

15 (*
	mgë_öãrvÆ_ªmaödî
Ë–
	mtime•ec_t
 * );

16 (*
	míabÀ_öãºu±
) ();

17 (*
	mdißbÀ_öãºu±
) ();

18 (*
	mªgi°î_öãºu±
Ë–*
	mh™dÀr
 );

20 
	t¨ch_timî_t
;

22 
	~<¨ch/time.h
>

	@arch/i386/types.h

3 #¥agm®
⁄˚


5 
	t¨ch_öt8
;

6 
	t¨ch_uöt8
;

7 
	t¨ch_öt16
;

8 
	t¨ch_uöt16
;

9 
	t¨ch_öt32
;

10 
	t¨ch_uöt32
;

11 
	t¨ch_uöt
;

13 
	t¨ch_öt64
;

14 
	t¨ch_uöt64
;

17 
	t¨ch_aöt
;

20 
	#__ARCH_WORD_SIZE
 32

	)

21 
	t¨ch_w‹d_t
;

22 
	t¨ch_sw‹d_t
;

24 
	~<¨ch/ty≥s.h
>

	@include/api/errno.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/î∫o.h
>

5 
	~<kî√l/î∫o.h
>

7 
ölöe
 
	$£t_î∫o
 ( 
îr‹_numbî
 )

9  
	`sys__£t_î∫o
 ( 
îr‹_numbî
 );

10 
	}
}

11 
ölöe
 
	$gë_î∫o
 ()

13  
	`sys__gë_î∫o
 ();

14 
	}
}

16 
ölöe
 *
	$gë_î∫o_±r
 ()

18 *
îr‹_numbî_±r
;

19 
	`sys__gë_î∫o_±r
 ( &
îr‹_numbî_±r
 );

21  
îr‹_numbî_±r
;

22 
	}
}

25 
	#_î∫o
 (*
	`gë_î∫o_±r
 ())

	)

28 #ifde‡
DEBUG


30 
	~<≠i/°dio.h
>

33 
	#ASSERT_ERRNO_AND_RETURN
(
ex¥
, 
î∫um
) \

35 i‡–!–
ex¥
 ) ) \

37 
	`w¨n
 ("%s:%d::ASSERT\n", 
__FILE__
, 
__LINE__
); \

38 
	`£t_î∫o
 (
î∫um
); \

39  
EXIT_FAILURE
; \

41 } 0)

	)

43 #i‚de‡
ASSERT


45 
	~<≠i/±hªad.h
>

47 
	#ASSERT
(
ex¥
) \

48 dÿi‡–!–
ex¥
 ) ) \

50 
	`¥ötf
 ( "[BUG:%s:%d]\n", 
__FILE__
, 
__LINE__
); \

51 
	`±hªad_exô
 ( (*Ë
EXIT_FAILURE
 ); \

52 } 0)

	)

55 #i‚de‡
LOG


56 
	#LOG
(
LEVEL
, 
f‹m©
, ...) \

57 
	`¥ötf
 ( "[" #LEVEL ":%s:%d]" 
f‹m©
 "\n", 
__FILE__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

62 
	#ASSERT_ERRNO_AND_RETURN
(
ex¥
, 
î∫um
)

	)

63 
	#ASSERT
(
ex¥
)

	)

64 
	#LOG
(
LEVEL
, 
f‹m©
, ...)

	)

	@include/api/malloc.h

2 #¥agm®
⁄˚


4 
	~<lib/ff_sim∂e.h
>

5 
	~<lib/gma.h
>

6 
	~<≠i/¥og_öfo.h
>

8 
¥og_öfo_t
 
pi
;

10 #i‡
MEM_ALLOCATOR_FOR_USER
 =
FIRST_FIT


12 
	#MEM_ALLOC_T
 
ffs_mpoﬁ_t


	)

14 
	#mem_öô
(
£gmít
, 
size
Ë
	`ffs_öô
 ( segmít, sizê)

	)

15 
	#mÆloc
(
size
Ë
	`ffs_Æloc
 ( 
pi
.
mpoﬁ
, sizê)

	)

16 
	#‰ì
(
addr
Ë
	`ffs_‰ì
 ( 
pi
.
mpoﬁ
,ádd∏)

	)

18 #ñi‡
MEM_ALLOCATOR_FOR_USER
 =
GMA


20 
	#MEM_ALLOC_T
 
gma_t


	)

22 
	#mem_öô
(
£gmít
, 
size
Ë
	`gma_öô
 ( segmít, size, 32, 0 )

	)

23 
	#mÆloc
(
size
Ë
	`gma_Æloc
 ( 
pi
.
mpoﬁ
, sizê)

	)

24 
	#‰ì
(
addr
Ë
	`gma_‰ì
 ( 
pi
.
mpoﬁ
,ádd∏)

	)

28 
	#mem_öô
 
k_mem_öô_NŸ_Im∂emíãd


	)

29 
	#mÆloc
 
k_mem_Æloc_NŸ_Im∂emíãd


	)

30 
	#‰ì
 
k_mem_‰ì_NŸ_Im∂emíãd


	)

	@include/api/prog_info.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/basic.h
>

6 
	s_¥og_öfo_t_


9 *
	möô
;

10 *
	míåy
;

11 *
	m∑øm
;

12 *
	mexô
;

13 
uöt
 
	m¥io
;

16 *
	mhóp
;

17 
size_t
 
	mhóp_size
;

19 *
	mmpoﬁ
;

21 
	t¥og_öfo_t
;

23 
¥og_öô
 ( *
¨gs
 );

	@include/api/pthread.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/±hªad.h
>

7 
±hªad_¸óã
 ( 
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
,

8 *(*
°¨t_routöe
Ë(*), *
¨g
 );

9 
±hªad_exô
 ( *
ªtvÆ
 );

10 
±hªad_joö
 ( 
±hªad_t
 
thªad
, **
ªtvÆ
 );

11 
±hªad_t
 
±hªad_£lf
 ();

13 
±hªad_©å_öô
 ( 
±hªad_©å_t
 *
©å
 );

14 
±hªad_©å_de°roy
 ( 
±hªad_©å_t
 *
©å
 );

17 
±hªad_©å_£tschedpﬁicy
 ( 
±hªad_©å_t
 *
©å
, 
pﬁicy
);

18 
±hªad_©å_£tsched∑øm
 ( 
±hªad_©å_t
 *
©å
,

19 
sched_∑øm
 *
∑øm
 );

21 
±hªad_£tsched∑øm
 ( 
±hªad_t
 
thªad
, 
pﬁicy
,

22 
sched_∑øm
 *
∑øm
 );

23 
±hªad_gësched∑øm
 ( 
±hªad_t
 
thªad
, *
pﬁicy
,

24 
sched_∑øm
 *
∑øm
 );

27 
±hªad_muãx_öô
 ( 
±hªad_muãx_t
 *
muãx
, 
±hªad_muãx©å_t
 *
©å
 );

28 
±hªad_muãx_de°roy
 ( 
±hªad_muãx_t
 * 
muãx
 );

29 
±hªad_muãx_lock
 ( 
±hªad_muãx_t
 *
muãx
 );

30 
±hªad_muãx_u∆ock
 ( 
±hªad_muãx_t
 *
muãx
 );

32 
±hªad_muãx©å_öô
 ( 
±hªad_muãx©å_t
 *
©å
 );

33 
±hªad_muãx©å_de°roy
 ( 
±hªad_muãx©å_t
 *
©å
 );

36 
±hªad_c⁄d_öô
 ( 
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_c⁄d©å_t
 *
©å
 );

37 
±hªad_c⁄d_de°roy
 ( 
±hªad_c⁄d_t
 *
c⁄d
 );

38 
±hªad_c⁄d_waô
 ( 
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
 );

39 
±hªad_c⁄d_sig«l
 ( 
±hªad_c⁄d_t
 *
c⁄d
 );

40 
±hªad_c⁄d_brﬂdˇ°
 ( 
±hªad_c⁄d_t
 *
c⁄d
 );

42 
±hªad_c⁄d©å_öô
 ( 
±hªad_c⁄d©å_t
 *
©å
 );

43 
±hªad_c⁄d©å_de°roy
 ( 
±hªad_c⁄d©å_t
 *
©å
 );

44 
±hªad_©å_£tschedpﬁicy
 ( 
±hªad_©å_t
 *
©å
, 
pﬁicy
 );

45 
±hªad_©å_£tsched∑øm
 ( 
±hªad_©å_t
 *
©å
,

46 
sched_∑øm
 *
∑øm
 );

48 
£m_öô
 ( 
£m_t
 *
£m
, 
psh¨ed
, 
vÆue
 );

49 
£m_de°roy
 ( 
£m_t
 *
£m
 );

50 
£m_po°
 ( 
£m_t
 *
£m
 );

51 
£m_waô
 ( 
£m_t
 *
£m
 );

54 
mqd_t
 
mq_›í
 ( *
«me
, 
oÊag
, 
mode_t
 
mode
, 
mq_©å
 *
©å
 );

55 
mq_˛o£
 ( 
mqd_t
 
mqdes
 );

56 
mq_£nd
 ( 
mqd_t
 
mqdes
, *
msg_±r
, 
size_t
 
msg_Àn
, 
uöt
 
msg_¥io
 );

57 
ssize_t
 
mq_ª˚ive
 (
mqd_t
 
mqdes
, *
msg_±r
, 
size_t
 
msg_Àn
, 
uöt
 *
msg_¥io
);

	@include/api/signal.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/sig«l.h
>

6 
siga˘i⁄
 ( 
sig
, 
siga˘i⁄_t
 *
a˘
, siga˘i⁄_à*
ﬂ˘
 );

7 
sigwaôöfo
 ( 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
 );

8 
sigqueue
 ( 
pid_t
 
pid
, 
signo
, 
sigvÆ_t
 
sigvÆ
 );

9 
±hªad_sigmask
 ( 
how
, 
sig£t_t
 *
£t
, sig£t_à*
o£t
 );

	@include/api/stdio.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/io.h
>

6 
›í
 ( *
∑th«me
, 
Êags
, 
mode_t
 
mode
 );

7 
˛o£
 ( 
fd
 );

8 
ssize_t
 
ªad
 ( 
fd
, *
buf„r
, 
size_t
 
cou¡
 );

9 
ssize_t
 
wrôe
 ( 
fd
, *
buf„r
, 
size_t
 
cou¡
 );

11 
gëch¨
 ();

12 
¥ötf
 ( *
f‹m©
, ... );

13 
w¨n
 ( *
f‹m©
, ... );

15 
pﬁl
 ( 
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
timeout
 );

	@include/api/time.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/time.h
>

5 
	~<ty≥s/sig«l.h
>

7 
˛ock_gëtime
 ( 
˛ockid_t
 
˛ockid
, 
time•ec_t
 *
time
 );

8 
˛ock_£âime
 ( 
˛ockid_t
 
˛ockid
, 
time•ec_t
 *
time
 );

9 
˛ock_«no¶ìp
 ( 
˛ockid_t
 
˛ockid
, 
Êags
, 
time•ec_t
 *
ªque°
,

10 
time•ec_t
 *
ªmaö
 );

11 
«no¶ìp
 ( 
time•ec_t
 *
ªque°
,Åime•ec_à*
ªmaö
 );

13 
timî_¸óã
 ( 
˛ockid_t
 
˛ockid
, 
sigevít_t
 *
evp
, 
timî_t
 *
timî
 );

14 
timî_dñëe
 ( 
timî_t
 *
timî
 );

15 
timî_£âime
 ( 
timî_t
 *
timî
, 
Êags
, 
ôimî•ec_t
 *
vÆue
,

16 
ôimî•ec_t
 *
ovÆue
 );

17 
timî_gëtime
 ( 
timî_t
 *
timî
, 
ôimî•ec_t
 *
vÆue
 );

	@include/arch/bits.h

6 #¥agm®
⁄˚


8 
	~<ARCH/bôs.h
>

	@include/arch/context.h

2 #¥agm®
⁄˚


4 
¨ch_des¸ùt‹s_öô
 ();

10 
	g_c⁄ãxt_t_
; 
_c⁄ãxt_t_
 
	tc⁄ãxt_t
;

14 
¨ch_¸óã_thªad_c⁄ãxt
 (

15 
c⁄ãxt_t
 *
c⁄ãxt
,

16 (
func
Ë(*), *
∑øm
,

17 (*
thªad_exô
)(),

18 *
°ack
, 
size_t
 
°ack_size


21 
	`¨ch_swôch_to_thªad
 ( 
c⁄ãxt_t
 *
‰om
, c⁄ãxt_à*
to
 );

22 
	`¨ch_thªad_exô_wôh_°ack_swôch
 ( *
kthªad
, *
exô_°©us
, 
f‹˚
 );

24 
	~<ARCH/c⁄ãxt.h
>

	@include/arch/device.h

2 #¥agm®
⁄˚


4 
	~<ARCH/devi˚.h
>

5 
	~<ty≥s/io.h
>

7 
	g_devi˚_t_
;

8 
_devi˚_t_
 
	tdevi˚_t
;

11 
	s_devi˚_t_


13 
	mdev_«me
[
DEV_NAME_LEN
];

16 
	múq_num
;

19 (*
	múq_h™dÀr
Ë–
	múq_num
, *
	mdevi˚
 );

23 (*
	mˇŒback
Ë–
	múq_num
, *
	mdevi˚
 );

28 (*
	möô
Ë–
uöt
 
	mÊags
, *
	m∑øms
, 
devi˚_t
 *
	mdev
 );

29 (*
	mde°roy
Ë–
uöt
 
	mÊags
, *
	m∑øms
, 
devi˚_t
 *
	mdev
 );

30 (*
	m£nd
Ë–*
	md©a
, 
size_t
 
	msize
, 
uöt
 
	mÊags
, 
devi˚_t
 *
	mdev
 );

31 (*
	mªcv
Ë–*
	md©a
, 
size_t
 
	msize
, 
uöt
 
	mÊags
, 
devi˚_t
 *
	mdev
 );

32 (*
	m°©us
Ë–
uöt
 
	mÊags
, 
devi˚_t
 *
	mdev
 );

35 
	mÊags
;

36 *
	m∑øms
;

	@include/arch/interrupt.h

2 #¥agm®
⁄˚


5 
¨ch_öô_öãºu±s
 ();

8 
¨ch_ªgi°î_öãºu±_h™dÀr
 (

9 
öum
,

10 *
h™dÀr
,

11 *
devi˚


15 
¨ch_uƒegi°î_öãºu±_h™dÀr
 (

16 
úq_num
,

17 *
h™dÀr
,

18 *
devi˚


25 
¨ch_úq_íabÀ
 ( 
úq
 );

26 
¨ch_úq_dißbÀ
 ( 
úq
 );

31 
¨ch_√w_mode
 ();

34 
¨ch_¥ev_mode
 ();

36 
	#KERNEL_MODE
 0

	)

37 
	#USER_MODE
 -1

	)

39 
	~<ARCH/öãºu±.h
>

40 
	#SOFTWARE_INTERRUPT
 
SOFT_IRQ


	)

	@include/arch/memory.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/basic.h
>

8 
	mMS_KERNEL
 = 3,

9 
	mMS_KHEAP
,

10 
	mMS_PROGRAM
,

11 
	mMS_MODULE
,

12 
	mMS_END


15 
	s_m£g_t_


17 
uöt
 
	mty≥
;

18 *
	m°¨t
;

19 
size_t
 
	msize
;

21 
	tm£g_t
;

23 
m£g_t
 *
¨ch_mem‹y_öô
 ();

	@include/arch/multiboot.h

4 #¥agm®
⁄˚


9 
	#MULTIBOOT_PAGE_ALIGN
 0x00000001

	)

11 
	#MULTIBOOT_MEMORY_INFO
 0x00000002

	)

14 
	#MULTIBOOT_HEADER_MAGIC
 0x1BADB002

	)

15 
	#MULTIBOOT_HEADER_FLAGS
 ( 
MULTIBOOT_PAGE_ALIGN
 | 
MULTIBOOT_MEMORY_INFO
 )

	)

21 
	#MULTIBOOT_BOOTLOADER_MAGIC
 0x2BADB002

	)

	@include/arch/processor.h

2 #¥agm®
⁄˚


4 
	~<ARCH/¥o˚ss‹.h
>

7 
	#dißbÀ_öãºu±s
(Ë
	`¨ch_dißbÀ_öãºu±s
()

	)

8 
	#íabÀ_öãºu±s
(Ë
	`¨ch_íabÀ_öãºu±s
()

	)

11 
	#hÆt
(Ë
	`¨ch_hÆt
()

	)

14 
	#su•íd
(Ë
	`¨ch_su•íd
()

	)

17 
	#øi£_öãºu±
(
p
Ë
	`¨ch_øi£_öãºu±
’)

	)

20 
	#mem‹y_b¨rõr
(Ë
	`¨ch_mem‹y_b¨rõr
()

	)

	@include/arch/time.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/time.h
>

9 
¨ch_timî_öô
 ();

16 
¨ch_timî_£t
 ( 
time•ec_t
 *
time
, *
Æ¨m_func
 );

22 
¨ch_gë_time
 ( 
time•ec_t
 *
time
 );

29 
¨ch_£t_time
 ( 
time•ec_t
 *
time
 );

32 
¨ch_gë_mö_öãrvÆ
 ( 
time•ec_t
 *
time
 );

35 
¨ch_íabÀ_timî_öãºu±
 ();

36 
¨ch_dißbÀ_timî_öãºu±
 ();

	@include/arch/types.h

2 #¥agm®
⁄˚


4 
	~<ARCH/ty≥s.h
>

6 
¨ch_öt8
 
	töt8
;

7 
¨ch_uöt8
 
	tuöt8
;

8 
¨ch_öt16
 
	töt16
;

9 
¨ch_uöt16
 
	tuöt16
;

10 
¨ch_öt32
 
	töt32
;

11 
¨ch_uöt32
 
	tuöt32
;

12 
¨ch_uöt
 
	tuöt
;

14 
¨ch_öt64
 
	töt64
;

15 
¨ch_uöt64
 
	tuöt64
;

18 
¨ch_aöt
 
	taöt
;

21 
	#__WORD_SIZE
 
__ARCH_WORD_SIZE


	)

22 
¨ch_w‹d_t
 
	tw‹d_t
;

23 
¨ch_sw‹d_t
 
	tsw‹d_t
;

	@include/kernel/device.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/io.h
>

7 
sys__›í
 ( *
∑th«me
, 
Êags
, 
mode_t
 
mode
, 
des¸ùt‹_t
 *
desc
 );

8 
sys__˛o£
 ( 
des¸ùt‹_t
 *
desc
 );

9 
sys__ªad
 ( 
des¸ùt‹_t
 *
desc
, *
buf„r
, 
size_t
 
cou¡
 );

10 
sys__wrôe
 ( 
des¸ùt‹_t
 *
desc
, *
buf„r
, 
size_t
 
cou¡
 );

11 
sys__devi˚_°©us
 ( 
des¸ùt‹_t
 *
desc
, 
Êags
 );

12 
sys__pﬁl
 ( 
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
timeout
,

13 
des¸ùt‹_t
 *
°d_desc
 );

	@include/kernel/errno.h

2 #¥agm®
⁄˚


4 
sys__£t_î∫o
 ( 
î∫o
 );

5 
sys__gë_î∫o
 ();

6 
sys__gë_î∫o_±r
 ( **
î∫o
 );

8 #ifde‡
_KERNEL_


10 
	~<ty≥s/î∫o.h
>

12 
	~<kî√l/thªad.h
>

13 
	~<kî√l/k¥öt.h
>

14 
	~<¨ch/¥o˚ss‹.h
>

20 
	#SET_ERRNO
(
ENUM
Ë
	`kthªad_£t_î∫o
 (
NULL
, ENUM)

	)

24 
	#SYS_ENTRY
(Ë
__FUNCTION__
 ## 
ei
 = 
	`£t_öãºu±s
 (
FALSE
)

	)

27 
	#SYS_RETURN
(
RETVAL
) \

28 dÿ{ 
	`£t_öãºu±s
 (
__FUNCTION__
 ## 
ei
);  
RETVAL
; } 0)

	)

31 
	#SYS_EXIT
(
ENUM
,
RETVAL
) \

32 dÿ{ 
	`SET_ERRNO
(
ENUM
); 
	`SYS_RETURN
(
RETVAL
); } 0)

	)

39 #ifde‡
DEBUG


42 
	#LOG
(
LEVEL
, 
f‹m©
, ...) \

43 
	`k¥ötf
 ( "[" #LEVEL ":%s:%d]" 
f‹m©
 "\n", 
__FILE__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

46 
	#ASSERT
(
ex¥
Ëdÿi‡–!–ex¥ ) ) { 
	`LOG
 ( 
BUG
, ""); 
	`hÆt
(); } 0)

	)

49 
	#ASSERT_AND_RETURN_ERRNO
(
ex¥
, 
î∫um
) \

50 dÿ{ i‡–!–
ex¥
 ) ) { 
	`LOG
 ( 
ASSERT
, "");  
î∫um
; } } 0)

	)

53 
	#ASSERT_ERRNO_AND_EXIT
(
ex¥
, 
î∫um
) \

54 dÿif–!(
ex¥
ËË{ 
	`LOG
(
ASSERT
, ""); 
	`SYS_EXIT
(
î∫um
, 
EXIT_FAILURE
); } 0)

	)

58 
	#ASSERT
(
ex¥
)

	)

59 
	#ASSERT_ERRNO_AND_EXIT
(
ex¥
, 
î∫um
)

	)

60 
	#ASSERT_AND_RETURN_ERRNO
(
ex¥
, 
î∫um
)

	)

61 
	#LOG
(
LEVEL
, 
f‹m©
, ...)

	)

67 
	#log
(
LEVEL
, 
f‹m©
, ...) \

68 
	`k¥ötf
 ( "[" #LEVEL ":%s:%d]" 
f‹m©
 "\n", 
__FILE__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

71 
	#as£π
(
ex¥
Ëdÿi‡–!–ex¥ ) ) { 
	`log
 ( 
BUG
, ""); 
	`hÆt
(); } 0)

	)

74 
	#as£π_™d_ªtu∫_î∫o
(
ex¥
, 
î∫um
) \

75 dÿ{ i‡–!–
ex¥
 ) ) { 
	`log
 ( 
ASSERT
, "");  
î∫um
; } } 0)

	)

78 
	#as£π_î∫o_™d_exô
(
ex¥
, 
î∫um
) \

79 dÿif–!(
ex¥
ËË{ 
	`log
(
ASSERT
, ""); 
	`SYS_EXIT
(
î∫um
, 
EXIT_FAILURE
); } 0)

	)

	@include/kernel/features.h

3 
	~<ty≥s/basic.h
>

5 
	#FEATURE_GET
 0

	)

6 
	#FEATURE_SET
 1

	)

8 
	#FEATURE_INTERRUPTS
 ( 1 << 0 )

	)

9 
	#FEATURE_TIMERS
 ( 1 << 1 )

	)

10 
	#FEATURE_SCHEDULER
 ( 1 << 2 )

	)

11 
	#FEATURE_SCHED_RR
 ( 1 << 3 )

	)

13 
	#FEATURE_SUPPORTED
 ( 
FEATURE_INTERRUPTS
 | 
FEATURE_TIMERS
 | \

14 
FEATURE_SCHEDULER
 | 
FEATURE_SCHED_RR
 )

	)

16 
uöt
 
sys__„©uª
 ( uöà
„©uªs
, 
cmd
, 
íabÀ
 );

18 
	#OS_ENABLE
(
FEATURE
Ë
	`sys__„©uª
 ( FEATURE, 
FEATURE_SET
, 
TRUE
 )

	)

19 
	#OS_DISABLE
(
FEATURE
Ë
	`sys__„©uª
 ( FEATURE, 
FEATURE_SET
, 
FALSE
 )

	)

	@include/kernel/kprint.h

2 #¥agm®
⁄˚


4 #ifde‡
_KERNEL_


6 
	~<ty≥s/io.h
>

8 
k¥ötf
 ( *
f‹m©
, ... );

	@include/kernel/memory.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/basic.h
>

7 
sys__sysöfo
 ( *
buf„r
, 
size_t
 
buf_size
, **
∑øm
 );

9 #ifde‡
_KERNEL_


11 *
k_mem_öô
 ( *
£gmít
, 
size_t
 
size
 );

12 *
kmÆloc
 ( 
size_t
 
size
 );

13 
k‰ì
 ( *
chunk
 );

15 
	g_kobje˘_t_
; 
_kobje˘_t_
 
	tkobje˘_t
;

	@include/kernel/pthread.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/±hªad.h
>

7 
sys__±hªad_¸óã
 ( 
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
,

8 *(*
°¨t_routöe
Ë(*), *
¨g
 );

9 
sys__±hªad_exô
 ( *
ªtvÆ
 );

10 
sys__±hªad_joö
 ( 
±hªad_t
 *
thªad
, **
ªtvÆ
 );

11 
sys__±hªad_£lf
 ( 
±hªad_t
 *
thªad
 );

13 
sys__±hªad_£tsched∑øm
 ( 
±hªad_t
 *
thªad
, 
pﬁicy
,

14 
sched_∑øm_t
 *
∑øm
 );

16 
sys__±hªad_muãx_öô
 ( 
±hªad_muãx_t
 *
muãx
,

17 
±hªad_muãx©å_t
 *
muãx©å
 );

18 
sys__±hªad_muãx_de°roy
 ( 
±hªad_muãx_t
 *
muãx
 );

19 
sys__±hªad_muãx_lock
 ( 
±hªad_muãx_t
 *
muãx
 );

20 
sys__±hªad_muãx_u∆ock
 ( 
±hªad_muãx_t
 *
muãx
 );

22 
sys__±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_c⁄d©å_t
 *
c⁄d©å
);

23 
sys__±hªad_c⁄d_de°roy
 ( 
±hªad_c⁄d_t
 *
c⁄d
 );

24 
sys__±hªad_c⁄d_waô
 ( 
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
 );

25 
sys__±hªad_c⁄d_sig«l
 ( 
±hªad_c⁄d_t
 *
c⁄d
 );

26 
sys__±hªad_c⁄d_brﬂdˇ°
 ( 
±hªad_c⁄d_t
 *
c⁄d
 );

28 
sys__£m_öô
 ( 
£m_t
 *
£m
, 
psh¨ed
, 
vÆue
 );

29 
sys__£m_de°roy
 ( 
£m_t
 *
£m
 );

30 
sys__£m_waô
 ( 
£m_t
 *
£m
 );

31 
sys__£m_po°
 ( 
£m_t
 *
£m
 );

33 
sys__mq_›í
 ( *
«me
, 
oÊag
, 
mode_t
 
mode
, 
mq_©å_t
 *
©å
,

34 
mqd_t
 *
mqdes
 );

35 
sys__mq_˛o£
 ( 
mqd_t
 *
mqdes
 );

36 
sys__mq_£nd
 ( 
mqd_t
 *
mqdes
, *
msg_±r
, 
size_t
 
msg_Àn
, 
uöt
 
msg_¥io
 );

37 
sys__mq_ª˚ive
 (
mqd_t
 *
mqdes
,*
msg_±r
,
size_t
 
msg_Àn
,
uöt
 *
msg_¥io
 );

	@include/kernel/signal.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/sig«l.h
>

8 
sys__sigqueue
 ( 
pid_t
 
pid
, 
signo
, 
sigvÆ_t
 
sigvÆ
 );

9 
sys__±hªad_sigmask
 ( 
how
, 
sig£t_t
 *
£t
, sig£t_à*
o£t
 );

10 
sys__siga˘i⁄
 ( 
sig
, 
siga˘i⁄_t
 *
a˘
, siga˘i⁄_à*
ﬂ˘
 );

11 
sys__sigwaôöfo
 ( 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
 );

	@include/kernel/thread.h

2 #¥agm®
⁄˚


4 #ifde‡
_KERNEL_


6 
	~"„©uªs.h
"

7 
	~<lib/li°.h
>

10 
	s_kthªad_q_


12 
li°_t
 
	mq
;

15 
	tkthªad_q
;

	@include/kernel/time.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/time.h
>

5 
	~<ty≥s/sig«l.h
>

8 
sys__˛ock_gëtime
 ( 
˛ockid_t
 
˛ockid
, 
time•ec_t
 *
time
 );

9 
sys__˛ock_£âime
 ( 
˛ockid_t
 
˛ockid
, 
time•ec_t
 *
time
 );

10 
sys__˛ock_«no¶ìp
 ( 
˛ockid_t
 
˛ockid
, 
Êags
,

11 
time•ec_t
 *
ªque°
,Åime•ec_à*
ªmaö
 );

13 
sys__timî_¸óã
 ( 
˛ockid_t
 
˛ockid
, 
sigevít_t
 *
evp
, 
timî_t
 *
timîid
 );

14 
sys__timî_dñëe
 ( 
timî_t
 *
timîid
 );

15 
sys__timî_£âime
 ( 
timî_t
 *
timîid
, 
Êags
,

16 
ôimî•ec_t
 *
vÆue
, itimî•ec_à*
ovÆue
 );

17 
sys__timî_gëtime
 ( 
timî_t
 *
timîid
, 
ôimî•ec_t
 *
vÆue
 );

	@include/lib/ff_simple.h

10 #¥agm®
⁄˚


12 #ifde‡
MEM_TEST


13 
	~"ã°/ã°.h
"

15 
	~<ty≥s/basic.h
>

17 #i‚de‡
_FF_SIMPLE_C_


19 
	tffs_mpoﬁ_t
;

22 *
ffs_öô
 ( *
mem_£gm
, 
size_t
 
size
 );

23 *
ffs_Æloc
 ( 
ffs_mpoﬁ_t
 *
mpoﬁ
, 
size_t
 
size
 );

24 
ffs_‰ì
 ( 
ffs_mpoﬁ_t
 *
mpoﬁ
, *
chunk_to_be_‰ìd
 );

30 
	s_ffs_hdr_t_


32 
size_t
 
	msize
;

34 
_ffs_hdr_t_
 *
	m¥ev
;

36 
_ffs_hdr_t_
 *
	m√xt
;

39 
	tffs_hdr_t
;

42 
	s_ffs_èû_t_


44 
size_t
 
	msize
;

47 
	tffs_èû_t
;

49 
	s_ffs_mpoﬁ_t_


51 
ffs_hdr_t
 *
	mfú°
;

53 
	tffs_mpoﬁ_t
;

55 
	#HEADER_SIZE
 (  (
ffs_hdr_t
Ë+  (
ffs_èû_t
Ë)

	)

58 
	#MARK_USED
(
HDR
Ëdÿ{ (HDR)->
size
 |1; } 0)

	)

59 
	#MARK_FREE
(
HDR
Ëdÿ{ (HDR)->
size
 &~1; } 0)

	)

61 
	#CHECK_USED
(
HDR
Ë((HDR)->
size
 & 1)

	)

62 
	#CHECK_FREE
(
HDR
Ë!
	`CHECK_USED
(HDR)

	)

64 
	#GET_SIZE
(
HDR
Ë((HDR)->
size
 & ~1)

	)

66 
	#GET_AFTER
(
HDR
Ë(((*Ë(HDR)Ë+ 
	`GET_SIZE
(HDR))

	)

67 
	#GET_TAIL
(
HDR
Ë(
	`GET_AFTER
(HDRË-  (
ffs_èû_t
))

	)

68 
	#GET_HDR
(
TAIL
Ë(((*)(TAIL)Ë- 
	`GET_SIZE
(TAILË+ (
ffs_èû_t
))

	)

70 
	#CLONE_SIZE_TO_TAIL
(
HDR
) \

71 dÿ{ ( (
ffs_èû_t
 *Ë
	`GET_TAIL
(
HDR
Ë)->
size
 = (HDR)->size; } 0)

	)

73 
	#ALIGN_VAL
 ( (
size_t
Ë(size_tË)

	)

74 
	#ALIGN_MASK
 ( ~–
ALIGN_VAL
 - 1 ) )

	)

75 
	#ALIGN
(
P
) \

76 dÿ{ (
P
Ë
ALIGN_MASK
 & ( (
size_t
Ë(PË); } 0)

	)

77 
	#ALIGN_FW
(
P
) \

78 dÿ{ (
P
Ë
ALIGN_MASK
 & (((
size_t
Ë(P)Ë+ (
ALIGN_VAL
 - 1)Ë; } 0)

	)

80 *
ffs_öô
 ( *
mem_£gm
, 
size_t
 
size
 );

81 *
ffs_Æloc
 ( 
ffs_mpoﬁ_t
 *
mpoﬁ
, 
size_t
 
size
 );

82 
ffs_‰ì
 ( 
ffs_mpoﬁ_t
 *
mpoﬁ
, *
chunk_to_be_‰ìd
 );

84 
ffs_ªmove_chunk
 ( 
ffs_mpoﬁ_t
 *
mpoﬁ
, 
ffs_hdr_t
 *
chunk
 );

85 
ffs_ö£π_chunk
 ( 
ffs_mpoﬁ_t
 *
mpoﬁ
, 
ffs_hdr_t
 *
chunk
 );

	@include/lib/gma.h

176 #¥agm®
⁄˚


178 #ifde‡
MEM_TEST


179 
	~"../../lib/mm/ã°/ã°.h
"

182 
	~<ty≥s/basic.h
>

185 #i‚de‡
_GMA_C_


187 
	#gma_t
 

	)

189 
gma_t
 *
gma_öô
 ( *
mem‹y_£gmít
, 
size_t
 
size
, size_à
mö_chunk_size
,

190 
uöt
 
Êags
 );

191 *
gma_Æloc
 ( 
gma_t
 *
mpoﬁ
, 
size_t
 
size
 );

192 
gma_‰ì
 ( 
gma_t
 *
mpoﬁ
, *
addªss
 );

198 
	~<ty≥s/bôs.h
>

201 #if 
__WORD_SIZE
 == 8

202 
	#L
 3

	)

203 #ñif 
__WORD_SIZE
 == 16

204 
	#L
 4

	)

205 #ñif 
__WORD_SIZE
 == 32

206 
	#L
 5

	)

207 #ñif 
__WORD_SIZE
 == 64

208 
	#L
 6

	)

209 #ñif 
__WORD_SIZE
 == 128

210 
	#L
 7

	)

212 #îr‹ 
Undeföed
 
‹
 
unsuµ‹ãd
 
ªquúed
 
c⁄°™t
 
__WORD_SIZE


216 
	#SL_DIM
 
__WORD_SIZE


	)

218 
	g_mchunk_t_
;

219 
_mchunk_t_
 
	tmchunk_t
;

222 
	s_gma_t_


224 
	mÊ_mö
;

225 
	mÊ_max
;

228 
size_t
 
	mmö_chunk_size
;

231 
size_t
 
	mFL_bôm≠
;

233 
size_t
 *
	mSL_bôm≠
;

236 
	mmchunk_t
 *(*
	mchunk
)[
SL_DIM
];

246 
	tgma_t
;

250 
	s_mchunk_t_


252 
size_t
 
	mbsize
;

256 
size_t
 
	msize
;

260 
_mchunk_t_
 *
	m¥ev
;

261 
_mchunk_t_
 *
	m√xt
;

269 
	#MIN_ALIGN
 ( (
size_t
Ë>4 ? (size_tË: 4 )

	)

271 
	#CHUNK_ALIGN_VAL
 ( (
size_t
Ë
MIN_ALIGN
 * 1 )

	)

273 
	#CHUNK_ALIGN_MASK
 ( ~–(
size_t
Ë–
CHUNK_ALIGN_VAL
 - 1 ) ) )

	)

277 
	#CHUNK_ALIGN
(
P
Ë–((
size_t
)(P)Ë& 
CHUNK_ALIGN_MASK
 )

	)

278 
	#CHUNK_ALIGN_FW
(
P
Ë
	`CHUNK_ALIGN
(((
size_t
)(P))+(
CHUNK_ALIGN_VAL
-1))

	)

279 
	#CHUNK_IS_ALIGNED
(
P
Ë(!–((
size_t
)(P)Ë& (
CHUNK_ALIGN_VAL
-1Ë))

	)

282 
	#BINUSE
 ( (
size_t
Ë1 )

	)

283 
	#CINUSE
 ( (
size_t
Ë2 )

	)

285 
	#GET_CHUNK_HDR_FROM_ADDR
(
ADR
Ë(((*)(ADR))-(
size_t
))

	)

287 
	#GET_CHUNK_HDR_FROM_USABLE_ADDR
(
ADR
Ë(((*)(ADR))-2*(
size_t
))

	)

288 
	#GET_CHUNK_USABLE_ADDR
(
HDR
Ë(((*)(HDR))+2*(
size_t
))

	)

290 
	#GET_CHUNK_SIZE
(
CHUNK
Ë–(CHUNK)->
size
 & 
CHUNK_ALIGN_MASK
 )

	)

291 
	#SET_CHUNK_SIZE
(
CHUNK
, 
SIZE
) \

292 dÿ{ (
CHUNK
)->
size
 = (
SIZE
Ë| ((CHUNK)->sizê& 3); } 0)

	)

294 
	#GET_CHUNK_INUSE
(
CHUNK
Ë–(CHUNK)->
size
 & 
CINUSE
 )

	)

295 
	#SET_CHUNK_INUSE
(
CHUNK
Ëdÿ{ (CHUNK)->
size
 |
CINUSE
; } 0)

	)

296 
	#CLEAR_CHUNK_INUSE
(
CHUNK
Ëdÿ{ (CHUNK)->
size
 &~
CINUSE
; } 0)

	)

298 
	#GET_CHUNK_BINUSE
(
CHUNK
Ë–(CHUNK)->
size
 & 
BINUSE
 )

	)

299 
	#SET_CHUNK_BINUSE
(
CHUNK
Ëdÿ{ (CHUNK)->
size
 |
BINUSE
; } 0)

	)

300 
	#CLEAR_CHUNK_BINUSE
(
CHUNK
Ëdÿ{ (CHUNK)->
size
 &~
BINUSE
; } 0)

	)

303 
	#GET_CHUNK_BEFORE
(
CHUNK
) \

304 –
	`GET_CHUNK_BINUSE
(
CHUNK
Ë? 
NULL
 : \

305 ((
mchunk_t
 *Ë–((*Ë(
CHUNK
)Ë- ((CHUNK)->
bsize
 & 
CHUNK_ALIGN_MASK
Ë)Ë)

	)

307 
	#GET_CHUNK_AFTER
(
CHUNK
) \

308 –(
mchunk_t
 *Ë–((*Ë(
CHUNK
)Ë+ 
	`GET_CHUNK_SIZE
(CHUNKËË)

	)

311 
	#SET_CHUNK_IN_USE
(
CHUNK
) \

312 do{ 
	`SET_CHUNK_INUSE
(
CHUNK
); 
	`SET_CHUNK_BINUSE
(
	`GET_CHUNK_AFTER
(CHUNK));} 0)

	)

315 
	#CLONE_CHUNK_SIZE
(
CHUNK
) \

316 dÿ{ 
	`GET_CHUNK_AFTER
(
CHUNK
)->
bsize
 = (CHUNK)->
size
; } 0)

	)

318 
	#JOIN_CHUNKS
(
C1
, 
C2
) \

319 dÿ{ 
	`SET_CHUNK_SIZE
–(
C1
), 
	`GET_CHUNK_SIZE
(C1Ë+ GET_CHUNK_SIZE(
C2
)); } 0)

	)

322 
	#FIRST_IN_LIST
(
LIST
Ë(LIST)

	)

324 
	#GET_CHUNK_PREV
(
CHUNK
) \

325 ((
mchunk_t
 *Ë–((
size_t
Ë((
CHUNK
)->
¥ev
)Ë& ~((size_tË1Ë))

	)

327 
	#IS_CHUNK_FIRST_IN_LIST
(
CHUNK
Ë–((
size_t
Ë(CHUNK)->
¥ev
Ë& 1 )

	)

328 
	#SET_CHUNK_FIRST_IN_LIST
(
CHUNK
) \

329 dÿ{ (
CHUNK
)->
¥ev
 = (
mchunk_t
 *Ë–((
size_t
Ë(CHUNK)->¥evË| 1 ); } 0)

	)

332 
	#MCHUNK_T_SZ
 
	`CHUNK_ALIGN_FW
 (  (
mchunk_t
Ë)

	)

334 
	#MIN_CHUNK_SIZE
 \

335 –
MCHUNK_T_SZ
 > 
CHUNK_ALIGN_VAL
 ? MCHUNK_T_SZ : CHUNK_ALIGN_VAL * 2)

	)

337 
	#MAX_CHUNK_SIZE
 ( ( ~–(
size_t
Ë0 ) ) & 
CHUNK_ALIGN_MASK
 )

	)

340 
	#DEF_MIN_CHUNK_SIZE
 ( 
MIN_CHUNK_SIZE
 >32 ? MIN_CHUNK_SIZE : 32 )

	)

343 
	#MIN_POOL_SIZE
 (  (
gma_t
Ë+ 1 *  (
size_t
) + \

344 1 * 
SL_DIM
 *  (
size_t
Ë+ 
MIN_CHUNK_SIZE
 )

	)

346 
	#EXACT_LIMIT_SIZE_1
 ( 1 << ( 2 * 
L
 - 2 ) )

	)

347 
	#EXACT_LIMIT_SIZE
 \

348 –
EXACT_LIMIT_SIZE_1
 * ( 
CHUNK_ALIGN_VAL
 / (
size_t
ËË)

	)

356 
	#BORDER_CHUNK_SIZE
 
CHUNK_ALIGN_VAL


	)

357 
	#BORDER_CHUNK
 ( 
BORDER_CHUNK_SIZE
 | 
CINUSE
 )

	)

358 
	#IS_BORDER_CHUNK
(
CHUNK
Ë–
	`GET_CHUNK_SIZE
(CHUNKË=
BORDER_CHUNK_SIZE
 )

	)

359 
	#SET_BORDER_CHUNK
(
CHUNK
) \

360 dÿ{ (
CHUNK
)->
size
 = 
BORDER_CHUNK
; 
	`CLONE_CHUNK_SIZE
(CHUNK); } 0)

	)

362 
	#NEW_MPOOL
 1

	)

365 #i‚de‡
ASSERT


366 #ö˛udê
ASSERT_H


370 *
	$make_fú°_chunk
 ( *
addr
, 
size_t
 
size
 )

372 
mchunk_t
 *
chunk
, *
b‹dî
;

374 
	`ASSERT
 ( 
addr
 && 
size
 > 
BORDER_CHUNK_SIZE
 * 2 + 
MIN_CHUNK_SIZE
 &&

375 
	`CHUNK_IS_ALIGNED
 ( (
size_t
Ë
addr
Ë&& CHUNK_IS_ALIGNED (
size
) );

378 
b‹dî
 = 
	`GET_CHUNK_HDR_FROM_ADDR
 ( 
addr
 );

379 
	`SET_BORDER_CHUNK
 ( 
b‹dî
 );

383 
chunk
 = 
	`GET_CHUNK_AFTER
 ( 
b‹dî
 );

384 
	`SET_CHUNK_SIZE
 ( 
chunk
, 
size
 - 2 * 
BORDER_CHUNK_SIZE
 );

385 
	`SET_CHUNK_INUSE
 ( 
chunk
 );

386 
	`SET_CHUNK_BINUSE
 ( 
chunk
 );

390 
b‹dî
 = 
	`GET_CHUNK_AFTER
 ( 
chunk
 );

391 
	`SET_BORDER_CHUNK
 ( 
b‹dî
 );

392 
	`SET_CHUNK_BINUSE
 ( 
b‹dî
 );

394  
	`GET_CHUNK_USABLE_ADDR
 ( 
chunk
 );

395 
	}
}

398 
	$ö£π_chunk_ö_li°
 ( 
mchunk_t
 **
li°
, mchunk_à*
chunk
 )

400 
mchunk_t
 *
a·î
;

402 
chunk
->
√xt
 = *
li°
;

403 i‡–*
li°
 )

404 (*
li°
)->
¥ev
 = 
chunk
;

405 *
li°
 = 
chunk
;

407 
chunk
->
¥ev
 = (
mchunk_t
 *Ë
li°
;

408 
	`SET_CHUNK_FIRST_IN_LIST
 ( 
chunk
 );

410 
	`CLEAR_CHUNK_INUSE
 ( 
chunk
 );

411 
	`CLONE_CHUNK_SIZE
 ( 
chunk
 );

414 
a·î
 = 
	`GET_CHUNK_AFTER
 ( 
chunk
 );

415 
	`CLEAR_CHUNK_BINUSE
 ( 
a·î
 );

416 
	}
}

424 
size_t
 
	$ªmove_chunk_‰om_li°
 ( 
mchunk_t
 *
chunk
 )

426 
mchunk_t
 **
li°
;

427 
size_t
 
ªt_vÆue
 = 0;

429 i‡–
	`IS_CHUNK_FIRST_IN_LIST
 ( 
chunk
 ) )

431 
li°
 = (
mchunk_t
 **Ë
	`GET_CHUNK_PREV
 ( 
chunk
 );

433 *
li°
 = 
chunk
->
√xt
;

434 i‡–*
li°
 )

436 (*
li°
)->
¥ev
 = (
mchunk_t
 *)Üist ;

437 
	`SET_CHUNK_FIRST_IN_LIST
 ( *
li°
 );

440 
ªt_vÆue
 = 1;

444 
chunk
->
¥ev
->
√xt
 = chunk->next;

445 i‡–
chunk
->
√xt
 )

446 
chunk
->
√xt
->
¥ev
 = chunk->prev;

449  
ªt_vÆue
;

450 
	}
}

458 
mchunk_t
 *
	$•lô_chunk_©
 ( 
mchunk_t
 *
chunk
, 
size_t
 
size
 )

460 
mchunk_t
 *
ªmaödî
;

462 
	`ASSERT
 ( 
	`CHUNK_IS_ALIGNED
 ( 
size
 ) &&

463 
size
 - 
	`GET_CHUNK_SIZE
 ( 
chunk
 ) >
MIN_CHUNK_SIZE
 );

465 
ªmaödî
 = ( (*Ë
chunk
 ) + 
size
;

466 
ªmaödî
->
size
 = 0;

467 
	`SET_CHUNK_SIZE
 ( 
ªmaödî
, 
	`GET_CHUNK_SIZE
 ( 
chunk
 ) - 
size
 );

468 
	`CLONE_CHUNK_SIZE
 ( 
ªmaödî
 );

469 
	`SET_CHUNK_SIZE
 ( 
chunk
, 
size
 );

470 
	`CLONE_CHUNK_SIZE
 ( 
chunk
 );

472  
ªmaödî
;

473 
	}
}

477 
gma_t
 *
gma_öô
 ( *
mem‹y_£gmít
, 
size_t
 
size
, size_à
mö_chunk_size
,

478 
uöt
 
Êags
 );

479 *
gma_Æloc
 ( 
gma_t
 *
mpoﬁ
, 
size_t
 
size
 );

480 
gma_‰ì
 ( 
gma_t
 *
mpoﬁ
, *
addªss
 );

482 
gë_ödexes
(
gma_t
 *
mpoﬁ
,
size_t
 
size
,size_à*
Ê
,size_à*
¶
,
ös
);

483 
ölöe
 
£t_li°_have_chunks
 ( 
gma_t
 *
mpoﬁ
, 
size_t
 
Ê
, size_à
¶
 );

484 
ölöe
 
˛ór_li°_have_chunks
 (
gma_t
 *
mpoﬁ
, 
size_t
 
Ê
, size_à
¶
);

486 
ö£π_chunk_ö_‰ì_li°
 ( 
gma_t
 *
mpoﬁ
, 
mchunk_t
 *
chunk
 );

487 
ªmove_chunk_‰om_‰ì_li°
 ( 
gma_t
 *
mpoﬁ
, 
mchunk_t
 *
chunk
 );

488 
mchunk_t
 *
ªmove_fú°_chunk_‰om_‰ì_li°
 ( 
gma_t
 *
mpoﬁ
, 
size_t
 
Ê
,

489 
size_t
 
¶
 );

	@include/lib/list.h

39 #¥agm®
⁄˚


41 
	~<ty≥s/basic.h
>

44 
	s_li°_h_


46 
_li°_h_
 *
	m¥ev
;

49 
_li°_h_
 *
	m√xt
;

52 *
	mobje˘
;

55 
	tli°_h
;

58 
	s_li°_


60 
li°_h
 *
	mfú°
;

61 
li°_h
 *
	mœ°
;

63 
	tli°_t
;

66 
	#LIST_H_NULL
 { 
NULL
, NULL, NULL }

	)

69 
	#LIST_T_NULL
 { 
NULL
, NULL }

	)

71 
	#FIRST
 0

	)

72 
	#LAST
 1

	)

74 
li°_öô
 ( 
li°_t
 *
li°
 );

77 
li°_≠≥nd
 ( 
li°_t
 *
li°
, *
obje˘
, 
li°_h
 *
hdr
 );

80 
li°_¥ïíd
 ( 
li°_t
 *
li°
, *
obje˘
, 
li°_h
 *
hdr
 );

83 
li°_s‹t_add
 ( 
li°_t
 *
li°
, *
obje˘
, 
li°_h
 *
hdr
,

84 (*
cmp
) ( *, * ) );

87 *
	`li°_gë
 ( 
li°_t
 *
li°
, 
Êags
 );

90 *
	`li°_gë_√xt
 ( 
li°_h
 *
hdr
 );

96 *
	`li°_ªmove
 ( 
li°_t
 *
li°
, 
Êags
, 
li°_h
 *
ªf
 );

99 *
	`li°_föd
 ( 
li°_t
 *
li°
, 
li°_h
 *
ªf
 );

102 *
	`li°_föd_™d_ªmove
 ( 
li°_t
 *
li°
, 
li°_h
 *
ªf
 );

	@include/lib/string.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/basic.h
>

6 *
mem£t
 ( *
s
, 
c
, 
size_t
 
n
 );

7 *
mem£tw
 ( *
s
, 
c
, 
size_t
 
n
 );

8 *
mem˝y
 ( *
de°
, c⁄° *
§c
, 
size_t
 
n
 );

9 *
memmove
 ( *
de°
, c⁄° *
§c
, 
size_t
 
n
 );

10 *
memmovew
 ( *
de°
, c⁄° *
§c
, 
size_t
 
n
 );

11 
memcmp
 ( c⁄° *
m1
, c⁄° *
m2
, 
size_t
 
size
 );

13 
size_t
 
°æí
 ( c⁄° *
s
 );

14 
°rcmp
 ( c⁄° *
s1
, c⁄° *
s2
 );

15 
°∫cmp
 ( c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
 );

16 *
°r˝y
 ( *
de°
, c⁄° *
§c
 );

17 *
°rˇt
 ( *
de°
, c⁄° *
§c
 );

18 *
°rchr
 (c⁄° *
s
, 
c
);

19 *
°r°r
 (c⁄° *
s1
, c⁄° *
s2
);

21 *
°πok
 ( *
s
, c⁄° *
dñim
 );

22 *
°πok_r
 ( *
s
, c⁄° *
dñim
, **
œ°
 );

24 
ôﬂ
 ( *
buf„r
, 
ba£
, 
d
 );

25 
vs•rötf
 ( *
°r
, 
size_t
 
size
, **
¨g
 );

	@include/types/basic.h

2 #¥agm®
⁄˚


4 
	~<¨ch/ty≥s.h
>

6 #i‡
__WORD_SIZE
 >= 32

8 #i‚de‡
MEM_TEST


9 
w‹d_t
 
	tsize_t
;

10 
sw‹d_t
 
	tssize_t
;

15 
uöt32
 
	tsize_t
;

16 
uöt32
 
	tssize_t
;

20 
	#NULL
 ((*Ë0)

	)

22 
	#FALSE
 0

	)

23 
	#TRUE
 0x0f

	)

28 
	tid_t
;

29 
	tuid_t
;

30 
	tmode_t
;

33 
	u_∑øm_t_


35 
	mp_öt
;

36 *
	mp_±r
;

38 
	t∑øm_t
;

41 
	s_des¸ùt‹_


43 
id_t
 
	mid
;

46 *
	m±r
;

49 
	tdes¸ùt‹_t
;

	@include/types/bits.h

2 #¥agm®
⁄˚


4 
	~<¨ch/bôs.h
>

8 #ifde‡
ARCH_MSB_INDEX


9 
	#msb_ödex
 
¨ch_msb_ödex


	)

11 
	#REQUIRE_MSB_INDEX


	)

14 #ifde‡
ARCH_LSB_INDEX


15 
	#lsb_ödex
 
¨ch_lsb_ödex


	)

17 
	#REQUIRE_LSB_INDEX


	)

20 #ifde‡
ARCH_MUL_DIV_32


21 
	#mul_div_32
 
¨ch_mul_div_32


	)

27 #if 
deföed
(
REQUIRE_MSB_INDEX
) || \

28 
deföed
(
REQUIRE_LSB_INDEX
) || \

29 
	$deföed
(
REQUIRE_MUL_DIV_32
)

31 
	#REQUIRE_BITS_GENERIC


	)

33 
	~<ty≥s/bôs_gíîic.h
>

38 
	#RAND_MAX_BITS
 16

	)

39 
	#RAND_MAX_BITS_SHIFT
 ( ( (
uöt
Ë* 8 - 
RAND_MAX_BITS
 ) / 2 )

	)

41 
	#RAND_MAX
 ( ( 1 << 
RAND_MAX_BITS
 ) - 1 )

	)

43 
ölöe
 
uöt
 
	$ønd
 ( 
uöt
 *
£ed
 )

45 *
£ed
 = (*seed) * 1103515245 + 12345;

47  ( (*
£ed
Ë>> 
RAND_MAX_BITS_SHIFT
 ) & 
RAND_MAX
;

48 
	}
}

	@include/types/bits_generic.h

2 #¥agm®
⁄˚


6 #i‚de‡
REQUIRE_BITS_GENERIC


7 #îr‹ 
Do
 
nŸ
 
ö˛ude
 
this
 
fûe
 
dúe˘ly
!

10 
	~<ty≥s/basic.h
>

12 #ifde‡
REQUIRE_MSB_INDEX


14 #i‡
__WORD_SIZE
 == 32

15 
	#msb_ödex
 
msb_ödex_32


	)

16 #ñi‡
__WORD_SIZE
 == 64

17 
	#msb_ödex
 
msb_ödex_64


	)

19 
	#msb_ödex
 
msb_ödex_gíîic


	)

25 #ifde‡
REQUIRE_LSB_INDEX


27 #i‡
__WORD_SIZE
 == 32

28 
	#lsb_ödex
 
lsb_ödex_32


	)

29 #ñi‡
__WORD_SIZE
 == 64

30 
	#lsb_ödex
 
lsb_ödex_64


	)

32 
	#lsb_ödex
 
lsb_ödex_gíîic


	)

35 
	#mul_div_32
 
mul_div_32_gíîic


	)

43 
ölöe
 
uöt32
 
	$msb_ödex_32
 ( 
uöt32
 
num
 )

45 
uöt32
 
msb
;

47 
msb
 = 0;

49 i‡–
num
 >(1<<16ËË{ 
msb
 += 16;Çum >>= 16; }

50 i‡–
num
 >(1<<8ËË{ 
msb
 += 8;Çum >>= 8; }

51 i‡–
num
 >(1<<4ËË{ 
msb
 += 4;Çum >>= 4; }

52 i‡–
num
 >(1<<2ËË{ 
msb
 += 2;Çum >>= 2; }

53 i‡–
num
 >(1<<1ËË{ 
msb
 += 1; }

55  
msb
;

56 
	}
}

59 
ölöe
 
	$msb_ödex_64
 ( 
uöt64
 
num
 )

61 
msb
;

63 
msb
 = 0;

65 i‡–
num
 >(1ULL<<32ËË{ 
msb
 += 32;Çum >>= 32; }

66 i‡–
num
 >(1<<16ËË{ 
msb
 += 16;Çum >>= 16; }

67 i‡–
num
 >(1<<8ËË{ 
msb
 += 8;Çum >>= 8; }

68 i‡–
num
 >(1<<4ËË{ 
msb
 += 4;Çum >>= 4; }

69 i‡–
num
 >(1<<2ËË{ 
msb
 += 2;Çum >>= 2; }

70 i‡–
num
 >(1<<1ËË{ 
msb
 += 1; }

72  
msb
;

73 
	}
}

76 
ölöe
 
	$msb_ödex_gíîic
 ( 
num
 )

78 
hÆf
;

79 
i
, 
msb
;

81 
msb
 = 0;

82  
i
 = () * 8 / 2; i > 0; i >>= 1 )

84 
hÆf
 = ( (Ë1 ) << 
i
;

85 i‡–
num
 >
hÆf
 )

87 
num
 >>
i
;

88 
msb
 +
i
;

91  
msb
;

92 
	}
}

96 
	töt_n
;

98 
ölöe
 
	$msb_ödex_öt_n
 ( 
öt_n
 
num
 )

100 
öt_n
 
hÆf
;

101 
i
, 
msb
;

103 
msb
 = 0;

104  
i
 = (
öt_n
) * 8 / 2; i > 0; i >>= 1 )

106 
hÆf
 = ( (
öt_n
Ë1 ) << 
i
;

107 i‡–
num
 >
hÆf
 )

109 
num
 >>
i
;

110 
msb
 +
i
;

113  
msb
;

114 
	}
}

	@include/types/errno.h

2 #¥agm®
⁄˚


4 
	#EXIT_SUCCESS
 0

	)

5 
	#EXIT_FAILURE
 -1

	)

9 
	mERESERVED
 = 1,

12 
	mE2BIG
 ,

13 
	mEACCES
 ,

14 
	mEADDRINUSE
 ,

15 
	mEADDRNOTAVAIL
 ,

16 
	mEAFNOSUPPORT
 ,

17 
	mEAGAIN
 ,

18 
	mEALREADY
 ,

19 
	mEBADF
 ,

20 
	mEBADMSG
 ,

21 
	mEBUSY
 ,

22 
	mECANCELED
 ,

23 
	mECHILD
 ,

24 
	mECONNABORTED
 ,

25 
	mECONNREFUSED
 ,

26 
	mECONNRESET
 ,

27 
	mEDEADLK
 ,

28 
	mEDESTADDRREQ
 ,

29 
	mEDOM
 ,

30 
	mEDQUOT
 ,

31 
	mEEXIST
 ,

32 
	mEFAULT
 ,

33 
	mEFBIG
 ,

34 
	mEHOSTUNREACH
 ,

35 
	mEIDRM
 ,

36 
	mEILSEQ
 ,

37 
	mEINPROGRESS
 ,

38 
	mEINTR
 ,

39 
	mEINVAL
 ,

40 
	mEIO
 ,

41 
	mEISCONN
 ,

42 
	mEISDIR
 ,

43 
	mELOOP
 ,

44 
	mEMFILE
 ,

45 
	mEMLINK
 ,

46 
	mEMSGSIZE
 ,

47 
	mEMULTIHOP
 ,

48 
	mENAMETOOLONG
 ,

49 
	mENETDOWN
 ,

50 
	mENETRESET
 ,

51 
	mENETUNREACH
 ,

52 
	mENFILE
 ,

53 
	mENOBUFS
 ,

54 
	mENODATA
 ,

55 
	mENODEV
 ,

56 
	mENOENT
 ,

57 
	mENOEXEC
 ,

58 
	mENOLCK
 ,

59 
	mENOLINK
 ,

60 
	mENOMEM
 ,

61 
	mENOMSG
 ,

62 
	mENOPROTOOPT
 ,

63 
	mENOSPC
 ,

64 
	mENOSR
 ,

65 
	mENOSTR
 ,

66 
	mENOSYS
 ,

67 
	mENOTCONN
 ,

68 
	mENOTDIR
 ,

69 
	mENOTEMPTY
 ,

70 
	mENOTSOCK
 ,

71 
	mENOTSUP
 ,

72 
	mENOTTY
 ,

73 
	mENXIO
 ,

74 
	mEOPNOTSUPP
 ,

75 
	mEOVERFLOW
 ,

76 
	mEPERM
 ,

77 
	mEPIPE
 ,

78 
	mEPROTO
 ,

79 
	mEPROTONOSUPPORT
 ,

80 
	mEPROTOTYPE
 ,

81 
	mERANGE
 ,

82 
	mEROFS
 ,

83 
	mESPIPE
 ,

84 
	mESRCH
 ,

85 
	mESTALE
 ,

86 
	mETIME
 ,

87 
	mETIMEDOUT
 ,

88 
	mETXTBSY
 ,

89 
	mEWOULDBLOCK
 ,

90 
	mEXDEV
 ,

	@include/types/io.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/basic.h
>

7 
	#ESCAPE
 27

	)

8 
	#ESC_COLOR_RED
 31

	)

9 
	#ESC_COLOR_GREEN
 32

	)

10 
	#ESC_COLOR_WHITE
 37

	)

11 
	#ESC_COLOR_DEFAULT
 39

	)

17 
	#CONSOLE_PRINT
 ( 1 << 1 )

	)

18 
	#CONSOLE_RAW
 ( 1 << 2 )

	)

19 
	#CONSOLE_ASCII
 ( 1 << 3 )

	)

20 
	#CONSOLE_MAXLEN
 200

	)

24 
	#O_CREAT
 ( 1 << 0 )

	)

25 
	#O_EXCL
 ( 1 << 1 )

	)

26 
	#O_NONBLOCK
 ( 1 << 2 )

	)

27 
	#O_RDONLY
 ( 1 << 3 )

	)

28 
	#O_WRONLY
 ( 1 << 4 )

	)

29 
	#O_RDWR
 ( 
O_RDONLY
 | 
O_WRONLY
 )

	)

31 
	#DEV_OPEN
 ( 1 << 28 )

	)

32 
	#DEV_TYPE_SHARED
 ( 1 << 28 )

	)

33 
	#DEV_TYPE_NOTSHARED
 ( 1 << 29 )

	)

34 
	#DEV_TYPE_CONSOLE
 ( 1 << 30 )

	)

37 
	#PATH_MAX
 255

	)

38 
	#NAME_MAX
 255

	)

40 
	#DEV_NAME_LEN
 32

	)

44 
	#DEV_IN_READY
 ( 1 << 0 )

	)

45 
	#DEV_OUT_READY
 ( 1 << 1 )

	)

46 
	#DEV_INT_RQ
 ( 1 << 2 )

	)

54 
	spﬁlfd
 {

55 
	mfd
;

56 
	mevíts
;

57 
	mªvíts
;

60 
	tnfds_t
;

64 
	#POLLIN
 (1<<0)

	)

67 
	#POLLRDNORM
 (1<<1)

	)

70 
	#POLLRDBAND
 (1<<2)

	)

73 
	#POLLPRI
 (1<<3)

	)

76 
	#POLLOUT
 (1<<4)

	)

79 
	#POLLWRNORM
 (1<<5)

	)

82 
	#POLLWRBAND
 (1<<6)

	)

85 
	#POLLERR
 (1<<7)

	)

88 
	#POLLHUP
 (1<<8)

	)

91 
	#POLLNVAL
 (1<<9)

	)

96 
pﬁl
(
pﬁlfd
 [], 
nfds_t
, );

137 
Up⁄
 
suc˚ssful
 
	gcom∂ëi⁄
, 
	$pﬁl
(Ë
shÆl
  
a
 
n⁄
-
√g©ive
 
vÆue
. 
A
 
posôive


138 
vÆue
 
ödiˇãs
 
the
 
tŸÆ
 
numbî
 
of
 
fûe
 
des¸ùt‹s
 
th©
 
have
 
bìn
 
£À˘ed


139 (
th©
 
is
, 
fûe
 
des¸ùt‹s
 
which
 
the
 
ªvíts
 
membî
 i†
n⁄
-
zîo
). 
A
 
vÆue
 
of


140 0 
ödiˇãs
 
th©
 
the
 
ˇŒ
 
timed
 
out
 
™d
 
no
 
fûe
 
des¸ùt‹s
 
have
 
bìn
 
£À˘ed
.

141 
Up⁄
 
Áûuª
, 
	$pﬁl
(Ë
shÆl
  -1 
™d
 
£t
 
î∫o
 
to
 
ödiˇã
 
the
 
îr‹
.

143 
ERRORS


145 
The
 
	$pﬁl
(Ë
fun˘i⁄
 
shÆl
 
Áû
 :

147 [
EAGAIN
]

148 
The
 
Æloˇti⁄
 
of
 
öã∫Æ
 
d©a
 
°ru˘uªs
 
Áûed
 
but
 
a
 
sub£quít
 
ªque°
 
may


149 
suc˚ed
.

150 [
EINTR
]

151 
A
 
sig«l
 
was
 
ˇught
 
durög
 
	`pﬁl
().

152 [
EINVAL
]

153 
The
 
nfds
 
¨gumít
 
is
 
gª©î
 
th™
 {
OPEN_MAX
}

155 
EXAMPLES


157 
	~<°r›ts.h
>

158 
	~<pﬁl.h
>

160 
pﬁlfd
 
fds
[2];

161 
	gtimeout_m£cs
 = 500;

162 
	gªt
;

163 
	gi
;

167 
	gfds
[0].
	gfd
 = 
›í
("/dev/dev0", ...);

168 
	gfds
[1].
	gfd
 = 
›í
("/dev/dev1", ...);

169 
	gfds
[0].
	gevíts
 = 
POLLOUT
 | 
POLLWRBAND
;

170 
	gfds
[1].
	gevíts
 = 
POLLOUT
 | 
POLLWRBAND
;

173 
	gªt
 = 
pﬁl
(
fds
, 2, 
timeout_m£cs
);

176 i‡(
	gªt
 > 0) {

178 
	gi
=0; i<2; i++) {

179 i‡(
	gfds
[
i
].
	gªvíts
 & 
	gPOLLWRBAND
) {

183 i‡(
	gfds
[
i
].
	gªvíts
 & 
	gPOLLOUT
) {

187 i‡(
	gfds
[
i
].
	gªvíts
 & 
	gPOLLHUP
) {

	@include/types/pthread.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/basic.h
>

7 
des¸ùt‹_t
 
	t±hªad_t
;

8 
±hªad_t
 
	tpid_t
;

11 
	ssched_∑øm


13 
	msched_¥i‹ôy
;

18 
	tsched_∑øm_t
;

20 
	#SCHED_FIFO
 0

	)

21 
	#SCHED_RR
 1

	)

22 
	#SCHED_NUM
 2

	)

24 
	#THREAD_MIN_PRIO
 0

	)

25 
	#THREAD_MAX_PRIO
 (
PRIO_LEVELS
 - 1)

	)

26 
	#THREAD_DEF_PRIO
 
THR_DEFAULT_PRIO


	)

29 
	s±hªad_©å


31 
uöt
 
	mÊags
;

32 
	msched_pﬁicy
;

33 
sched_∑øm_t
 
	msched_∑øms
;

35 *
	m°ackaddr
;

36 
size_t
 
	m°acksize
;

38 
	t±hªad_©å_t
;

41 
	#PTHREAD_CREATE_DETACHED
 (1<<0)

	)

42 
	#PTHREAD_CREATE_JOINABLE
 (1<<1)

	)

43 
	#PTHREAD_EXPLICIT_SCHED
 (1<<2)

	)

44 
	#PTHREAD_INHERIT_SCHED
 (1<<3)

	)

45 
	#PTHREAD_SCOPE_SYSTEM
 (1<<4)

	)

46 
	#PTHREAD_SCOPE_PROCESS
 (1<<5)

	)

49 
des¸ùt‹_t
 
	t±hªad_muãx_t
;

52 
uöt
 
	t±hªad_muãx©å_t
;

53 
	#PTHREAD_PROCESS_SHARED
 (1<<6)

	)

54 
	#PTHREAD_PROCESS_PRIVATE
 (1<<7)

	)

57 
des¸ùt‹_t
 
	t±hªad_c⁄d_t
;

60 
uöt
 
	t±hªad_c⁄d©å_t
;

63 
des¸ùt‹_t
 
	t£m_t
;

66 
des¸ùt‹_t
 
	tmqd_t
;

69 
	smq_©å


71 
	mmq_Êags
;

73 
	mmq_maxmsg
;

75 
	mmq_msgsize
;

77 
	mmq_curmsgs
;

80 
	tmq_©å_t
;

82 
	#MQ_PRIO_MAX
 255

	)

	@include/types/signal.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/basic.h
>

5 
	~<ty≥s/±hªad.h
>

8 
	#SIGHUP
 1

	)

9 
	#SIGINT
 2

	)

10 
	#SIGQUIT
 3

	)

11 
	#SIGILL
 4

	)

12 
	#SIGTRAP
 5

	)

13 
	#SIGABRT
 6

	)

14 
	#SIGIOT
 6

	)

15 
	#SIGBUS
 7

	)

16 
	#SIGFPE
 8

	)

17 
	#SIGKILL
 9

	)

18 
	#SIGUSR1
 10

	)

19 
	#SIGSEGV
 11

	)

20 
	#SIGUSR2
 12

	)

21 
	#SIGPIPE
 13

	)

22 
	#SIGALRM
 14

	)

23 
	#SIGTERM
 15

	)

24 
	#SIGSTKFLT
 16

	)

25 
	#SIGCLD
 
SIGCHLD


	)

26 
	#SIGCHLD
 17

	)

27 
	#SIGCONT
 18

	)

28 
	#SIGSTOP
 19

	)

29 
	#SIGTSTP
 20

	)

30 
	#SIGTTIN
 21

	)

31 
	#SIGTTOU
 22

	)

32 
	#SIGURG
 23

	)

33 
	#SIGXCPU
 24

	)

34 
	#SIGXFSZ
 25

	)

35 
	#SIGVTALRM
 26

	)

36 
	#SIGPROF
 27

	)

37 
	#SIGWINCH
 28

	)

38 
	#SIGPOLL
 
SIGIO


	)

39 
	#SIGIO
 29

	)

40 
	#SIGPWR
 30

	)

41 
	#SIGSYS
 31

	)

42 
	#SIGRTMIN
 32

	)

43 
	#SIGRTMAX
 63

	)

44 
	#SIGMAX
 63

	)

49 
	#SIGSET_ELEM
(
SIG
Ë–SIG / (8*(
uöt
)Ë)

	)

50 
	#SIGSET_POS
(
SIG
Ë–SIG % (8*(
uöt
)Ë)

	)

51 
	#SIGSET_ELEMS
 ( 
	`SIGSET_ELEM
 ( 
SIGMAX
 ) + 1 )

	)

53 
	ssig£t


55 
uöt
 
	m£t
 [
SIGSET_ELEMS
];

57 
	tsig£t_t
;

60 
	usigvÆ


62 
	msivÆ_öt
;

65 *
	msivÆ_±r
;

68 
	tsigvÆ_t
;

71 
	ssigöfo


73 
	msi_signo
;

76 
	msi_code
;

79 
	msi_î∫o
;

82 
pid_t
 
	msi_pid
;

85 
sigvÆ_t
 
	msi_vÆue
;

96 
	tsigöfo_t
;

100 
	mSI_USER
 = 1,

101 
	mSI_KERNEL
 = 2,

102 
	mSI_QUEUE
 = 4,

103 
	mSI_TIMER
 = 8,

104 
	mSI_MESGQ
 = 16,

108 
	ssiga˘i⁄


111 (*
	mß_h™dÀr
) ();

115 (*
	mß_siga˘i⁄
Ë(
	msigöfo_t
 *);

122 
	m__siga˘i⁄_h™dÀr
;

123 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

124 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

126 
sig£t_t
 
	mß_mask
;

130 
	mß_Êags
;

133 
	tsiga˘i⁄_t
;

136 
	#SIG_ERR
 (*Ë-1

	)

137 
	#SIG_DFL
 (*Ë0

	)

138 
	#SIG_IGN
 (*Ë1

	)

139 
	#SIG_HOLD
 (*Ë2

	)

142 
	#SA_SIGINFO
 4

	)

158 
	#SIG_BLOCK
 0

	)

159 
	#SIG_UNBLOCK
 1

	)

160 
	#SIG_SETMASK
 2

	)

163 
	ssigevít


165 
	msigev_nŸify
;

166 
	msigev_signo
;

167 
sigvÆ_t
 
	msigev_vÆue
;

170 
	s_sigev_thªad_


172 (*
	m_fun˘i⁄
Ë–
	msigvÆ_t
 );

175 
±hªad_©å_t
 *
	m_©åibuã
;

179 
	m_sigev_thªad
;

181 
pid_t
 
	m_tid
;

183 
	m_sigev_un
;

184 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

185 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

186 
	#sigev_nŸify_thªad_id
 
_sigev_un
.
_tid
;

	)

188 
	tsigevít_t
;

192 
	mSIGEV_NONE
 = 1,

194 
	mSIGEV_SIGNAL
,

196 
	mSIGEV_THREAD
,

198 
	mSIGEV_THREAD_ID


202 
ölöe
 
	$sigem±y£t
 ( 
sig£t_t
 *
£t
 )

204 i‡–!
£t
 )

205  
FALSE
;

207 
i
;

208  
i
 = 0; i < 
SIGSET_ELEMS
; i++ )

209 
£t
->£t[
i
] = 0;

212 
	}
}

213 
ölöe
 
	$sigfûl£t
 ( 
sig£t_t
 *
£t
 )

215 i‡–!
£t
 )

216  
FALSE
;

218 
i
;

219  
i
 = 0; i < 
SIGSET_ELEMS
; i++ )

220 
£t
->£t[
i
] = (
uöt
) -1;

223 
	}
}

224 
ölöe
 
	$sigadd£t
 ( 
sig£t_t
 *
£t
, 
sig
 )

226 i‡–!
£t
 || 
sig
 < 1 || sig > 
SIGMAX
 )

227  
FALSE
;

229 
£t
->£t[
	`SIGSET_ELEM
(
sig
)] |1 << 
	`SIGSET_POS
(sig);

232 
	}
}

233 
ölöe
 
	$sigdñ£t
 ( 
sig£t_t
 *
£t
, 
sig
 )

235 i‡–!
£t
 || 
sig
 < 1 || sig > 
SIGMAX
 )

236  
FALSE
;

238 
£t
->£t[
	`SIGSET_ELEM
(
sig
)] &~(1 << 
	`SIGSET_POS
(sig));

241 
	}
}

246 
ölöe
 
	$sigã°£t
 ( 
sig£t_t
 *
£t
, 
sig
 )

248 i‡–!
£t
 || 
sig
 < 1 || sig > 
SIGMAX
 )

249  
FALSE
;

251 i‡–
£t
->£t[
	`SIGSET_ELEM
(
sig
)] & (1 << 
	`SIGSET_POS
(sig)) )

252  
TRUE
;

254  
FALSE
;

255 
	}
}

258 
ölöe
 
	$sigadd£ts
 ( 
sig£t_t
 *
£t
, sig£t_à*
add
 )

260 
i
;

261  
i
 = 0; i < 
SIGSET_ELEMS
; i++ )

262 
£t
->£t[
i
] |
add
->set[i];

265 
	}
}

268 
ölöe
 
	$sigdñ£ts
 ( 
sig£t_t
 *
£t
, sig£t_à*
dñ
 )

270 
i
;

271  
i
 = 0; i < 
SIGSET_ELEMS
; i++ )

272 
£t
->£t[
i
] &~
dñ
->set[i];

275 
	}
}

278 
ölöe
 
	$sigã°em±y£t
 ( 
sig£t_t
 *
£t
 )

280 
i
;

281 
uöt
 
e£t
 = 0;

283  
i
 = 0; i < 
SIGSET_ELEMS
; i++ )

284 
e£t
 +
£t
->£t[
i
];

286  
e£t
 == 0;

287 
	}
}

	@include/types/time.h

2 #¥agm®
⁄˚


4 
	~<ty≥s/basic.h
>

8 
	ttime_t
;

10 
	stime•ec
 {

11 
time_t
 
	mtv_£c
;

12 
	mtv_n£c
;

14 
	ttime•ec_t
;

16 
	sôimî•ec
 {

17 
time•ec_t
 
	mô_öãrvÆ
;

18 
time•ec_t
 
	mô_vÆue
;

20 
	tôimî•ec_t
;

22 
uöt
 
	t˛ockid_t
;

25 
	#CLOCK_REALTIME
 1

	)

26 
	#CLOCK_MONOTONIC
 2

	)

28 
des¸ùt‹_t
 
	ttimî_t
;

30 
	#TIMER_ABSTIME
 1

	)

32 
	#TIME_IS_SET
(
T
Ë–(T)->
tv_£c
 + (T)->
tv_n£c
 !0 )

	)

33 
	#TIME_RESET
(
T
Ëdÿ{ (T)->
tv_£c
 = (T)->
tv_n£c
 = 0; } 0)

	)

43 
ölöe
 
	$time_add
 ( 
time•ec_t
 *
a
,Åime•ec_à*
b
 )

45 
a
->
tv_£c
 =á->tv_£¯+ 
b
->tv_sec;

46 
a
->
tv_n£c
 =á->tv_n£¯+ 
b
->tv_nsec;

48 i‡–
a
->
tv_n£c
 > 1000000000L )

50 
a
->
tv_£c
++;

51 
a
->
tv_n£c
 -= 1000000000L;

53 
	}
}

61 
ölöe
 
	$time_sub
 ( 
time•ec_t
 *
a
,Åime•ec_à*
b
 )

63 i‡–
a
->
tv_n£c
 >
b
->tv_nsec )

65 
a
->
tv_£c
 -
b
->tv_sec;

66 
a
->
tv_n£c
 -
b
->tv_nsec;

69 
a
->
tv_£c
 -
b
->tv_sec + 1;

70 
a
->
tv_n£c
 +1000000000L - 
b
->tv_nsec;

72 
	}
}

80 
ölöe
 
	$time_cmp
 ( 
time•ec_t
 *
a
,Åime•ec_à*
b
 )

82 i‡–
a
->
tv_£c
 < 
b
->tv_sec )

85 i‡–
a
->
tv_£c
 > 
b
->tv_sec )

90 i‡–
a
->
tv_n£c
 < 
b
->tv_nsec )

93 i‡–
a
->
tv_n£c
 > 
b
->tv_nsec )

98 
	}
}

	@kernel/device.c

2 
	#_K_DEVICE_C_


	)

4 
	~"devi˚.h
"

6 
	~<kî√l/î∫o.h
>

7 
	~"mem‹y.h
"

8 
	~<¨ch/öãºu±.h
>

9 
	~<lib/°rög.h
>

11 
li°_t
 
	gdevi˚s
;

13 
k_devi˚_öãºu±_h™dÀr
 ( 
öum
, *
devi˚
 );

16 
	$kdevi˚_£t_öôül_°dout
 ()

18 
kdevi˚_t
 
k_öôül_°dout
;

19 
devi˚_t
 
K_INITIAL_STDOUT
;

20 *
k_°dout
;

22 
k_öôül_°dout
.
dev
 = 
K_INITIAL_STDOUT
;

23 
k_öôül_°dout
.
dev
.
	`öô
 ( 0, 
NULL
, &k_initial_stdout.dev );

24 
k_°dout
 = &
k_öôül_°dout
;

25 
	}
}

28 
	$k_devi˚s_öô
 ()

30 
devi˚_t
 
DEVICES_DEV
;

31 
devi˚_t
 *
dev
[] = { 
DEVICES_DEV_PTRS
, 
NULL
 };

32 
kdevi˚_t
 *
kdev
;

33 
ôî
;

35 
	`li°_öô
 ( &
devi˚s
 );

37  
ôî
 = 0; 
dev
[ôî] !
NULL
; iter++ )

39 
kdev
 = 
	`k_devi˚_add
 ( 
dev
[
ôî
] );

40 
	`k_devi˚_öô
 ( 
kdev
, 0, 
NULL
, NULL );

44 
	}
}

47 
kdevi˚_t
 *
	$k_devi˚_add
 ( 
devi˚_t
 *
dev
 )

49 
kdevi˚_t
 *
kdev
;

51 
	`ASSERT
 ( 
dev
 );

53 
kdev
 = 
	`kmÆloc
 (  (
kdevi˚_t
) );

54 
	`ASSERT
 ( 
kdev
 );

56 
kdev
->
dev
 = *dev;

57 
kdev
->
id
 = 
	`k_√w_id
 ();

58 
kdev
->
Êags
 = 0;

60 
	`li°_≠≥nd
 ( &
devi˚s
, 
kdev
, &kdev->
li°
 );

62  
kdev
;

63 
	}
}

66 
	$k_devi˚_öô
 ( 
kdevi˚_t
 *
kdev
, 
Êags
, *
∑øms
, *
ˇŒback
 )

68 
ªtvÆ
 = 0;

70 
	`ASSERT
 ( 
kdev
 );

72 i‡–
Êags
 )

73 
kdev
->
dev
.
Êags
 = flags;

75 i‡–
∑øms
 )

76 
kdev
->
dev
.
∑øms
 =Öarams;

78 
	`li°_öô
 ( &
kdev
->
des¸ùt‹s
 );

80 i‡–
kdev
->
dev
.
öô
 )

81 
ªtvÆ
 = 
kdev
->
dev
.
	`öô
 ( 
Êags
, 
∑øms
, &kdev->dev );

83 i‡–
ªtvÆ
 =
EXIT_SUCCESS
 && 
kdev
->
dev
.
úq_h™dÀr
 )

85 (Ë
	`¨ch_ªgi°î_öãºu±_h™dÀr
 ( 
kdev
->
dev
.
úq_num
,

86 
k_devi˚_öãºu±_h™dÀr
,

87 
kdev
 );

88 
	`¨ch_úq_íabÀ
 ( 
kdev
->
dev
.
úq_num
 );

91 i‡–
ˇŒback
 )

92 
kdev
->
dev
.
ˇŒback
 = callback;

94  
ªtvÆ
;

95 
	}
}

98 
	$k_devi˚_ªmove
 ( 
kdevi˚_t
 *
kdev
 )

100 #ifde‡
DEBUG


101 
kdevi˚_t
 *
ã°
;

103 
	`ASSERT
 ( 
kdev
 );

105 i‡–
kdev
->
dev
.
úq_num
 != -1 )

106 
	`¨ch_úq_dißbÀ
 ( 
kdev
->
dev
.
úq_num
 );

108 i‡–
kdev
->
dev
.
úq_h™dÀr
 )

109 
	`¨ch_uƒegi°î_öãºu±_h™dÀr
 ( 
kdev
->
dev
.
úq_num
,

110 
kdev
->
dev
.
úq_h™dÀr
,

111 &
kdev
->
dev
 );

112 i‡–
kdev
->
dev
.
de°roy
 )

113 
kdev
->
dev
.
	`de°roy
 ( kdev->dev.
Êags
, kdev->dev.
∑øms
,

114 &
kdev
->
dev
 );

115 #ifde‡
DEBUG


116 
ã°
 = 
	`li°_föd_™d_ªmove
 ( &
devi˚s
, &
kdev
->
li°
 );

117 
	`ASSERT
 ( 
ã°
 =
kdev
 );

119 (Ë
	`li°_ªmove
 ( &
devi˚s
, 0, &
kdev
->
li°
 );

122 
	`k_‰ì_id
 ( 
kdev
->
id
 );

124 
	`k‰ì
 ( 
kdev
 );

127 
	}
}

130 
	$k_devi˚_£nd
 ( *
d©a
, 
size_t
 
size
, 
Êags
, 
kdevi˚_t
 *
kdev
 )

132 
ªtvÆ
;

134 i‡–
kdev
->
dev
.
£nd
 )

135 
ªtvÆ
 = 
kdev
->
dev
.
	`£nd
 ( 
d©a
, 
size
, 
Êags
, &kdev->dev );

137 
ªtvÆ
 = 
EXIT_FAILURE
;

139  
ªtvÆ
;

140 
	}
}

143 
	$k_devi˚_ªcv
 ( *
d©a
, 
size_t
 
size
, 
Êags
, 
kdevi˚_t
 *
kdev
 )

145 
ªtvÆ
;

147 i‡–
kdev
->
dev
.
ªcv
 )

148 
ªtvÆ
 = 
kdev
->
dev
.
	`ªcv
 ( 
d©a
, 
size
, 
Êags
, &kdev->dev );

150 
ªtvÆ
 = 
EXIT_FAILURE
;

152  
ªtvÆ
;

153 
	}
}

156 
kdevi˚_t
 *
	$k_devi˚_›í
 ( *
«me
, 
Êags
 )

158 
kdevi˚_t
 *
kdev
;

160 
kdev
 = 
	`li°_gë
 ( &
devi˚s
, 
FIRST
 );

161  
kdev
 )

163 i‡–!
	`°rcmp
 ( 
«me
, 
kdev
->
dev
.
dev_«me
 ) )

165 i‡–(
kdev
->
dev
.
Êags
 & 
DEV_TYPE_NOTSHARED
) &&

166 (
kdev
->
dev
.
Êags
 & 
DEV_OPEN
) )

167  
NULL
;

171 
kdev
->
Êags
 |
DEV_OPEN
 | flags;

172 
kdev
->
ªf_˙t
++;

174  
kdev
;

177 
kdev
 = 
	`li°_gë_√xt
 ( &kdev->
li°
 );

180  
NULL
;

181 
	}
}

184 
	$k_devi˚_˛o£
 ( 
kdevi˚_t
 *
kdev
 )

186 
kdev
->
ªf_˙t
--;

187 i‡–!
kdev
->
ªf_˙t
 )

188 
kdev
->
Êags
 &~
DEV_OPEN
;

191 
	}
}

194 
	$k_devi˚_öãºu±_h™dÀr
 ( 
öum
, *
devi˚
 )

196 
kdevi˚_t
 *
kdev
 = 
devi˚
;

197 
°©us
 = 
EXIT_SUCCESS
;

199 
	`ASSERT
 ( 
öum
 && 
devi˚
 && 
kdev
->
dev
.
úq_num
 == inum );

202 i‡–
kdev
->
dev
.
úq_h™dÀr
 )

203 
°©us
 = 
kdev
->
dev
.
	`úq_h™dÀr
 ( 
öum
, &kdev->dev );

205 i‡–
°©us
 ) {}

206 
	}
}

208 
	$k_devi˚_°©us
 ( 
Êags
, 
kdevi˚_t
 *
kdev
 )

210 
	`ASSERT
 ( 
kdev
 );

212 i‡–
kdev
->
dev
.
°©us
 )

213  
kdev
->
dev
.
	`°©us
 ( 
Êags
, &kdev->dev );

216 
	}
}

219 
	$do_nŸhög
 ()

222 
	}
}

224 
devi˚_t
 
	gdev_nuŒ
 = (device_t)

226 .
dev_«me
 = "dev_null",

228 .
	gúq_num
 = -1,

229 .
	gúq_h™dÀr
 = 
NULL
,

231 .
	göô
 = 
NULL
,

232 .
	gde°roy
 = 
NULL
,

233 .
	g£nd
 = 
do_nŸhög
,

234 .
	gªcv
 = 
do_nŸhög
,

235 .
	g°©us
 = 
do_nŸhög
,

237 .
	gÊags
 = 
DEV_TYPE_SHARED
,

238 .
	g∑øms
 = 
NULL
,

243 
	$sys__›í
 ( *
∑th«me
, 
Êags
, 
mode_t
 
mode
, 
des¸ùt‹_t
 *
desc
 )

245 
kdevi˚_t
 *
kdev
;

246 
kobje˘_t
 *
kobj
;

248 
	`SYS_ENTRY
();

250 
	`ASSERT_ERRNO_AND_EXIT
 ( 
∑th«me
, 
EINVAL
 );

251 
	`ASSERT_ERRNO_AND_EXIT
 ( 
desc
, 
EINVAL
 );

253 
kdev
 = 
	`k_devi˚_›í
 ( 
∑th«me
, 
Êags
 );

255 i‡–!
kdev
 )

256  
EXIT_FAILURE
;

258 
kobj
 = 
	`kmÆloc_kobje˘
 ( 0 );

259 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
ENOMEM
 );

261 
kobj
->
kobje˘
 = 
kdev
;

262 
kobj
->
Êags
 = flags;

264 
desc
->
±r
 = 
kobj
;

265 
desc
->
id
 = 
kdev
->id;

268 
	`li°_≠≥nd
 ( &
kdev
->
des¸ùt‹s
, 
kobj
, &kobj->
•ec
 );

270 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

271 
	}
}

273 
	$sys__˛o£
 ( 
des¸ùt‹_t
 *
desc
 )

275 
kdevi˚_t
 *
kdev
;

276 
kobje˘_t
 *
kobj
;

278 
	`SYS_ENTRY
();

280 
	`ASSERT_ERRNO_AND_EXIT
 ( 
desc
, 
EINVAL
 );

282 
kobj
 = 
desc
->
±r
;

283 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

284 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

285 
EINVAL
 );

286 
kdev
 = 
kobj
->
kobje˘
;

287 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kdev
 && kdev->
id
 =
desc
->id, 
EINVAL
 );

289 
	`k‰ì_kobje˘
 ( 
kobj
 );

292 
	`li°_ªmove
 ( &
kdev
->
des¸ùt‹s
, 0, &
kobj
->
•ec
 );

294 
	`k_devi˚_˛o£
 ( 
kdev
 );

296 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

297 
	}
}

299 
ªad_wrôe
 ( 
des¸ùt‹_t
 *
desc
, *
buf„r
, 
size_t
 
size
, 
›
 );

301 
	$sys__ªad
 ( 
des¸ùt‹_t
 *
desc
, *
buf„r
, 
size_t
 
size
 )

303  
	`ªad_wrôe
 ( 
desc
, 
buf„r
, 
size
, 
TRUE
 );

304 
	}
}

305 
	$sys__wrôe
 ( 
des¸ùt‹_t
 *
desc
, *
buf„r
, 
size_t
 
size
 )

307  
	`ªad_wrôe
 ( 
desc
, 
buf„r
, 
size
, 
FALSE
 );

308 
	}
}

310 
	$ªad_wrôe
 ( 
des¸ùt‹_t
 *
desc
, *
buf„r
, 
size_t
 
size
, 
›
 )

312 
kdevi˚_t
 *
kdev
;

313 
kobje˘_t
 *
kobj
;

314 
ªtvÆ
;

316 
	`SYS_ENTRY
();

318 
	`ASSERT_ERRNO_AND_EXIT
 ( 
desc
 && 
buf„r
 && 
size
 > 0, 
EINVAL
 );

320 
kobj
 = 
desc
->
±r
;

321 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

322 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

323 
EINVAL
 );

324 
kdev
 = 
kobj
->
kobje˘
;

325 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kdev
 && kdev->
id
 =
desc
->id, 
EINVAL
 );

329 i‡–
›
 )

330 
ªtvÆ
 = 
	`k_devi˚_ªcv
 ( 
buf„r
, 
size
, 
kobj
->
Êags
, 
kdev
 );

332 
ªtvÆ
 = 
	`k_devi˚_£nd
 ( 
buf„r
, 
size
, 
kobj
->
Êags
, 
kdev
 );

334 i‡–
ªtvÆ
 >= 0 )

335 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, 
ªtvÆ
 );

337 
	`SYS_EXIT
 ( -
ªtvÆ
, 
EXIT_FAILURE
 );

338 
	}
}

340 
	$sys__devi˚_°©us
 ( 
des¸ùt‹_t
 *
desc
, 
Êags
 )

342 
kdevi˚_t
 *
kdev
;

343 
kobje˘_t
 *
kobj
;

344 
°©us
, 
rÊags
 = 0;

346 
	`SYS_ENTRY
();

348 
	`ASSERT_ERRNO_AND_EXIT
 ( 
desc
, 
EINVAL
 );

350 
kobj
 = 
desc
->
±r
;

351 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

352 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

353 
EINVAL
 );

354 
kdev
 = 
kobj
->
kobje˘
;

355 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kdev
 && kdev->
id
 =
desc
->id, 
EINVAL
 );

357 
°©us
 = 
	`k_devi˚_°©us
 ( 
Êags
, 
kdev
 );

360 i‡––
Êags
 & ( 
POLLIN
 | 
POLLRDNORM
 | 
POLLRDBAND
 | 
POLLPRI
 ) ) )

361 i‡––
°©us
 & 
DEV_IN_READY
 ) )

362 
rÊags
 |
POLLIN
 | 
POLLRDNORM
 | 
POLLRDBAND
 | 
POLLPRI
;

363 i‡––
Êags
 & ( 
POLLOUT
 | 
POLLWRNORM
 | 
POLLWRBAND
 | 
POLLPRI
 ) ) )

364 i‡––
°©us
 & 
DEV_OUT_READY
 ) )

365 
rÊags
 |
POLLOUT
 | 
POLLWRNORM
 | 
POLLWRBAND
 | 
POLLPRI
;

367 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, 
rÊags
 );

368 
	}
}

379 
	$sys__pﬁl
 ( 
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
timeout
,

380 
des¸ùt‹_t
 *
°d_desc
 )

382 
ch™ges
 = 0, 
i
;

383 
ªvíts
;

385 
	`SYS_ENTRY
();

387 
	`ASSERT_ERRNO_AND_EXIT
 ( 
fds
 && 
nfds
 > 0 && 
°d_desc
, 
EINVAL
 );

389  
i
 = 0; i < 
nfds
; i++ )

391 
ªvíts
 = 
	`sys__devi˚_°©us
 (

392 &
°d_desc
[
fds
[
i
].
fd
], fds[i].
evíts


394 
	`ASSERT_ERRNO_AND_EXIT
 ( 
ªvíts
 !-1, 
EINVAL
 );

396 
fds
[
i
].
ªvíts
 =Ñevents;

397 i‡–
ªvíts
 )

398 
ch™ges
++;

401 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, 
ch™ges
 );

402 
	}
}

	@kernel/device.h

2 #¥agm®
⁄˚


4 
	~<kî√l/devi˚.h
>

5 
	~<¨ch/devi˚.h
>

7 #i‚de‡
_K_DEVICE_C_


10 
	tkdevi˚_t
;

14 
	~<lib/li°.h
>

15 
	~"thªad.h
"

18 
	s_kdevi˚_t_


20 
devi˚_t
 
	mdev
;

23 
id_t
 
	mid
;

26 
	mÊags
;

29 
	mªf_˙t
;

32 
li°_h
 
	mli°
;

35 
li°_t
 
	mdes¸ùt‹s
;

38 
	tkdevi˚_t
;

43 
kdevi˚_£t_öôül_°dout
 ();

44 
k_devi˚s_öô
 ();

45 
kdevi˚_t
 *
k_devi˚_add
 ( 
devi˚_t
 *
kdev
 );

46 
k_devi˚_öô
 ( 
kdevi˚_t
 *
kdev
, 
Êags
, *
∑øms
, *
ˇŒback
 );

47 
k_devi˚_ªmove
 ( 
kdevi˚_t
 *
kdev
 );

49 
kdevi˚_t
 *
k_devi˚_›í
 ( *
«me
, 
Êags
 );

50 
k_devi˚_˛o£
 ( 
kdevi˚_t
 *
kdev
 );

52 
k_devi˚_£nd
 ( *
d©a
, 
size_t
 
size
, 
Êags
, 
kdevi˚_t
 *
kdev
 );

53 
k_devi˚_ªcv
 ( *
d©a
, 
size_t
 
size
, 
Êags
, 
kdevi˚_t
 *
kdev
 );

55 
k_devi˚_lock
 ( 
kdevi˚_t
 *
dev
, 
waô
 );

56 
k_devi˚_u∆ock
 ( 
kdevi˚_t
 *
dev
 );

	@kernel/kprint.c

2 
	#_K_PRINT_C_


	)

4 
	~<kî√l/k¥öt.h
>

6 
	~"devi˚.h
"

7 
	~<lib/°rög.h
>

9 *
	gk_°dout
;

12 
	$k¥ötf
 ( *
f‹m©
, ... )

14 
size_t
 
size
;

15 
buf„r
[
CONSOLE_MAXLEN
];

17 
	`k_devi˚_£nd
 ( "\x1b[31m", 6, 0, 
k_°dout
 );

19 
size
 = 
	`vs•rötf
 ( 
buf„r
, 
CONSOLE_MAXLEN
, &
f‹m©
 );

20 
	`k_devi˚_£nd
 ( 
buf„r
, 
size
, 0, 
k_°dout
 );

22 
	`k_devi˚_£nd
 ( "\x1b[39m", 6, 0, 
k_°dout
 );

24  
size
;

25 
	}
}

	@kernel/memory.c

2 
	#_K_MEMORY_C_


	)

4 
	~"mem‹y.h
"

6 
	~<kî√l/k¥öt.h
>

7 
	~"thªad.h
"

8 
	~<kî√l/î∫o.h
>

9 
	~<¨ch/¥o˚ss‹.h
>

10 
	~<¨ch/öãºu±.h
>

11 
	~<lib/°rög.h
>

12 
	~<lib/li°.h
>

13 
	~<ty≥s/bôs.h
>

16 
MEM_ALLOC_T
 *
	gk_mpoﬁ
 = 
NULL
;

19 
m£g_t
 *
	gm£g
 = 
NULL
;

21 
li°_t
 
	gkobje˘s
;

24 
	$k_mem‹y_öô
 ()

26 
i
;

28 
k_mpoﬁ
 = 
NULL
;

29 
m£g
 = 
	`¨ch_mem‹y_öô
 ();

32  
i
 = 0; 
m£g
[i].
ty≥
 !
MS_END
 && !
k_mpoﬁ
; i++ )

34 i‡–
m£g
[
i
].
ty≥
 =
MS_KHEAP
 )

36 
k_mpoﬁ
 = 
	`k_mem_öô
 ( 
m£g
[
i
].
°¨t
, m£g[i].
size
 );

41 
	`ASSERT
 ( 
k_mpoﬁ
 );

42 
	}
}

44 *
	$k_mem_öô
 ( *
£gmít
, 
size_t
 
size
 )

46  
	`K_MEM_INIT
 ( 
£gmít
, 
size
 );

47 
	}
}

48 *
	$kmÆloc
 ( 
size_t
 
size
 )

50  
	`KMALLOC
 ( 
size
 );

51 
	}
}

52 
	$k‰ì
 ( *
chunk
 )

54  
	`KFREE
 ( 
chunk
 );

55 
	}
}

58 *
	$kmÆloc_kobje˘
 ( 
size_t
 
obj_size
 )

60 
kobje˘_t
 *
kobj
;

62 
kobj
 = 
	`kmÆloc
 (  (
kobje˘_t
Ë+ 
obj_size
 );

63 
	`ASSERT
 ( 
kobj
 );

65 
kobj
->
Êags
 = 0;

66 
kobj
->
±r
 = 
NULL
;

68 i‡–
obj_size
 )

69 
kobj
->
kobje˘
 = kobj + 1;

71 
kobj
->
kobje˘
 = 
NULL
;

73 
	`li°_≠≥nd
 ( &
kobje˘s
, 
kobj
, &kobj->
li°
 );

75  
kobj
;

76 
	}
}

79 *
	$k‰ì_kobje˘
 ( 
kobje˘_t
 *
kobj
 )

81 
	`ASSERT
 ( 
kobj
 );

82 #i‚de‡
DEBUG


83 
	`li°_ªmove
 ( &
kobje˘s
, 0, &
kobj
->
li°
 );

85 
	`ASSERT
 ( 
	`li°_föd_™d_ªmove
 ( &
kobje˘s
, &
kobj
->
li°
 ) );

88 
	`k‰ì
 ( 
kobj
 );

90  
EXIT_SUCCESS
;

91 
	}
}

94 
	#WBITS
 ( (
w‹d_t
Ë* 8 )

	)

95 
	#ID_ELEMS
 ( (
MAX_RESOURCES
-1Ë/ 
WBITS
 + 1 )

	)

96 
	#MAX_RES
 ( 
ID_ELEMS
 * 
WBITS
 )

	)

98 
w‹d_t
 
	gidmask
[ 
ID_ELEMS
 ] = { 0 };

99 
id_t
 
	gœ°_id
 = 0;

102 
id_t
 
	$k_√w_id
 ()

104 
id_t
 
id
 = -1;

105 
uöt
 
ñem
, 
n
, 
°¨t
;

106 
w‹d_t
 
mask
;

108 
œ°_id
++;

109 i‡–
œ°_id
 =
MAX_RES
 )

110 
œ°_id
 = 1;

112 
ñem
 = 
œ°_id
 / 
WBITS
;

113 
mask
 = 
idmask
 [
ñem
] | ( ( 1 << (
œ°_id
 % 
WBITS
) ) - 1 );

116 i‡–~
mask
 )

118 
id
 = 
	`lsb_ödex
 ( ~
mask
 );

119 
	`ASSERT
 ( 
id
 != -1 );

122 
n
 = 
°¨t
 = ( 
ñem
 + 1 ) % 
ID_ELEMS
;

124 i‡–~
idmask
[
n
] )

126 
id
 = 
	`lsb_ödex
 ( ~
idmask
[
n
] );

127 
ñem
 = 
n
;

130 
n
 = (Ç + 1 ) % 
ID_ELEMS
;

132  
n
 !
°¨t
 );

135 
	`ASSERT
 ( 
id
 != -1 );

137 
idmask
 [ 
ñem
 ] |–1 << 
id
 );

138 
id
 +
ñem
 * 
WBITS
;

139 
œ°_id
 = 
id
;

141  
id
;

142 
	}
}

145 
	$k_‰ì_id
 ( 
id_t
 
id
 )

147 
	`ASSERT
 ( 
id
 > 0 && id < 
MAX_RES
 &&

148 –
idmask
 [ 
id
 / 
WBITS
 ] & ( 1 << ( id % WBITS ) ) ) );

150 
idmask
 [ 
id
 / 
WBITS
 ] &= ~ ( 1 << ( id % WBITS ) );

151 
	}
}

154 
	$k_check_id
 ( 
id_t
 
id
 )

157 
id
 < 1 || id >
MAX_RES
 ||

158 –
idmask
 [ 
id
 / 
WBITS
 ] & ( 1 << ( id % WBITS ) ) ) == 0

164 
	}
}

167 #unde‡
MAX_RES


168 #unde‡
WBITS


169 #unde‡
ID_ELEMS


172 
	$k_mem‹y_öfo
 ()

174 
i
;

176 
	`k¥ötf
 ( "Memory segments\n"

181  
i
 = 0; 
m£g
[i].
ty≥
 !
MS_END
 && i < 20; i++ )

183 
	`k¥ötf
 ( "%d\t%x\t%x\t%s\n", 
m£g
[
i
].
ty≥
, m£g[i].
size
,

184 
m£g
[
i
].
°¨t
 );

186 
	}
}

189 
	$k_mem‹y_Áu…
 ()

191 
	`LOG
 ( 
ERROR
, "Undefined fault (exception)!!!");

193 i‡–
	`¨ch_¥ev_mode
 (Ë=
KERNEL_MODE
 )

195 
	`LOG
 ( 
ERROR
, "PANIC: kernel caused GPF!");

196 
	`hÆt
 ();

200 
	`LOG
 ( 
ERROR
, "Thread caused GPF,Åerminating!");

201 
	`kthªad_exô
 ( 
	`kthªad_gë_a˘ive
(), 
NULL
, 
TRUE
 );

203 
	}
}

206 
	$sys__sysöfo
 ( *
buf„r
, 
size_t
 
buf_size
, **
∑øm
 )

208 
ußge
[] = "Usage: sysinfo [programs|threads|memory]";

209 
look_c⁄sﬁe
[] = "(sysinfoÖrinted on console)";

211 
	`SYS_ENTRY
();

213 
	`ASSERT_ERRNO_AND_EXIT
 ( 
buf„r
, 
EINVAL
 );

215 i‡–
∑øm
[1] =
NULL
 )

218 
sy°em_öfo
[];

220 i‡–
	`°æí
 ( 
sy°em_öfo
 ) > 
buf_size
 )

221 
	`SYS_EXIT
 ( 
ENOMEM
, 
EXIT_FAILURE
 );

223 
	`°r˝y
 ( 
buf„r
, 
sy°em_öfo
 );

225 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

229 i‡–
	`°rcmp
 ( "mem‹y", 
∑øm
[1] ) == 0 )

231 
	`k_mem‹y_öfo
 ();

232 i‡–
	`°æí
 ( 
look_c⁄sﬁe
 ) > 
buf_size
 )

233 
	`SYS_EXIT
 ( 
ENOMEM
, 
EXIT_FAILURE
 );

234 
	`°r˝y
 ( 
buf„r
, 
look_c⁄sﬁe
 );

235 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

238 i‡–
	`°rcmp
 ( "thªads", 
∑øm
[1] ) == 0 )

240 
	`kthªad_öfo
 ();

241 i‡–
	`°æí
 ( 
look_c⁄sﬁe
 ) > 
buf_size
 )

242 
	`SYS_EXIT
 ( 
ENOMEM
, 
EXIT_FAILURE
 );

243 
	`°r˝y
 ( 
buf„r
, 
look_c⁄sﬁe
 );

244 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

248 i‡–
	`°æí
 ( 
ußge
 ) > 
buf_size
 )

249 
	`SYS_EXIT
 ( 
ENOMEM
, 
EXIT_FAILURE
 );

250 
	`°r˝y
 ( 
buf„r
, 
ußge
 );

251 
	`SYS_EXIT
 ( 
ESRCH
, 
EXIT_FAILURE
 );

254 
	}
}

	@kernel/memory.h

2 #¥agm®
⁄˚


4 
	~<kî√l/mem‹y.h
>

7 
	~<lib/ff_sim∂e.h
>

8 
	~<lib/gma.h
>

10 #i‡
MEM_ALLOCATOR_FOR_KERNEL
 =
FIRST_FIT


12 
	#MEM_ALLOC_T
 
ffs_mpoﬁ_t


	)

13 
	#K_MEM_INIT
(
£gmít
, 
size
Ë
	`ffs_öô
 ( segmít, sizê)

	)

14 
	#KMALLOC
(
size
Ë
	`ffs_Æloc
 ( 
k_mpoﬁ
, sizê)

	)

15 
	#KFREE
(
addr
Ë
	`ffs_‰ì
 ( 
k_mpoﬁ
,ádd∏)

	)

17 #ñi‡
MEM_ALLOCATOR_FOR_KERNEL
 =
GMA


19 
	#MEM_ALLOC_T
 
gma_t


	)

20 
	#K_MEM_INIT
(
£gmít
, 
size
Ë
	`gma_öô
 ( segmít, size, 32, 0 )

	)

21 
	#KMALLOC
(
size
Ë
	`gma_Æloc
 ( 
k_mpoﬁ
, sizê)

	)

22 
	#KFREE
(
addr
Ë
	`gma_‰ì
 ( 
k_mpoﬁ
,ádd∏)

	)

26 #îr‹ 
Dy«mic
 
mem‹y
 
m™agî
 
nŸ
 
deföed
!

31 
	~<ty≥s/basic.h
>

32 
	~<lib/li°.h
>

33 
	~<≠i/¥og_öfo.h
>

34 
	~<¨ch/mem‹y.h
>

37 
MEM_ALLOC_T
 *
k_mpoﬁ
;

38 
¥og_öfo_t
 
pi
;

39 
li°_t
 
kobje˘s
;

41 
k_mem‹y_öô
 ();

42 
k_mem‹y_öfo
 ();

45 
	s_kobje˘_t_


47 *
	mkobje˘
;

49 
uöt
 
	mÊags
;

51 *
	m±r
;

54 
li°_h
 
	m•ec
;

57 
li°_h
 
	mli°
;

63 
id_t
 
k_√w_id
 ();

64 
k_‰ì_id
 ( 
id_t
 
id
 );

65 
k_check_id
 ( 
id_t
 
id
 );

67 
k_mem‹y_Áu…
 ();

69 *
kmÆloc_kobje˘
 ( 
size_t
 
obj_size
 );

70 *
k‰ì_kobje˘
 ( 
kobje˘_t
 *
kobj
 );

	@kernel/pthread.c

4 
	#_K_PTHREAD_C_


	)

5 
	#_K_SCHED_


	)

7 
	~"thªad.h
"

8 
	~"±hªad.h
"

9 
	~<kî√l/±hªad.h
>

11 
	~"mem‹y.h
"

12 
	~"sched.h
"

13 
	~<lib/°rög.h
>

14 
	~<kî√l/î∫o.h
>

26 
sys__±hªad_¸óã
 ( 
±hªad_t
 *
thªad
, 
±hªad_©å_t
 *
©å
,

27 *(*
°¨t_routöe
Ë(*), *
¨g
 )

29 
kthªad_t
 *
	gkthªad
;

30 
uöt
 
	gÊags
 = 0;

31 
	gsched_pﬁicy
 = 
SCHED_FIFO
;

32 
	gsched_¥i‹ôy
 = 
THREAD_DEF_PRIO
;

33 *
	g°ackaddr
 = 
NULL
;

34 
size_t
 
	g°acksize
 = 0;

36 
SYS_ENTRY
();

38 i‡–
	g©å
 )

40 
	gÊags
 = 
©å
->
Êags
;

41 
	gsched_pﬁicy
 = 
©å
->
sched_pﬁicy
;

42 
	gsched_¥i‹ôy
 = 
©å
->
sched_∑øms
.
sched_¥i‹ôy
;

43 
	g°ackaddr
 = 
©å
->
°ackaddr
;

44 
	g°acksize
 = 
©å
->
°acksize
;

46 
ASSERT_ERRNO_AND_EXIT
 (

47 
sched_pﬁicy
 >0 && sched_pﬁicy < 
SCHED_NUM
,

48 
ENOTSUP


50 
ASSERT_ERRNO_AND_EXIT
 (

51 
sched_¥i‹ôy
 >
THREAD_MIN_PRIO
 &&

52 
sched_¥i‹ôy
 <
THREAD_MAX_PRIO
,

53 
ENOMEM


59 
	gkthªad
 = 
kthªad_¸óã
 ( 
°¨t_routöe
, 
¨g
, 
Êags
,

60 
sched_pﬁicy
, 
sched_¥i‹ôy
,

61 
°ackaddr
, 
°acksize
 );

63 
ASSERT_ERRNO_AND_EXIT
 ( 
kthªad
, 
ENOMEM
 );

65 i‡–
	gthªad
 )

67 
	gthªad
->
	g±r
 = 
kthªad
;

68 
	gthªad
->
	gid
 = 
kthªad_gë_id
 (
kthªad
);

71 
kthªads_scheduÀ
 ();

73 
SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

80 
	$sys__±hªad_exô
 ( *
ªtvÆ
 )

82 
	`SYS_ENTRY
();

84 
	`kthªad_exô
 ( 
	`kthªad_gë_a˘ive
(), 
ªtvÆ
, 
FALSE
 );

86 
	`ASSERT
 ( 
FALSE
 );

88 
	`SYS_EXIT
 ( 
EXIT_FAILURE
, EXIT_FAILURE );

89 
	}
}

98 
	$sys__±hªad_joö
 ( 
±hªad_t
 *
thªad
, **
ªtvÆ
 )

100 
kthªad_t
 *
kthªad
;

102 
	`SYS_ENTRY
();

104 
	`ASSERT_ERRNO_AND_EXIT
 ( 
thªad
, 
ESRCH
 );

106 
kthªad
 = 
thªad
->
±r
;

108 i‡–
	`kthªad_gë_id
 (
kthªad
Ë!
thªad
->
id
 )

111 
	`SYS_EXIT
 ( 
ESRCH
, 
EXIT_FAILURE
 );

113 i‡–
	`kthªad_is_Æive
 (
kthªad
) )

115 
	`kthªad_£t_î∫o
 ( 
NULL
, 
EXIT_SUCCESS
 );

116 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
NULL
, 
EXIT_SUCCESS
 );

118 
	`kthªad_£t_¥iv©e_∑øm
 ( 
	`kthªad_gë_a˘ive
(), 
ªtvÆ
 );

120 
	`kthªad_waô_thªad
 ( 
NULL
, 
kthªad
 );

122 
	`kthªads_scheduÀ
 ();

124 
	`SYS_EXIT
 ( 
	`kthªad_gë_î∫o
(
NULL
),

125 
	`kthªad_gë_sysˇŒ_ªtvÆ
(
NULL
) );

129 
	`kthªad_cﬁÀ˘_°©us
 ( 
kthªad
, 
ªtvÆ
 );

131 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

133 
	}
}

139 
	$sys__±hªad_£lf
 ( 
±hªad_t
 *
thªad
 )

141 
	`SYS_ENTRY
();

143 
	`ASSERT_ERRNO_AND_EXIT
 ( 
thªad
, 
ESRCH
 );

145 
thªad
->
±r
 = 
	`kthªad_gë_a˘ive
 ();

146 
thªad
->
id
 = 
	`kthªad_gë_id
 (
NULL
);

148 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

149 
	}
}

158 
	$sys__±hªad_£tsched∑øm
 ( 
±hªad_t
 *
thªad
, 
pﬁicy
,

159 
sched_∑øm_t
 *
∑øm
 )

161 
kthªad_t
 *
kthªad
;

162 
ªtvÆ
;

164 
	`SYS_ENTRY
();

166 
kthªad
 = 
thªad
->
±r
;

167 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kthªad
, 
EINVAL
 );

168 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`kthªad_gë_id
 (
kthªad
Ë=
thªad
->
id
, 
ESRCH
 );

169 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`kthªad_is_Æive
 (
kthªad
), 
ESRCH
 );

171 
	`ASSERT_ERRNO_AND_EXIT
 ( 
pﬁicy
 >0 &&Öﬁicy < 
SCHED_NUM
, 
EINVAL
 );

173 i‡–
∑øm
 )

175 
	`ASSERT_ERRNO_AND_EXIT
 (

176 
∑øm
->
sched_¥i‹ôy
 >
THREAD_MIN_PRIO
 &&

177 
∑øm
->
sched_¥i‹ôy
 <
THREAD_MAX_PRIO
, 
EINVAL
 );

180 
ªtvÆ
 = 
	`kthªad_£tsched∑øm
 ( 
kthªad
, 
pﬁicy
, 
∑øm
 );

181 i‡–
ªtvÆ
 =
EXIT_SUCCESS
 )

182 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, 
ªtvÆ
 );

184 
	`SYS_EXIT
 ( 
ªtvÆ
, 
EXIT_FAILURE
 );

185 
	}
}

188 
	$sys__£t_î∫o
 ( 
î∫o
 )

190 
	`SYS_ENTRY
();

192 
	`kthªad_£t_î∫o
 ( 
NULL
, 
î∫o
 );

194 
	`SYS_RETURN
 ( 
EXIT_SUCCESS
 );

195 
	}
}

196 
	$sys__gë_î∫o
 ()

198 
	`SYS_ENTRY
();

199 
	`SYS_RETURN
 ( 
	`kthªad_gë_î∫o
 (
NULL
) );

200 
	}
}

202 
	$sys__gë_î∫o_±r
 ( **
î∫o
 )

204 
	`SYS_ENTRY
();

206 i‡–
î∫o
 )

208 *
î∫o
 = 
	`kthªad_gë_î∫o_±r
 (
NULL
);

209 
	`SYS_RETURN
 ( 
EXIT_SUCCESS
 );

212 
	`SYS_RETURN
 ( 
EXIT_FAILURE
 );

214 
	}
}

224 
	$sys__±hªad_muãx_öô
 ( 
±hªad_muãx_t
 *
muãx
,

225 
±hªad_muãx©å_t
 *
muãx©å
 )

227 
k±hªad_muãx_t
 *
kmuãx
;

228 
kobje˘_t
 *
kobj
;

230 
	`SYS_ENTRY
();

232 
	`ASSERT_ERRNO_AND_EXIT
 ( 
muãx
, 
EINVAL
 );

234 
kobj
 = 
	`kmÆloc_kobje˘
 (  (
k±hªad_muãx_t
) );

235 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
ENOMEM
 );

236 
kmuãx
 = 
kobj
->
kobje˘
;

238 
kmuãx
->
id
 = 
	`k_√w_id
 ();

239 
kmuãx
->
ow√r
 = 
NULL
;

240 
kmuãx
->
Êags
 = 0;

241 
kmuãx
->
ªf_˙t
 = 1;

242 
	`kthªadq_öô
 ( &
kmuãx
->
queue
 );

244 
muãx
->
±r
 = 
kobj
;

245 
muãx
->
id
 = 
kmuãx
->id;

247 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

248 
	}
}

255 
	$sys__±hªad_muãx_de°roy
 ( 
±hªad_muãx_t
 *
muãx
 )

257 
k±hªad_muãx_t
 *
kmuãx
;

258 
kobje˘_t
 *
kobj
;

260 
	`SYS_ENTRY
();

262 
	`ASSERT_ERRNO_AND_EXIT
 ( 
muãx
, 
EINVAL
 );

264 
kobj
 = 
muãx
->
±r
;

265 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

266 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

267 
EINVAL
 );

269 
kmuãx
 = 
kobj
->
kobje˘
;

270 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kmuãx
 && kmuãx->
id
 =
muãx
->id, 
EINVAL
 );

272 
	`ASSERT_ERRNO_AND_EXIT
 (

273 
kmuãx
->
ow√r
 =
NULL
 &&

274 
	`kthªadq_gë
 ( &
kmuãx
->
queue
 ) =
NULL
,

275 
ENOTEMPTY


278 
kmuãx
->
ªf_˙t
--;

281 i‡–
kmuãx
->
ªf_˙t
 )

282 
	`SYS_EXIT
 ( 
EBUSY
, 
EXIT_FAILURE
 );

284 
	`k‰ì_kobje˘
 ( 
kobj
 );

286 
muãx
->
±r
 = 
NULL
;

287 
muãx
->
id
 = 0;

289 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

290 
	}
}

292 
muãx_lock
 ( 
k±hªad_muãx_t
 *
kmuãx
, 
kthªad_t
 *
kthªad
 );

299 
	$sys__±hªad_muãx_lock
 ( 
±hªad_muãx_t
 *
muãx
 )

301 
k±hªad_muãx_t
 *
kmuãx
;

302 
kobje˘_t
 *
kobj
;

303 
ªtvÆ
 = 
EXIT_SUCCESS
;

305 
	`SYS_ENTRY
();

307 
	`ASSERT_ERRNO_AND_EXIT
 ( 
muãx
, 
EINVAL
 );

309 
kobj
 = 
muãx
->
±r
;

310 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

311 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

312 
EINVAL
 );

313 
kmuãx
 = 
kobj
->
kobje˘
;

314 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kmuãx
 && kmuãx->
id
 =
muãx
->id, 
EINVAL
 );

316 
ªtvÆ
 = 
	`muãx_lock
 ( 
kmuãx
, 
	`kthªad_gë_a˘ive
 () );

318 i‡–
ªtvÆ
 != -1 )

319 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
NULL
, 
EXIT_SUCCESS
 );

321 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
NULL
, 
EXIT_FAILURE
 );

323 i‡–
ªtvÆ
 == 1 )

324 
	`kthªads_scheduÀ
 ();

326 
	`SYS_EXIT
 ( 
	`kthªad_gë_î∫o
(
NULL
), 
	`kthªad_gë_sysˇŒ_ªtvÆ
(NULL) );

327 
	}
}

330 
	$muãx_lock
 ( 
k±hªad_muãx_t
 *
kmuãx
, 
kthªad_t
 *
kthªad
 )

332 i‡–!
kmuãx
->
ow√r
 )

335 
kmuãx
->
ow√r
 = 
kthªad
;

336 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EXIT_SUCCESS
 );

344 i‡–
kmuãx
->
ow√r
 =
kthªad
 )

346 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EDEADLK
 );

350 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EXIT_SUCCESS
 );

351 
	`kthªad_íqueue
 ( 
kthªad
, &
kmuãx
->
queue
, 0, 
NULL
, NULL );

355 
	}
}

362 
	$sys__±hªad_muãx_u∆ock
 ( 
±hªad_muãx_t
 *
muãx
 )

364 
k±hªad_muãx_t
 *
kmuãx
;

365 
kobje˘_t
 *
kobj
;

367 
	`SYS_ENTRY
();

369 
	`ASSERT_ERRNO_AND_EXIT
 ( 
muãx
, 
EINVAL
 );

371 
kobj
 = 
muãx
->
±r
;

372 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

373 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

374 
EINVAL
 );

375 
kmuãx
 = 
kobj
->
kobje˘
;

376 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kmuãx
 && kmuãx->
id
 =
muãx
->id, 
EINVAL
 );

378 i‡–
kmuãx
->
ow√r
 !
	`kthªad_gë_a˘ive
() )

380 
	`SET_ERRNO
 ( 
EPERM
 );

381  
EXIT_FAILURE
;

384 
	`SET_ERRNO
 ( 
EXIT_SUCCESS
 );

386 
kmuãx
->
ow√r
 = 
	`kthªadq_gë
 ( &kmuãx->
queue
 );

387 i‡–
kmuãx
->
ow√r
 )

389 
	`kthªadq_ªÀa£
 ( &
kmuãx
->
queue
 );

390 
	`kthªads_scheduÀ
 ();

393 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

394 
	}
}

404 
	$sys__±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_c⁄d©å_t
 *
c⁄d©å
)

406 
k±hªad_c⁄d_t
 *
kc⁄d
;

407 
kobje˘_t
 *
kobj
;

409 
	`SYS_ENTRY
();

411 
	`ASSERT_ERRNO_AND_EXIT
 ( 
c⁄d
, 
EINVAL
 );

413 
kobj
 = 
	`kmÆloc_kobje˘
 (  (
k±hªad_c⁄d_t
) );

414 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
ENOMEM
 );

415 
kc⁄d
 = 
kobj
->
kobje˘
;

417 
kc⁄d
->
id
 = 
	`k_√w_id
 ();

418 
kc⁄d
->
Êags
 = 0;

419 
kc⁄d
->
ªf_˙t
 = 1;

420 
	`kthªadq_öô
 ( &
kc⁄d
->
queue
 );

422 
c⁄d
->
±r
 = 
kobj
;

423 
c⁄d
->
id
 = 
kc⁄d
->id;

425 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

426 
	}
}

433 
	$sys__±hªad_c⁄d_de°roy
 ( 
±hªad_c⁄d_t
 *
c⁄d
 )

435 
k±hªad_c⁄d_t
 *
kc⁄d
;

436 
kobje˘_t
 *
kobj
;

438 
	`SYS_ENTRY
();

440 
	`ASSERT_ERRNO_AND_EXIT
 ( 
c⁄d
, 
EINVAL
 );

442 
kobj
 = 
c⁄d
->
±r
;

443 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

444 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

445 
EINVAL
 );

446 
kc⁄d
 = 
kobj
->
kobje˘
;

447 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kc⁄d
 && kc⁄d->
id
 =
c⁄d
->id, 
EINVAL
 );

449 
kc⁄d
->
ªf_˙t
--;

452 i‡–
kc⁄d
->
ªf_˙t
 )

453 
	`SYS_EXIT
 ( 
EBUSY
, 
EXIT_FAILURE
 );

455 
	`k‰ì_kobje˘
 ( 
kobj
 );

457 
c⁄d
->
±r
 = 
NULL
;

458 
c⁄d
->
id
 = 0;

460 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

461 
	}
}

469 
	$sys__±hªad_c⁄d_waô
 ( 
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
muãx
 )

471 
k±hªad_c⁄d_t
 *
kc⁄d
;

472 
k±hªad_muãx_t
 *
kmuãx
;

473 
kobje˘_t
 *
kobj_c⁄d
, *
kobj_muãx
;

475 
	`SYS_ENTRY
();

477 
	`ASSERT_ERRNO_AND_EXIT
 ( 
c⁄d
 && 
muãx
, 
EINVAL
 );

479 
kobj_c⁄d
 = 
c⁄d
->
±r
;

480 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj_c⁄d
, 
EINVAL
 );

481 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj_c⁄d
->
li°
 ),

482 
EINVAL
 );

483 
kc⁄d
 = 
kobj_c⁄d
->
kobje˘
;

484 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kc⁄d
 && kc⁄d->
id
 =
c⁄d
->id, 
EINVAL
 );

486 
kobj_muãx
 = 
muãx
->
±r
;

487 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj_muãx
, 
EINVAL
 );

488 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj_muãx
->
li°
),

489 
EINVAL
 );

490 
kmuãx
 = 
kobj_muãx
->
kobje˘
;

491 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kmuãx
 && kmuãx->
id
 =
muãx
->id, 
EINVAL
 );

493 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kmuãx
->
ow√r
 =
	`kthªad_gë_a˘ive
(), 
EPERM
 );

495 
	`kthªad_£t_î∫o
 ( 
NULL
, 
EXIT_SUCCESS
 );

496 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
NULL
, 
EXIT_SUCCESS
 );

499 
	`kthªad_íqueue
 ( 
NULL
, &
kc⁄d
->
queue
, 0, NULL, NULL );

502 
	`kthªad_£t_¥iv©e_∑øm
 ( 
NULL
, 
kobj_muãx
 );

505 
kmuãx
->
ow√r
 = 
	`kthªadq_gë
 ( &kmuãx->
queue
 );

506 i‡–
kmuãx
->
ow√r
 )

507 
	`kthªadq_ªÀa£
 ( &
kmuãx
->
queue
 );

509 
	`kthªads_scheduÀ
 ();

511 
	`SYS_EXIT
 ( 
	`kthªad_gë_î∫o
(
NULL
), 
	`kthªad_gë_sysˇŒ_ªtvÆ
(NULL) );

512 
	}
}

514 
c⁄d_ªÀa£
 ( 
±hªad_c⁄d_t
 *
c⁄d
, 
ªÀa£_Æl
 );

521 
	$sys__±hªad_c⁄d_sig«l
 ( 
±hªad_c⁄d_t
 *
c⁄d
 )

523  
	`c⁄d_ªÀa£
 ( 
c⁄d
, 
FALSE
 );

524 
	}
}

531 
	$sys__±hªad_c⁄d_brﬂdˇ°
 ( 
±hªad_c⁄d_t
 *
c⁄d
 )

533  
	`c⁄d_ªÀa£
 ( 
c⁄d
, 
TRUE
 );

534 
	}
}

536 
	$c⁄d_ªÀa£
 ( 
±hªad_c⁄d_t
 *
c⁄d
, 
ªÀa£_Æl
 )

538 
k±hªad_c⁄d_t
 *
kc⁄d
;

539 
k±hªad_muãx_t
 *
kmuãx
;

540 
kobje˘_t
 *
kobj_c⁄d
, *
kobj_muãx
;

541 
kthªad_t
 *
kthªad
;

542 
ªtvÆ
 = 0;

544 
	`SYS_ENTRY
();

546 
	`ASSERT_ERRNO_AND_EXIT
 ( 
c⁄d
, 
EINVAL
 );

548 
kobj_c⁄d
 = 
c⁄d
->
±r
;

549 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj_c⁄d
, 
EINVAL
 );

550 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj_c⁄d
->
li°
 ),

551 
EINVAL
 );

552 
kc⁄d
 = 
kobj_c⁄d
->
kobje˘
;

553 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kc⁄d
 && kc⁄d->
id
 =
c⁄d
->id, 
EINVAL
 );

555 
	`kthªad_£t_î∫o
 ( 
	`kthªad_gë_a˘ive
 (), 
EXIT_SUCCESS
 );

557 i‡–(
kthªad
 = 
	`kthªadq_ªmove
 ( &
kc⁄d
->
queue
, 
NULL
 )) )

559 
kobj_muãx
 = 
	`kthªad_gë_¥iv©e_∑øm
 ( 
kthªad
 );

560 
kmuãx
 = 
kobj_muãx
->
kobje˘
;

562 
ªtvÆ
 = 
	`muãx_lock
 ( 
kmuãx
, 
kthªad
 );

563 i‡–
ªtvÆ
 == 0 )

564 
	`kthªad_move_to_ªady
 ( 
kthªad
, 
LAST
 );

567  
ªÀa£_Æl
 &&

568 (
kthªad
 = 
	`kthªadq_ªmove
 ( &
kc⁄d
->
queue
, 
NULL
 )) )

570 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EXIT_SUCCESS
 );

572 
kobj_muãx
 = 
	`kthªad_gë_¥iv©e_∑øm
 ( 
kthªad
 );

573 
kmuãx
 = 
kobj_muãx
->
kobje˘
;

575 
	`kthªad_íqueue
(
kthªad
, &
kmuãx
->
queue
, 0, 
NULL
, NULL);

579 i‡–
ªtvÆ
 > -1 )

580 
	`kthªads_scheduÀ
 ();

582 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

583 
	}
}

595 
	$sys__£m_öô
 ( 
£m_t
 *
£m
, 
psh¨ed
, 
vÆue
 )

597 
k£m_t
 *
k£m
;

598 
kobje˘_t
 *
kobj
;

600 
	`SYS_ENTRY
();

602 
	`ASSERT_ERRNO_AND_EXIT
 ( 
£m
, 
EINVAL
 );

604 
kobj
 = 
	`kmÆloc_kobje˘
 (  (
k£m_t
) );

605 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
ENOMEM
 );

606 
k£m
 = 
kobj
->
kobje˘
;

608 
k£m
->
id
 = 
	`k_√w_id
 ();

609 
k£m
->
£m_vÆue
 = 
vÆue
;

610 
k£m
->
œ°_lock
 = 
NULL
;

611 
k£m
->
Êags
 = 0;

612 
k£m
->
ªf_˙t
 = 1;

613 
	`kthªadq_öô
 ( &
k£m
->
queue
 );

615 i‡–
psh¨ed
 )

616 
k£m
->
Êags
 |
PTHREAD_PROCESS_SHARED
;

618 
£m
->
±r
 = 
kobj
;

619 
£m
->
id
 = 
k£m
->id;

621 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

622 
	}
}

629 
	$sys__£m_de°roy
 ( 
£m_t
 *
£m
 )

631 
k£m_t
 *
k£m
;

632 
kobje˘_t
 *
kobj
;

634 
	`SYS_ENTRY
();

636 
	`ASSERT_ERRNO_AND_EXIT
 ( 
£m
, 
EINVAL
 );

638 
kobj
 = 
£m
->
±r
;

639 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

640 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

641 
EINVAL
 );

642 
k£m
 = 
kobj
->
kobje˘
;

643 
	`ASSERT_ERRNO_AND_EXIT
 ( 
k£m
 && k£m->
id
 =
£m
->id, 
EINVAL
 );

645 
	`ASSERT_ERRNO_AND_EXIT
 (
	`kthªadq_gë
 (&
k£m
->
queue
Ë=
NULL
, 
ENOTEMPTY
);

647 
k£m
->
ªf_˙t
--;

650 i‡–
k£m
->
ªf_˙t
 )

651 
	`SYS_EXIT
 ( 
EBUSY
, 
EXIT_FAILURE
 );

653 
	`k‰ì_kobje˘
 ( 
kobj
 );

655 
£m
->
±r
 = 
NULL
;

656 
£m
->
id
 = 0;

658 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

659 
	}
}

666 
	$sys__£m_waô
 ( 
£m_t
 *
£m
 )

668 
k£m_t
 *
k£m
;

669 
kobje˘_t
 *
kobj
;

670 
kthªad_t
 *
kthªad
;

672 
	`SYS_ENTRY
();

674 
	`ASSERT_ERRNO_AND_EXIT
 ( 
£m
, 
EINVAL
 );

676 
kthªad
 = 
	`kthªad_gë_a˘ive
 ();

678 
kobj
 = 
£m
->
±r
;

679 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

680 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

681 
EINVAL
 );

682 
k£m
 = 
kobj
->
kobje˘
;

683 
	`ASSERT_ERRNO_AND_EXIT
 ( 
k£m
 && k£m->
id
 =
£m
->id, 
EINVAL
 );

685 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EXIT_SUCCESS
 );

686 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad
, 
EXIT_SUCCESS
 );

688 i‡–
k£m
->
£m_vÆue
 > 0 )

690 
k£m
->
£m_vÆue
--;

691 
k£m
->
œ°_lock
 = 
kthªad
;

694 
	`kthªad_íqueue
 ( 
kthªad
, &
k£m
->
queue
, 1, 
NULL
, NULL );

695 
	`kthªads_scheduÀ
 ();

698 
	`SYS_EXIT
 ( 
	`kthªad_gë_î∫o
(
NULL
), 
	`kthªad_gë_sysˇŒ_ªtvÆ
(NULL) );

699 
	}
}

706 
	$sys__£m_po°
 ( 
£m_t
 *
£m
 )

708 
k£m_t
 *
k£m
;

709 
kobje˘_t
 *
kobj
;

710 
kthªad_t
 *
kthªad
, *
ªÀa£d
;

712 
	`SYS_ENTRY
();

714 
	`ASSERT_ERRNO_AND_EXIT
 ( 
£m
, 
EINVAL
 );

716 
kthªad
 = 
	`kthªad_gë_a˘ive
 ();

718 
kobj
 = 
£m
->
±r
;

719 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

720 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

721 
EINVAL
 );

722 
k£m
 = 
kobj
->
kobje˘
;

723 
	`ASSERT_ERRNO_AND_EXIT
 ( 
k£m
 && k£m->
id
 =
£m
->id, 
EINVAL
 );

725 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EXIT_SUCCESS
 );

726 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad
, 
EXIT_SUCCESS
 );

728 
ªÀa£d
 = 
	`kthªadq_gë
 ( &
k£m
->
queue
 );

730 i‡–!
ªÀa£d
 || 
k£m
->
£m_vÆue
 < 0 )

735 
k£m
->
£m_vÆue
++;

738 
	`kthªadq_ªÀa£
 ( &
k£m
->
queue
 );

739 
	`kthªads_scheduÀ
 ();

742 
	`SYS_EXIT
 ( 
	`kthªad_gë_î∫o
(
NULL
), 
	`kthªad_gë_sysˇŒ_ªtvÆ
(NULL) );

743 
	}
}

748 
li°_t
 
	gkmq_queue
 = 
LIST_T_NULL
;

759 
	$sys__mq_›í
 ( *
«me
, 
oÊag
, 
mode_t
 
mode
, 
mq_©å_t
 *
©å
,

760 
mqd_t
 *
mqdes
 )

762 
kmq_queue_t
 *
kq_queue
;

763 
kobje˘_t
 *
kobj
;

765 
	`SYS_ENTRY
();

767 
	`ASSERT_ERRNO_AND_EXIT
 ( 
«me
 && 
mqdes
, 
EBADF
 );

768 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`°æí
 (
«me
Ë< 
NAME_MAX
, 
EBADF
 );

771 
kq_queue
 = 
	`li°_gë
 ( &
kmq_queue
, 
FIRST
 );

772  
kq_queue
 &&

773 
	`°rcmp
 ( 
«me
, 
kq_queue
->name ) )

774 
kq_queue
 = 
	`li°_gë_√xt
 ( &kq_queue->
li°
 );

776 i‡––
kq_queue
 && ( (
oÊag
 & 
O_CREAT
Ë|| (oÊag & 
O_EXCL
) ) )

777 || ( !
kq_queue
 && !(
oÊag
 & 
O_CREAT
 ) ) )

779 
mqdes
->
±r
 = (*) -1;

780 
mqdes
->
id
 = -1;

781 
	`SYS_EXIT
 ( 
EEXIST
, 
EXIT_FAILURE
 );

784 i‡–!
kq_queue
 && (
oÊag
 & 
O_CREAT
) )

786 
kq_queue
 = 
	`kmÆloc
 (  (
kmq_queue_t
) );

788 i‡–
©å
 )

789 
kq_queue
->
©å
 = *attr;

791 
kq_queue
->
id
 = 
	`k_√w_id
 ();

792 
kq_queue
->
©å
.
mq_curmsgs
 = 0;

794 
kq_queue
->
«me
 = 
	`kmÆloc
 ( 
	`°æí
 (name) + 1 );

795 
	`°r˝y
 ( 
kq_queue
->
«me
,Çame );

797 
kq_queue
->
ªf_˙t
 = 0;

799 
	`li°_öô
 ( &
kq_queue
->
msg_li°
 );

800 
	`kthªadq_öô
 ( &
kq_queue
->
ªcv_q
 );

801 
	`kthªadq_öô
 ( &
kq_queue
->
£nd_q
 );

803 
	`li°_≠≥nd
 ( &
kmq_queue
, 
kq_queue
, &kq_queue->
li°
 );

806 
kq_queue
->
ªf_˙t
++;

808 
kobj
 = 
	`kmÆloc_kobje˘
 ( 0 );

809 
kobj
->
kobje˘
 = 
kq_queue
;

810 
kobj
->
Êags
 = 
oÊag
;

812 
mqdes
->
±r
 = 
kobj
;

813 
mqdes
->
id
 = 
kq_queue
->id;

815 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

816 
	}
}

823 
	$sys__mq_˛o£
 ( 
mqd_t
 *
mqdes
 )

825 
kmq_queue_t
 *
kq_queue
;

826 
kobje˘_t
 *
kobj
;

827 
kmq_msg_t
 *
kmq_msg
;

828 
kthªad_t
 *
kthªad
;

830 
	`SYS_ENTRY
();

832 
	`ASSERT_ERRNO_AND_EXIT
 ( 
mqdes
, 
EBADF
 );

834 
kobj
 = 
mqdes
->
±r
;

835 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EBADF
 );

836 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

837 
EBADF
 );

839 
kq_queue
 = 
kobj
->
kobje˘
;

840 
kq_queue
 = 
	`li°_föd_™d_ªmove
 ( &
kmq_queue
, &kq_queue->
li°
 );

842 i‡–!
kq_queue
 || kq_queue->
id
 !
mqdes
->id )

843 
	`SYS_EXIT
 ( 
EBADF
, 
EXIT_FAILURE
 );

845 
kq_queue
->
ªf_˙t
--;

847 i‡–!
kq_queue
->
ªf_˙t
 )

850  (
kmq_msg
 = 
	`li°_ªmove
(&
kq_queue
->
msg_li°
,
FIRST
,
NULL
)) )

851 
	`k‰ì
 (
kmq_msg
);

854  (
kthªad
 = 
	`kthªadq_ªmove
 (&
kq_queue
->
£nd_q
, 
NULL
)) )

856 
	`kthªad_move_to_ªady
 ( 
kthªad
, 
LAST
 );

857 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EBADF
 );

858 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad
, 
EXIT_FAILURE
 );

860  (
kthªad
 = 
	`kthªadq_ªmove
 (&
kq_queue
->
ªcv_q
, 
NULL
)) )

862 
	`kthªad_move_to_ªady
 ( 
kthªad
, 
LAST
 );

863 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EBADF
 );

864 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad
, 
EXIT_FAILURE
 );

867 
	`li°_ªmove
 ( &
kmq_queue
, 0, &
kq_queue
->
li°
 );

868 
	`k_‰ì_id
 ( 
kq_queue
->
id
 );

869 
	`k‰ì
 ( 
kq_queue
->
«me
 );

870 
	`k‰ì
 ( 
kq_queue
 );

874 
	`k‰ì_kobje˘
 ( 
kobj
 );

876 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

877 
	}
}

880 
	$cmp_mq_msg
 ( 
kmq_msg_t
 *
m1
, kmq_msg_à*
m2
 )

882  
m1
->
msg_¥io
 - 
m2
->msg_prio;

883 
	}
}

893 
	$sys__mq_£nd
 ( 
mqd_t
 *
mqdes
, *
msg_±r
, 
size_t
 
msg_Àn
, 
uöt
 
msg_¥io
 )

895 
kmq_queue_t
 *
kq_queue
;

896 
kobje˘_t
 *
kobj
;

897 
kmq_msg_t
 *
kmq_msg
;

898 
kthªad_t
 *
kthªad
;

900 
	`SYS_ENTRY
();

902 
	`ASSERT_ERRNO_AND_EXIT
 ( 
mqdes
 && 
msg_±r
, 
EINVAL
 );

903 
	`ASSERT_ERRNO_AND_EXIT
 ( 
msg_¥io
 <
MQ_PRIO_MAX
, 
EINVAL
 );

905 
kobj
 = 
mqdes
->
±r
;

906 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EBADF
 );

907 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

908 
EBADF
 );

910 
kq_queue
 = 
kobj
->
kobje˘
;

911 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kq_queue
->
id
 =
mqdes
->id, 
EBADF
 );

912 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kmq_queue
, &
kq_queue
->
li°
 ),

913 
EBADF
 );

915  
kq_queue
->
©å
.
mq_curmsgs
 >kq_queue->©å.
mq_maxmsg
 )

917 i‡–(
kobj
->
Êags
 & 
O_NONBLOCK
) )

918 
	`SYS_EXIT
 ( 
EAGAIN
, 
EXIT_FAILURE
 );

921 
	`kthªad_£t_î∫o
 ( 
NULL
, 
EAGAIN
 );

922 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
NULL
, 
EAGAIN
 );

924 
	`kthªad_íqueue
 ( 
NULL
, &
kq_queue
->
£nd_q
, 1, NULL, NULL );

925 
	`kthªads_scheduÀ
 ();

927 i‡–
	`kthªad_gë_î∫o
 (
NULL
Ë!
EAGAIN
 )

928 
	`SYS_EXIT
 ( 
	`kthªad_gë_î∫o
 (
NULL
),

929 
	`kthªad_gë_sysˇŒ_ªtvÆ
 (
NULL
) );

932 i‡–
msg_Àn
 > 
kq_queue
->
©å
.
mq_msgsize
 )

933 
	`SYS_EXIT
 ( 
EMSGSIZE
, 
EXIT_FAILURE
 );

935 
kmq_msg
 = 
	`kmÆloc
 (  (
kmq_msg_t
Ë+ 
msg_Àn
 );

936 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kmq_msg
, 
ENOMEM
 );

939 
kmq_msg
->
msg_size
 = 
msg_Àn
;

940 
kmq_msg
->
msg_¥io
 = msg_prio;

941 
	`mem˝y
 ( &
kmq_msg
->
msg_d©a
[0], 
msg_±r
, 
msg_Àn
 );

943 
	`li°_s‹t_add
 ( &
kq_queue
->
msg_li°
, 
kmq_msg
, &kmq_msg->
li°
,

944 –(*)(*, *ËË
cmp_mq_msg
 );

946 
kq_queue
->
©å
.
mq_curmsgs
++;

949 i‡––
kthªad
 = 
	`kthªadq_ªmove
 ( &
kq_queue
->
ªcv_q
, 
NULL
 ) ) )

952 
	`kthªad_move_to_ªady
 ( 
kthªad
, 
LAST
 );

953 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EAGAIN
 );

954 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad
, 
EAGAIN
 );

956 
	`kthªads_scheduÀ
 ();

959 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

960 
	}
}

974 
	$sys__mq_ª˚ive
 (
mqd_t
 *
mqdes
,*
msg_±r
,
size_t
 
msg_Àn
,
uöt
 *
msg_¥io
)

976 
kmq_queue_t
 *
kq_queue
;

977 
kobje˘_t
 *
kobj
;

978 
kmq_msg_t
 *
kmq_msg
;

979 
kthªad_t
 *
kthªad
;

981 
	`SYS_ENTRY
();

983 
	`ASSERT_ERRNO_AND_EXIT
 ( 
mqdes
 && 
msg_±r
, -
EINVAL
 );

985 
kobj
 = 
mqdes
->
±r
;

986 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, -
EBADF
 );

987 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

988 -
EBADF
 );

990 
kq_queue
 = 
kobj
->
kobje˘
;

991 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kq_queue
->
id
 =
mqdes
->id, -
EBADF
 );

992 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kmq_queue
, &
kq_queue
->
li°
 ),

993 -
EBADF
 );

995  
kq_queue
->
©å
.
mq_curmsgs
 == 0 )

997 i‡–(
kobj
->
Êags
 & 
O_NONBLOCK
) )

998 
	`SYS_EXIT
 ( 
EAGAIN
, 
EXIT_FAILURE
 );

1001 
	`kthªad_£t_î∫o
 ( 
NULL
, 
EAGAIN
 );

1002 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
NULL
, 
EAGAIN
 );

1004 
	`kthªad_íqueue
 ( 
NULL
, &
kq_queue
->
ªcv_q
, 1, NULL, NULL );

1005 
	`kthªads_scheduÀ
 ();

1007 i‡–
	`kthªad_gë_î∫o
 (
NULL
Ë!
EAGAIN
 )

1008 
	`SYS_EXIT
 ( 
	`kthªad_gë_î∫o
 (
NULL
),

1009 
	`kthªad_gë_sysˇŒ_ªtvÆ
 (
NULL
) );

1012 i‡–
msg_Àn
 < 
kq_queue
->
©å
.
mq_msgsize
 )

1013 
	`SYS_EXIT
 ( 
EMSGSIZE
, 
EXIT_FAILURE
 );

1015 
kmq_msg
 = 
	`li°_ªmove
 ( &
kq_queue
->
msg_li°
, 
FIRST
, 
NULL
 );

1017 
	`mem˝y
 ( 
msg_±r
, &
kmq_msg
->
msg_d©a
[0], kmq_msg->
msg_size
 );

1018 
msg_Àn
 = 
kmq_msg
->
msg_size
;

1019 i‡–
msg_¥io
 )

1020 *
msg_¥io
 = 
kmq_msg
->msg_prio;

1022 
	`k‰ì
 (
kmq_msg
);

1024 
kq_queue
->
©å
.
mq_curmsgs
--;

1027 i‡–(
kthªad
 = 
	`kthªadq_ªmove
 ( &
kq_queue
->
£nd_q
, 
NULL
 )) )

1030 
	`kthªad_move_to_ªady
 ( 
kthªad
, 
LAST
 );

1031 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EAGAIN
 );

1032 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad
, 
EAGAIN
 );

1034 
	`kthªads_scheduÀ
 ();

1037 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, 
msg_Àn
 );

1038 
	}
}

	@kernel/pthread.h

2 #¥agm®
⁄˚


4 
	~<kî√l/thªad.h
>

5 
	~<lib/li°.h
>

8 #ifdef 
_K_PTHREAD_C_


12 
	s_k±hªad_muãx_t_


14 
id_t
 
	mid
;

17 
kthªad_t
 *
	mow√r
;

20 
uöt
 
	mÊags
;

23 
uöt
 
	mªf_˙t
;

26 
kthªad_q
 
	mqueue
;

29 
	tk±hªad_muãx_t
;

31 
	s_k±hªad_c⁄d_t_


33 
id_t
 
	mid
;

36 
uöt
 
	mÊags
;

39 
uöt
 
	mªf_˙t
;

42 
kthªad_q
 
	mqueue
;

45 
	tk±hªad_c⁄d_t
;

50 
	s_k£m_t_


52 
id_t
 
	mid
;

55 
	m£m_vÆue
;

58 
kthªad_t
 *
	mœ°_lock
;

61 
uöt
 
	mÊags
;

64 
uöt
 
	mªf_˙t
;

67 
kthªad_q
 
	mqueue
;

70 
	tk£m_t
;

74 
	s_kb¨rõr_t_


76 
id_t
 
	mid
;

79 
	mb¨_vÆue
;

82 
kthªad_t
 *
	mœ°_lock
;

85 
uöt
 
	mÊags
;

88 
uöt
 
	mªf_˙t
;

91 
kthªad_q
 
	mqueue
;

94 
	tkb¨rõr_t
;

100 
	s_kmsg_t_


102 
li°_h
 
	mli°
;

104 
size_t
 
	mmsg_size
;

106 
	mmsg_¥io
;

108 
	mmsg_d©a
[1];

111 
	tkmq_msg_t
;

115 
	s_kmq_queue_t_


117 
id_t
 
	mid
;

120 *
	m«me
;

123 
mq_©å_t
 
	m©å
;

127 
li°_t
 
	mmsg_li°
;

130 
	mªf_˙t
;

133 
kthªad_q
 
	mªcv_q
;

136 
kthªad_q
 
	m£nd_q
;

139 
li°_h
 
	mli°
;

142 
	tkmq_queue_t
;

	@kernel/sched.c

2 
	#_K_SCHED_C_


	)

3 
	#_K_SCHED_


	)

5 
	~"sched.h
"

6 
	~"thªad.h
"

8 
	~"mem‹y.h
"

9 
	~<kî√l/î∫o.h
>

10 
	~<¨ch/c⁄ãxt.h
>

11 
	~<ty≥s/bôs.h
>

12 
	~<lib/li°.h
>

15 
sched_ªady_t
 
	gªady
;

17 
	#UINT_SIZE
 ( 8 * (
uöt
Ë)

	)

19 #ifde‡
SCHED_RR_SIMPLE


20 
	~"time.h
"

21 
ksched_º_tick
 ( 
sigvÆ_t
 
sigvÆ
 );

25 
	$ksched_öô
 ()

27 
i
;

29 
ªady
.
¥io_Àvñs
 = 
PRIO_LEVELS
;

30 
ªady
.
rq
 = 
	`kmÆloc
 (Ñódy.
¥io_Àvñs
 * (
kthªad_q
) );

32 
ªady
.
mask_Àn
 = (ªady.
¥io_Àvñs
 + 
UINT_SIZE
 - 1) / UINT_SIZE;

33 
ªady
.
mask
 = 
	`kmÆloc
 (Ñódy.
mask_Àn
 * (
uöt
) );

36  
i
 = 0; i < 
ªady
.
¥io_Àvñs
; i++ )

37 
	`kthªadq_öô
 ( &
ªady
.
rq
[
i
] );

39  
i
 = 0; i < 
ªady
.
mask_Àn
; i++ )

40 
ªady
.
mask
[
i
] = 0;

42 #ifde‡
SCHED_RR_SIMPLE


43 i‡–
	`sys__„©uª
 ( 
FEATURE_SCHED_RR
, 
FEATURE_GET
, 0 ) )

44 
	`ksched_º_°¨t_timî
 ();

46 
	}
}

52 
	$kthªad_move_to_ªady
 ( 
kthªad_t
 *
kthªad
, 
whîe
 )

54 
i
, 
j
, 
¥io
;

56 
	`ASSERT
 ( 
kthªad
 );

58 
¥io
 = 
	`kthªad_gë_¥io
 ( 
kthªad
 );

60 
	`kthªad_m¨k_ªady
 ( 
kthªad
 );

61 
	`kthªad_£t_queue
 ( 
kthªad
, &
ªady
.
rq
[
¥io
] );

63 i‡–
whîe
 =
LAST
 )

64 
	`kthªadq_≠≥nd
 ( &
ªady
.
rq
[
¥io
], 
kthªad
 );

66 
	`kthªadq_¥ïíd
 ( &
ªady
.
rq
[
¥io
], 
kthªad
 );

69 
i
 = 
¥io
 / 
UINT_SIZE
;

70 
j
 = 
¥io
 % 
UINT_SIZE
;

71 
ªady
.
mask
[
i
] |(
uöt
Ë–1 << 
j
 );

72 
	}
}

75 
kthªad_t
 *
	$kthªad_ªmove_‰om_ªady
 ( 
kthªad_t
 *
kthªad
 )

77 
i
, 
j
, 
¥io
;

79 i‡–!
kthªad
 )

80  
NULL
;

82 
¥io
 = 
	`kthªad_gë_¥io
 ( 
kthªad
 );

84 i‡–
	`kthªadq_ªmove
 ( &
ªady
.
rq
[
¥io
], 
kthªad
 ) != kthread )

85  
NULL
;

88 i‡–
	`kthªadq_gë
 ( &
ªady
.
rq
[
¥io
] ) =
NULL
 )

90 
i
 = 
¥io
 / 
UINT_SIZE
;

91 
j
 = 
¥io
 % 
UINT_SIZE
;

93 
ªady
.
mask
[
i
] &~–(
uöt
Ë–1 << 
j
 ) );

96  
kthªad
;

97 
	}
}

100 
kthªad_t
 *
	$gë_fú°_ªady
 ()

102 
i
, 
fú°
;

104  
i
 = 
ªady
.
mask_Àn
 - 1; i >= 0; i-- )

106 i‡–
ªady
.
mask
[
i
] )

108 
fú°
 = 
i
 * 
UINT_SIZE
 + 
	`msb_ödex
 (
ªady
.
mask
[i]);

109  
	`kthªadq_gë
 ( &
ªady
.
rq
[
fú°
] );

113  
NULL
;

114 
	}
}

121 
	$kthªads_scheduÀ
 ()

123 
kthªad_t
 *
cuº
, *
√xt
 = 
NULL
;

125 
cuº
 = 
	`kthªad_gë_a˘ive
();

126 
√xt
 = 
	`gë_fú°_ªady
 ();

129 
	`ASSERT
 ( ( 
cuº
 && 
	`kthªad_is_a˘ive
 ( cuº ) ) || 
√xt
 );

131 i‡–!
	`sys__„©uª
 ( 
FEATURE_SCHEDULER
, 
FEATURE_GET
, 0 ) &&

132 
cuº
 && 
	`kthªad_is_a˘ive
 ( curr ) )

135 i‡–!
cuº
 || !
	`kthªad_is_a˘ive
 ( curr ) ||

136 
	`kthªad_gë_¥io
 ( 
cuº
 ) < kthªad_gë_¥iÿ–
√xt
 ) )

138 i‡–
cuº
 && !
	`kthªad_is_∑ssive
 (curr) )

141 i‡–
	`kthªad_is_a˘ive
 ( 
cuº
 ) )

142 
	`kthªad_move_to_ªady
 ( 
cuº
, 
LAST
 );

145 
√xt
 = 
	`gë_fú°_ªady
 ();

146 
	`ASSERT
 (
√xt
);

150 
√xt
 = 
	`kthªad_ªmove_‰om_ªady
 (Çext );

151 
	`ASSERT
 ( 
√xt
 );

153 
	`kthªad_£t_a˘ive
 ( 
√xt
 );

157 
	`ksig«l_¥o˚ss_≥ndög
 ( 
	`kthªad_gë_a˘ive
() );

159 i‡–
cuº
 !
	`kthªad_gë_a˘ive
() )

160 
	`kthªad_swôch_to_thªad
 ( 
cuº
, 
	`kthªad_gë_a˘ive
() );

162 
	}
}

165 #ifde‡
SCHED_RR_SIMPLE


166 
ktimî_t
 *
	gº_ktimî
 = 
NULL
;

168 
	$ksched_º_°¨t_timî
 ()

170 
sigevít_t
 
evp
;

171 
ôimî•ec_t
 
ôimî
;

172 
ªtvÆ
 = 0;

174 i‡–
º_ktimî
 )

177 
evp
.
sigev_nŸify
 = 
SIGEV_THREAD
;

178 
evp
.
sigev_vÆue
.
sivÆ_±r
 = 
NULL
;

179 
evp
.
sigev_nŸify_fun˘i⁄
 = 
ksched_º_tick
;

181 
ªtvÆ
 +
	`ktimî_¸óã
 ( 
CLOCK_REALTIME
, &
evp
, &
º_ktimî
, 
NULL
 );

182 
	`ASSERT
 ( 
ªtvÆ
 =
EXIT_SUCCESS
 );

184 
	`TIME_RESET
 ( &
ôimî
.
ô_vÆue
 );

185 
ôimî
.
ô_vÆue
.
tv_£c
 = 0;

186 
ôimî
.
ô_vÆue
.
tv_n£c
 = 
SCHED_RR_TICK
;

187 
ôimî
.
ô_öãrvÆ
 = itimî.
ô_vÆue
;

189 
ªtvÆ
 +
	`ktimî_£âime
 ( 
º_ktimî
, 0, &
ôimî
, 
NULL
 );

190 
	`ASSERT
 ( 
ªtvÆ
 =
EXIT_SUCCESS
 );

192 
	}
}

193 
	$ksched_º_°›_timî
 ()

195 i‡–
º_ktimî
 )

196 
	`ktimî_dñëe
 ( 
º_ktimî
 );

197 
º_ktimî
 = 
NULL
;

198 
	}
}

204 
	$ksched_º_tick
 ( 
sigvÆ_t
 
sigvÆ
 )

206 i‡–
	`sys__„©uª
 ( 
FEATURE_SCHED_RR
, 
FEATURE_GET
, 0 ) == 0 )

209 
	`kthªad_move_to_ªady
 ( 
	`kthªad_gë_a˘ive
(), 
LAST
 );

210 
	`kthªads_scheduÀ
 ();

211 
	}
}

	@kernel/sched.h

6 #¥agm®
⁄˚


8 
	~<kî√l/thªad.h
>

10 
	~"thªad.h
"

12 
ksched_öô
 ();

13 
kthªad_move_to_ªady
 ( 
kthªad_t
 *
kthªad
, 
whîe
 );

14 
kthªad_t
 *
kthªad_ªmove_‰om_ªady
 ( kthªad_à*
kthªad
 );

15 
kthªads_scheduÀ
 ();

17 #ifde‡
SCHED_RR_SIMPLE


18 
ksched_º_°¨t_timî
 ();

19 
ksched_º_°›_timî
 ();

22 #ifde‡
_K_SCHED_C_


25 
	s_sched_ªady_t_


27 
	m¥io_Àvñs
;

31 
kthªad_q
 *
	mrq
;

35 
uöt
 *
	mmask
;

36 
uöt
 
	mmask_Àn
;

39 
	tsched_ªady_t
;

	@kernel/signal.c

2 
	#_K_SIGNAL_C_


	)

4 
	~"sig«l.h
"

6 
	~"thªad.h
"

7 
	~<¨ch/c⁄ãxt.h
>

8 
	~<kî√l/k¥öt.h
>

9 
	~<kî√l/î∫o.h
>

10 
	~"time.h
"

12 
ksig«l_ª˚ived_sig«l
 ( 
kthªad_t
 *
kthªad
, *
∑øm
 );

13 
ksig«l_add_to_≥ndög
 ( 
ksig«l_h™dlög_t
 *
sh
, 
sigöfo_t
 *
sig
 );

16 
	$ksig«l_thªad_öô
 ( 
kthªad_t
 *
kthªad
 )

18 
ksig«l_h™dlög_t
 *
sh
;

20 
	`ASSERT
 ( 
kthªad
 );

22 
sh
 = 
	`kthªad_gë_sig∑øms
 ( 
kthªad
 );

24 
	`sigfûl£t
 ( 
sh
->
mask
 );

26 
	`li°_öô
 ( &
sh
->
≥ndög_sig«ls
 );

28  
EXIT_SUCCESS
;

29 
	}
}

32 
	$ksig«l_queue
 ( 
kthªad_t
 *
kthªad
, 
sigöfo_t
 *
sig
 )

34 
íqueue
 = 
FALSE
;

35 
ªtvÆ
 = 
EXIT_SUCCESS
;

36 
scheduÀ
 = 
FALSE
;

37 
ksig«l_h™dlög_t
 *
sh
;

38 
siga˘i⁄_t
 *
a˘
;

39 (*
func
Ë(
kthªad_t
 *, *), *
∑øm
;

40 
sigöfo_t
 *
us
;

41 
∑øm_t
 
∑øm1
, 
∑øm2
, 
∑øm3
;

42 
c⁄ãxt_t
 
c⁄ãxt
;

44 
	`ASSERT
 ( 
kthªad
 );

45 
	`ASSERT
 ( 
	`kthªad_check_kthªad
 ( 
kthªad
 ) );

46 
	`ASSERT
 ( 
sig
->
si_signo
 > 0 && sig->si_signÿ<
SIGMAX
 );

48 i‡–!
	`kthªad_is_Æive
 ( 
kthªad
 ) )

49  
ESRCH
;

51 
sh
 = 
	`kthªad_gë_sig∑øms
 ( 
kthªad
 );

55 
	`kthªad_is_su•íded
 ( 
kthªad
, (**Ë&
func
, &
∑øm
 ) &&

56 ((*Ë
func
Ë=((*Ë
ksig«l_ª˚ived_sig«l
)

60 i‡–!
	`ksig«l_ª˚ived_sig«l
 ( 
kthªad
, 
sig
 ) )

65  
EXIT_SUCCESS
;

75 
	`kthªad_gë_öãºu±abÀ
 ( 
kthªad
 ) &&

76 !
	`sigã°£t
 ( 
sh
->
mask
, 
sig
->
si_signo
 )

79 
a˘
 = &
sh
->a˘[
sig
->
si_signo
];

81 i‡–
a˘
->
ß_Êags
 !
SA_SIGINFO
 )

82  
ENOTSUP
;

84 i‡–
a˘
->
ß_siga˘i⁄
 =
SIG_ERR
 ||

85 
a˘
->
ß_siga˘i⁄
 =
SIG_DFL
 ||

86 
a˘
->
ß_siga˘i⁄
 =
SIG_IGN
 ||

87 
a˘
->
ß_siga˘i⁄
 =
SIG_HOLD
 )

89  
ENOTSUP
;

92 i‡–!
	`kthªad_is_ªady
 ( 
kthªad
 ) )

105 (*
func
Ë(
kthªad_t
 *, *), *
∑øm
;

106 
	`kthªad_is_su•íded
 (
kthªad
, (**Ë&
func
, &
∑øm
);

108 i‡–
func
 )

109 
	`func
 ( 
kthªad
, 
∑øm
 );

111 
	`kthªad_move_to_ªady
 ( 
kthªad
, 
LAST
 );

112 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EINTR
 );

113 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad
, 
EXIT_FAILURE
 );

117 
scheduÀ
 = 
TRUE
;

121 
us
 = 
	`kmÆloc
 (  (
sigöfo_t
) );

122 
	`ASSERT
 (
us
);

124 *
us
 = *
sig
;

127 i‡–
	`kthªad_is_a˘ive
 ( 
kthªad
 ) )

128 
c⁄ãxt
 = *((
c⁄ãxt_t
 *Ë
	`kthªad_gë_c⁄ãxt
(
kthªad
));

130 
	`kthªad_¸óã_√w_°©e
 ( 
kthªad
, 
a˘
->
ß_siga˘i⁄
, 
us
, 
NULL
,

131 
HANDLER_STACK_SIZE
, 
TRUE
 );

133 
∑øm1
.
p_±r
 = 
us
;

134 
∑øm2
.
p_±r
 = 
NULL
;

135 
∑øm3
.
p_±r
 = 
NULL
;

136 
	`kthªad_add_˛ónup
 ( 
kthªad
, 
kthªad_∑øm_‰ì
,

137 
∑øm1
, 
∑øm2
, 
∑øm3
 );

140 
	`sigadd£t
 ( 
sh
->
mask
, 
sig
->
si_signo
 );

142 
	`sigadd£ts
 ( 
sh
->
mask
, &
a˘
->
ß_mask
 );

145 i‡–
	`kthªad_is_a˘ive
 ( 
kthªad
 ) )

147 
	`¨ch_swôch_to_thªad
 ( &
c⁄ãxt
,

148 
	`kthªad_gë_c⁄ãxt
 (
kthªad
) );

152 
íqueue
 = 
TRUE
;

155 i‡–
íqueue
 )

157 
	`ksig«l_add_to_≥ndög
 ( 
sh
, 
sig
 );

159 
ªtvÆ
 = 
EAGAIN
;

162 i‡–
scheduÀ
 )

163 
	`kthªads_scheduÀ
 ();

165  
ªtvÆ
;

166 
	}
}

168 
	$ksig«l_add_to_≥ndög
 ( 
ksig«l_h™dlög_t
 *
sh
, 
sigöfo_t
 *
sig
 )

170 
ksigöfo_t
 *
ksig
;

173 
ksig
 = 
	`kmÆloc
 (  (
ksigöfo_t
) );

174 
ksig
->
sigöfo
 = *
sig
;

176 
	`li°_≠≥nd
 ( &
sh
->
≥ndög_sig«ls
, 
ksig
, &ksig->
li°
 );

179 
	}
}

182 
	$ksig«l_¥o˚ss_≥ndög
 ( 
kthªad_t
 *
kthªad
 )

184 
ksig«l_h™dlög_t
 *
sh
;

185 
ªtvÆ
 = 
EXIT_SUCCESS
;

186 
ksigöfo_t
 *
ksig
, *
√xt
;

188 
	`ASSERT
 ( 
kthªad
 );

190 
sh
 = 
	`kthªad_gë_sig∑øms
 ( 
kthªad
 );

192 
ksig
 = 
	`li°_gë
 ( &
sh
->
≥ndög_sig«ls
, 
FIRST
 );

193  
ksig
 )

195 
√xt
 = 
	`li°_gë_√xt
 ( &
ksig
->
li°
 );

197 i‡–!
	`sigã°£t
 ( 
sh
->
mask
, 
ksig
->
sigöfo
.
si_signo
 ) )

199 
	`li°_ªmove
 ( &
sh
->
≥ndög_sig«ls
, 0, &
ksig
->
li°
 );

201 
ªtvÆ
 = 
	`ksig«l_queue
 ( 
kthªad
, &
ksig
->
sigöfo
 );

203 
	`k‰ì
 ( 
ksig
 );

211 
ksig
 = 
√xt
;

214  
ªtvÆ
;

215 
	}
}

218 
	$ksig«l_ª˚ived_sig«l
 ( 
kthªad_t
 *
kthªad
, *
∑øm
 )

220 
sigöfo_t
 *
sig
;

221 
ksig«l_h™dlög_t
 *
sh
;

223 
	`ASSERT
 ( 
kthªad
 );

226 i‡–
∑øm
 =
NULL
 )

228 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EINTR
 );

229 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad
, 
EXIT_FAILURE
 );

231  
EXIT_FAILURE
;

235 
sig
 = 
∑øm
;

236 
sh
 = 
	`kthªad_gë_sig∑øms
 ( 
kthªad
 );

244 
	`ksig«l_add_to_≥ndög
 ( 
sh
, 
sig
 );

247 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EAGAIN
 );

248 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad
, 
EXIT_FAILURE
 );

249 
	`kthªad_move_to_ªady
 ( 
kthªad
, 
LAST
 );

251 
	`kthªads_scheduÀ
 ();

253  
EXIT_SUCCESS
;

254 
	}
}

257 
	$ksig«l_¥o˚ss_evít
 ( 
sigevít_t
 *
evp
, 
kthªad_t
 *
kthªad
, 
code
 )

259 
ªtvÆ
 = 
EXIT_SUCCESS
;

260 
kthªad_t
 *
èrgë
 = 
kthªad
;

261 
sigöfo_t
 
sig
;

262 
pid_t
 
pid
;

263 (*
func
Ë–
sigvÆ_t
 );

265 
	`ASSERT
 ( 
evp
 && 
kthªad
 );

267  
evp
->
sigev_nŸify
 )

269 
SIGEV_WAKE_THREAD
:

270 
func
 = 
evp
->
sigev_nŸify_fun˘i⁄
;

271 
	`func
 ( 
evp
->
sigev_vÆue
 );

274 
SIGEV_NONE
:

277 
SIGEV_THREAD_ID
:

278 
pid
 = 
evp
->
sigev_nŸify_thªad_id
;

279 
èrgë
 = 
pid
.
±r
;

281 i‡–!
èrgë
 || !
	`kthªad_is_Æive
 (target) ||

282 
pid
.
id
 !
	`kthªad_gë_id
 (
èrgë
) )

283  
ESRCH
;

285 
SIGEV_SIGNAL
:

286 
sig
.
si_signo
 = 
evp
->
sigev_signo
;

287 
sig
.
si_vÆue
 = 
evp
->
sigev_vÆue
;

288 
sig
.
si_code
 = 
code
;

289 
sig
.
si_î∫o
 = 0;

290 
sig
.
si_pid
.
id
 = 
	`kthªad_gë_id
 ( 
kthªad
 );

291 
sig
.
si_pid
.
±r
 = 
kthªad
;

293 
ªtvÆ
 = 
	`ksig«l_queue
 ( 
èrgë
, &
sig
 );

297 
SIGEV_THREAD
:

298 i‡–
evp
->
sigev_nŸify_fun˘i⁄
 )

300 i‡–!
	`kthªad_¸óã
 ( 
evp
->
sigev_nŸify_fun˘i⁄
,

301 
evp
->
sigev_vÆue
.
sivÆ_±r
, 0,

302 
SCHED_FIFO
, 
THREAD_DEF_PRIO
,

303 
NULL
, 0 ) )

304 
ªtvÆ
 = 
EINVAL
;

307 
ªtvÆ
 = 
EINVAL
;

312 
ªtvÆ
 = 
EINVAL
;

316  
ªtvÆ
;

317 
	}
}

329 
	$sys__sigqueue
 ( 
pid_t
 
pid
, 
signo
, 
sigvÆ_t
 
sigvÆ
 )

331 
±hªad_t
 
thªad
, 
£ndî
;

332 
kthªad_t
 *
kthªad
;

333 
sigöfo_t
 
sig
;

334 
ªtvÆ
;

336 
	`SYS_ENTRY
();

338 
	`ASSERT_ERRNO_AND_EXIT
 ( 
signo
 > 0 && signÿ<
SIGMAX
, 
EINVAL
 );

340 
thªad
 = (
±hªad_t
Ë
pid
;

341 
	`ASSERT_ERRNO_AND_EXIT
 ( 
thªad
.
±r
, 
EINVAL
 );

343 
kthªad
 = 
thªad
.
±r
;

344 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`kthªad_gë_id
 (
kthªad
Ë=
thªad
.
id
, 
EINVAL
 );

345 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`kthªad_check_kthªad
 ( 
kthªad
 ), 
EINVAL
 );

347 
£ndî
.
id
 = 
	`kthªad_gë_id
 (
NULL
);

348 
£ndî
.
±r
 = 
	`kthªad_gë_a˘ive
 ();

350 
sig
.
si_signo
 = 
signo
;

351 
sig
.
si_vÆue
 = 
sigvÆ
;

352 
sig
.
si_pid
 = 
£ndî
;

353 
sig
.
si_code
 = 
SI_USER
;

354 
sig
.
si_î∫o
 = 0;

356 
ªtvÆ
 = 
	`ksig«l_queue
 ( 
kthªad
, &
sig
 );

358 i‡–
ªtvÆ
 =
EXIT_SUCCESS
 )

359 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

361 
	`SYS_EXIT
 ( 
ªtvÆ
, 
EXIT_FAILURE
 );

362 
	}
}

371 
	$sys__±hªad_sigmask
 ( 
how
, 
sig£t_t
 *
£t
, sig£t_à*
o£t
 )

373 
ksig«l_h™dlög_t
 *
sh
;

374 
ªtvÆ
 = 
EXIT_SUCCESS
;

376 
	`SYS_ENTRY
();

378 
	`ASSERT_ERRNO_AND_EXIT
 ( 
£t
, 
EINVAL
 );

380 
sh
 = 
	`kthªad_gë_sig∑øms
 ( 
NULL
 );

382 i‡(
o£t
)

383 *
o£t
 = *
sh
->
mask
;

385  
how
 )

387 
SIG_BLOCK
:

388 
	`sigadd£ts
 ( 
sh
->
mask
, 
£t
 );

391 
SIG_UNBLOCK
:

392 
	`sigadd£ts
 ( 
sh
->
mask
, 
£t
 );

395 
SIG_SETMASK
:

396 *
sh
->
mask
 = *
£t
;

400 
ªtvÆ
 = 
EINVAL
;

404 i‡–
ªtvÆ
 =
EXIT_SUCCESS
 )

405 
	`ksig«l_¥o˚ss_≥ndög
 ( 
	`kthªad_gë_a˘ive
 () );

407 i‡–
ªtvÆ
 =
EXIT_SUCCESS
 )

408 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

410 
	`SYS_EXIT
 ( 
ªtvÆ
, 
EXIT_FAILURE
 );

411 
	}
}

420 
	$sys__siga˘i⁄
 ( 
sig
, 
siga˘i⁄_t
 *
a˘
, siga˘i⁄_à*
ﬂ˘
 )

422 
ksig«l_h™dlög_t
 *
sh
;

424 
	`SYS_ENTRY
();

426 
	`ASSERT_ERRNO_AND_EXIT
 ( 
sig
 > 0 && sig <
SIGMAX
, 
EINVAL
 );

428 
sh
 = 
	`kthªad_gë_sig∑øms
 ( 
NULL
 );

430 i‡–
ﬂ˘
 )

431 *
ﬂ˘
 = 
sh
->
a˘
[
sig
];

433 i‡–
a˘
 )

435 i‡–!–
a˘
->
ß_Êags
 & 
SA_SIGINFO
 ) )

436 
	`SYS_EXIT
 ( 
ENOTSUP
, 
EXIT_FAILURE
 );

438 i‡–
a˘
->
ß_siga˘i⁄
 =
SIG_ERR
 ||

439 
a˘
->
ß_siga˘i⁄
 =
SIG_DFL
 ||

440 
a˘
->
ß_siga˘i⁄
 =
SIG_IGN
 ||

441 
a˘
->
ß_siga˘i⁄
 =
SIG_HOLD
 )

443 
	`SYS_EXIT
 ( 
ENOTSUP
, 
EXIT_FAILURE
 );

446 
sh
->
a˘
[
sig
] = *act;

447 
	`sigdñ£t
 ( 
sh
->
mask
, 
sig
 );

450 
	`ksig«l_¥o˚ss_≥ndög
 ( 
	`kthªad_gë_a˘ive
 () );

453 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, EXIT_SUCCESS );

454 
	}
}

463 
	$sys__sigwaôöfo
 ( 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
 )

465 
kthªad_t
 *
kthªad
;

466 
ksig«l_h™dlög_t
 *
sh
;

467 
ksigöfo_t
 *
ksig
, *
√xt
;

468 
ªtvÆ
;

470 
	`SYS_ENTRY
();

472 
	`ASSERT_ERRNO_AND_EXIT
 ( 
£t
, 
EINVAL
 );

474 
kthªad
 = 
	`kthªad_gë_a˘ive
 ();

475 
sh
 = 
	`kthªad_gë_sig∑øms
 ( 
kthªad
 );

479 
ksig
 = 
	`li°_gë
 ( &
sh
->
≥ndög_sig«ls
, 
FIRST
 );

480  
ksig
 )

482 
√xt
 = 
	`li°_gë_√xt
 ( &
ksig
->
li°
 );

484 i‡–
	`sigã°£t
 ( 
£t
, 
ksig
->
sigöfo
.
si_signo
 ) )

486 
ªtvÆ
 = 
ksig
->
sigöfo
.
si_signo
;

487 i‡–
öfo
 )

488 *
öfo
 = 
ksig
->
sigöfo
;

490 
	`li°_ªmove
 ( &
sh
->
≥ndög_sig«ls
,

491 0, &
ksig
->
li°
 );

492 
	`k‰ì
 ( 
ksig
 );

494 
	`SYS_EXIT
 ( 
EXIT_SUCCESS
, 
ªtvÆ
 );

497 
ksig
 = 
√xt
;

504 
	`kthªad_su•íd
 ( 
kthªad
, 
ksig«l_ª˚ived_sig«l
, 
NULL
 );

506 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EINTR
 );

507 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad
, 
EXIT_FAILURE
 );

509 
	`kthªads_scheduÀ
 ();

511  
	`kthªad_gë_î∫o
(
NULL
Ë=
EAGAIN
 );

513 
	`SYS_EXIT
 ( 
	`kthªad_gë_î∫o
(
NULL
), 
	`kthªad_gë_sysˇŒ_ªtvÆ
(NULL) );

514 
	}
}

	@kernel/signal.h

2 #¥agm®
⁄˚


4 
	~<kî√l/sig«l.h
>

5 
	~<lib/li°.h
>

7 
	g_ksig«l_h™dlög_t_
;

8 
_ksig«l_h™dlög_t_
 
	tksig«l_h™dlög_t
;

10 
	~"thªad.h
"

13 
ksig«l_thªad_öô
 ( 
kthªad_t
 *
kthªad
 );

14 
ksig«l_queue
 ( 
kthªad_t
 *
ª˚ivî
, 
sigöfo_t
 *
sig
 );

15 
ksig«l_¥o˚ss_≥ndög
 ( 
kthªad_t
 *
kthªad
 );

16 
ksig«l_¥o˚ss_evít
 ( 
sigevít_t
 *
evp
, 
kthªad_t
 *
kthªad
, 
code
 );

18 
	s_ksig«l_h™dlög_t_


20 
sig£t_t
 *
	mmask
;

22 
siga˘i⁄_t
 
	ma˘
[
SIGMAX
];

24 
li°_t
 
	m≥ndög_sig«ls
;

28 #ifdef 
_K_SIGNAL_C_


32 
	s_ksigöfo_t_


34 
sigöfo_t
 
	msigöfo
;

35 
li°_h
 
	mli°
;

37 
	tksigöfo_t
;

	@kernel/startup.c

2 
	#_K_STARTUP_C_


	)

4 
	~"time.h
"

5 
	~"thªad.h
"

6 
	~"devi˚.h
"

7 
	~"mem‹y.h
"

8 
	~<kî√l/î∫o.h
>

9 
	~<kî√l/„©uªs.h
>

10 
	~<¨ch/öãºu±.h
>

11 
	~<lib/°rög.h
>

13 
	gsy°em_öfo
[] = 
OS_NAME
 ": " 
NAME_MAJOR
 ":" 
NAME_MINOR
 ", "

14 "Vîsi⁄: " 
VERSION
 " (" 
ARCH
 ")";

17 
uöt
 
	gkî√l_„©uªs
 = 
FEATURE_SUPPORTED
;

22 
	$k_°¨tup
 ()

24 *
k_°dout
;

27 
	`kdevi˚_£t_öôül_°dout
 ();

30 
	`k_mem‹y_öô
 ();

35 
	`¨ch_öô_öãºu±s
 ();

38 
	`¨ch_ªgi°î_öãºu±_h™dÀr
 ( 
INT_MEM_FAULT
, 
k_mem‹y_Áu…
, 
NULL
 );

39 
	`¨ch_ªgi°î_öãºu±_h™dÀr
 ( 
INT_UNDEF_FAULT
, 
k_mem‹y_Áu…
, 
NULL
 );

42 
	`k_time_öô
 ();

45 
	`k_devi˚s_öô
 ();

48 
k_°dout
 = 
	`k_devi˚_›í
 ( 
K_STDOUT
, 
O_WRONLY
 );

50 
	`k¥ötf
 ( "%s\n", 
sy°em_öfo
 );

53 
	`kthªads_öô
 ();

54 
	}
}

57 
uöt
 
	$sys__„©uª
 ( 
uöt
 
„©uªs
, 
cmd
, 
íabÀ
 )

59 
uöt
 
¥ev_°©e
 = 
kî√l_„©uªs
 & 
„©uªs
;

61 
	`ASSERT
 ( !–
„©uªs
 & ~
FEATURE_SUPPORTED
 ) );

63 i‡–
cmd
 =
FEATURE_GET
 )

64  
¥ev_°©e
;

67 i‡–
íabÀ
 )

68 
kî√l_„©uªs
 |
„©uªs
;

70 
kî√l_„©uªs
 &~
„©uªs
;

74 i‡––
„©uªs
 & 
FEATURE_INTERRUPTS
 ) )

76 i‡–
íabÀ
 )

77 
	`íabÀ_öãºu±s
 ();

79 
	`dißbÀ_öãºu±s
 ();

81 #ifde‡
SCHED_RR_SIMPLE


82 i‡––
„©uªs
 & 
FEATURE_SCHED_RR
 ) )

84 i‡–
íabÀ
 )

85 
	`ksched_º_°¨t_timî
 ();

87 
	`ksched_º_°›_timî
 ();

91  
¥ev_°©e
;

92 
	}
}

	@kernel/thread.c

2 
	#_K_THREAD_C_


	)

3 
	#_K_SCHED_


	)

4 
	~"thªad.h
"

6 
	~"mem‹y.h
"

7 
	~"devi˚.h
"

8 
	~"sched.h
"

9 
	~<¨ch/¥o˚ss‹.h
>

10 
	~<¨ch/öãºu±.h
>

11 
	~<ty≥s/bôs.h
>

12 
	~<lib/li°.h
>

13 
	~<lib/°rög.h
>

14 
	~<kî√l/î∫o.h
>

16 
li°_t
 
	gÆl_thªads
;

18 
kthªad_t
 *
	ga˘ive_thªad
 = 
NULL
;

20 
kthªad_ªmove_des¸ùt‹
 ( 
kthªad_t
 *
kthªad
 );

22 
idÀ_thªad
 ( *
∑øm
 );

26 
	$kthªads_öô
 ()

28 
¥io
;

30 
	`li°_öô
 ( &
Æl_thªads
 );

32 
a˘ive_thªad
 = 
NULL
;

33 
	`ksched_öô
 ();

35 (Ë
	`kthªad_¸óã
 ( 
idÀ_thªad
, 
NULL
, 0, 
SCHED_FIFO
, 0, NULL, 0 );

38 
pi
.
hóp
 = 
	`kmÆloc
 ( 
PROG_HEAP_SIZE
 );

39 
pi
.
hóp_size
 = 
PROG_HEAP_SIZE
;

41 
¥io
 = 
pi
.prio;

42 i‡–!
¥io
 )

43 
¥io
 = 
THREAD_DEF_PRIO
;

45 (Ë
	`kthªad_¸óã
 ( 
pi
.
öô
, 
NULL
, 0, 
SCHED_FIFO
, 
¥io
, NULL, 0 );

47 
	`kthªads_scheduÀ
 ();

48 
	}
}

60 
kthªad_t
 *
	$kthªad_¸óã
 ( *
°¨t_routöe
, *
¨g
, 
uöt
 
Êags
,

61 
sched_pﬁicy
, 
sched_¥i‹ôy
, *
°ackaddr
, 
size_t
 
°acksize
 )

63 
kthªad_t
 *
kthªad
;

66 
kthªad
 = 
	`kmÆloc
 (  (
kthªad_t
) );

67 
	`ASSERT
 ( 
kthªad
 );

70 
kthªad
->
id
 = 
	`k_√w_id
 ();

72 
kthªad
->
queue
 = 
NULL
;

73 
	`kthªadq_öô
 ( &
kthªad
->
joö_queue
 );

75 
	`kthªad_¸óã_√w_°©e
 ( 
kthªad
, 
°¨t_routöe
, 
¨g
,

76 
°ackaddr
, 
°acksize
, 
FALSE
 );

77 
kthªad
->
°©e
.
Êags
 = flags;

79 
	`li°_öô
 ( &
kthªad
->
°©es
 );

82 
kthªad
->
sig_h™dlög
.
mask
 = &kthªad->
°©e
.
sigmask
;

83 
	`ksig«l_thªad_öô
 ( 
kthªad
 );

84 
kthªad
->
°©e
.
sig_öt
 = 1;

86 
	`li°_≠≥nd
 ( &
Æl_thªads
, 
kthªad
, &kthªad->
Æl
 );

88 
kthªad
->
sched_pﬁicy
 = sched_policy;

89 i‡–
sched_¥i‹ôy
 < 0 )

90 
sched_¥i‹ôy
 = 0;

91 i‡–
sched_¥i‹ôy
 >
PRIO_LEVELS
 )

92 
sched_¥i‹ôy
 = 
PRIO_LEVELS
 - 1;

93 
kthªad
->
sched_¥i‹ôy
 = sched_priority;

95 
kthªad
->
ªf_˙t
 = 1;

96 
	`kthªad_move_to_ªady
 ( 
kthªad
, 
LAST
 );

98  
kthªad
;

99 
	}
}

102 
	$kthªad_¸óã_√w_°©e
 ( 
kthªad_t
 *
kthªad
,

103 *
°¨t_func
, *
∑øm
,

104 *
°ack
, 
size_t
 
°ack_size
,

105 
ßve_ﬁd_°©e
 )

107 
	`ASSERT
 ( 
kthªad
 );

110 i‡–
ßve_ﬁd_°©e
 )

112 
kthªad_°©e_t
 *
°©e
 = 
	`kmÆloc
 (  (kthread_state_t) );

113 *
°©e
 = 
kthªad
->state;

114 
	`li°_¥ïíd
 ( &
kthªad
->
°©es
, 
°©e
, &°©e->
li°
 );

117 
°ack_¥ovided
 = 
FALSE
;

119 i‡–!
°ack
 || !
°ack_size
 )

121 i‡–!
°ack_size
 )

122 
°ack_size
 = 
DEFAULT_THREAD_STACK_SIZE
;

124 
°ack
 = 
	`kmÆloc
 ( 
°ack_size
 );

126 
	`ASSERT
 ( 
°ack
 && 
°ack_size
 );

128 i‡–
°ack_¥ovided
 )

130 
kthªad
->
°©e
.
°ack
 = 
NULL
;

131 
kthªad
->
°©e
.
°ack_size
 = 0;

134 
kthªad
->
°©e
.
°ack
 = stack;

135 
kthªad
->
°©e
.
°ack_size
 = stack_size;

138 
	`¨ch_¸óã_thªad_c⁄ãxt
 ( &
kthªad
->
°©e
.
c⁄ãxt
, 
°¨t_func
, 
∑øm
,

139 
pi
.
exô
, 
°ack
, 
°ack_size
 );

141 
kthªad
->
°©e
.
Êags
 = 0;

142 
kthªad
->
°©e
.
ªtvÆ
 = 0;

143 
kthªad
->
°©e
.
î∫o
 = 0;

144 
kthªad
->
°©e
.
exô_°©us
 = 
NULL
;

145 
kthªad
->
°©e
.
µ¨am
 = 
NULL
;

147 
	`li°_öô
 ( &
kthªad
->
°©e
.
˛ónup
 );

148 
	}
}

151 
	$kthªad_ª°‹e_°©e
 ( 
kthªad_t
 *
kthªad
 )

153 
	`ASSERT
 ( 
kthªad
 );

155 
kthªad_°©e_t
 *
°©e
;

157 
kthªad_°©e_˛ónup_t
 *
ôî
;

158  (
ôî
 = 
	`li°_ªmove
 ( &
kthªad
->
°©e
.
˛ónup
, 
FIRST
, 
NULL
 )) )

160 
ôî
->
	`˛ónup
 ( iãr->
∑øm1
, iãr->
∑øm2
, iãr->
∑øm3
 );

161 
	`k‰ì
 (
ôî
);

165 i‡–
kthªad
->
°©e
.
°ack
 )

166 
	`k‰ì
 ( 
kthªad
->
°©e
.
°ack
 );

168 
ªtvÆ
 = 
FALSE
;

171 
°©e
 = 
	`li°_ªmove
 ( &
kthªad
->
°©es
, 
FIRST
, 
NULL
 );

172 i‡–
°©e
 )

174 
kthªad
->
°©e
 = *state;

175 
	`k‰ì
 ( 
°©e
 );

176 
ªtvÆ
 = 
TRUE
;

179  
ªtvÆ
;

180 
	}
}

183 
	$kthªad_su•íd
 ( 
kthªad_t
 *
kthªad
, *
wakeup_a˘i⁄
,

184 *
∑øm
 )

186 i‡–!
kthªad
 )

187 
kthªad
 = 
a˘ive_thªad
;

188 
	`ASSERT
 ( 
kthªad
 );

190 
	`ASSERT
 ( 
kthªad
->
°©e
.°©ê=
THR_STATE_ACTIVE
 ||

191 
kthªad
->
°©e
.°©ê=
THR_STATE_READY
 );

193 i‡–
kthªad
->
°©e
.°©ê=
THR_STATE_READY
 )

194 
	`kthªad_ªmove_‰om_ªady
 ( 
kthªad
 );

196 
kthªad
->
°©e
.°©ê
THR_STATE_SUSPENDED
;

197 
	`kthªad_£t_sig«l_öãºu±_h™dÀr
 ( 
kthªad
, 
wakeup_a˘i⁄
, 
∑øm
 );

200 
	}
}

203 
	$kthªad_£t_sig«l_öãºu±_h™dÀr
 (

204 
kthªad_t
 *
kthªad
, *
wakeup_a˘i⁄
, *
∑øm
 )

206 i‡–!
kthªad
 )

207 
kthªad
 = 
a˘ive_thªad
;

208 
	`ASSERT
 ( 
kthªad
 );

210 
kthªad
->
°©e
.
ˇn˚l_su•íd_h™dÀr
 = 
wakeup_a˘i⁄
;

211 
kthªad
->
°©e
.
ˇn˚l_su•íd_∑øm
 = 
∑øm
;

214 
	}
}

216 
	$kthªad_ªÀa£_¥em©uªly
 ( 
kthªad_t
 *
kthªad
, *
∑øm
 )

218 i‡–!
kthªad
 )

219 
kthªad
 = 
a˘ive_thªad
;

220 
	`ASSERT
 ( 
kthªad
 );

222 i‡–
kthªad
->
°©e
.°©ê=
THR_STATE_WAIT
 )

224 i‡–!
	`kthªadq_ªmove
 ( 
kthªad
->
queue
, kthread ) )

225 
	`ASSERT
 ( 
FALSE
 );

227 i‡–
kthªad
->
°©e
.°©ê=
THR_STATE_READY
 )

229 i‡–!
	`kthªad_ªmove_‰om_ªady
 ( 
kthªad
 ) )

230 
	`ASSERT
 ( 
FALSE
 );

232 
	}
}

236 
	$kthªad_add_˛ónup
 ( 
kthªad_t
 *
kthªad
, *
˛ónup_fun˘i⁄
,

237 
∑øm_t
 
∑øm1
,Ö¨am_à
∑øm2
,Ö¨am_à
∑øm3
 )

239 
	`ASSERT
 ( 
kthªad
 );

241 
kthªad_°©e_˛ónup_t
 *
˛ónup
;

242 
˛ónup
 = 
	`kmÆloc
 (  (
kthªad_°©e_˛ónup_t
) );

244 
˛ónup
->˛ónu∞
˛ónup_fun˘i⁄
;

245 
˛ónup
->
∑øm1
 =Öaram1;

246 
˛ónup
->
∑øm2
 =Öaram2;

247 
˛ónup
->
∑øm3
 =Öaram3;

249 
	`li°_≠≥nd
 ( &
kthªad
->
°©e
.
˛ónup
, cÀ™up, &˛ónup->
li°
 );

250 
	}
}

253 
	$kthªad_∑øm_‰ì
 ( 
∑øm_t
 
p1
,Ö¨am_à
p2
,Ö¨am_à
p3
 )

255 
	`k‰ì
 ( 
p1
.
p_±r
 );

256 
	}
}

262 
kthªad_exô2
 ( 
kthªad_t
 *
kthªad
, *
exô_°©us
, 
f‹˚
 );

264 
	$kthªad_exô
 ( 
kthªad_t
 *
kthªad
, *
exô_°©us
, 
f‹˚
 )

266 
	`ASSERT
 ( 
kthªad
 );

268 i‡–
kthªad
 =
a˘ive_thªad
 )

271 
	`¨ch_thªad_exô_wôh_°ack_swôch
(
kthªad
, 
exô_°©us
, 
f‹˚
);

272 
	`ASSERT
 ( 
FALSE
 );

274  
	`kthªad_exô2
 ( 
kthªad
, 
exô_°©us
, 
f‹˚
 );

275 
	}
}

277 
	$kthªad_exô2
 ( 
kthªad_t
 *
kthªad
, *
exô_°©us
, 
f‹˚
 )

279 
kthªad_°©e_t
 *
¥ev
;

280 
ª°‹ed
 = 
FALSE
;

281 
kthªad_t
 *
ªÀa£d
;

282 
kthªad_q
 *
q
;

283 **
p
;

285 
	`ASSERT
 ( 
kthªad
 );

288 
¥ev
 = 
	`li°_gë
 ( &
kthªad
->
°©es
, 
FIRST
 );

289 i‡–
¥ev
 )

290 
ª°‹ed
 = 
	`kthªad_ª°‹e_°©e
 ( 
kthªad
 );

292  
¥ev
 && 
f‹˚
 );

294 i‡–
ª°‹ed
 && !
f‹˚
 )

296 i‡–
kthªad
 =
a˘ive_thªad
 )

298 
kthªad
->
°©e
.°©ê
THR_STATE_ACTIVE
;

301 
	`ksig«l_¥o˚ss_≥ndög
 ( 
a˘ive_thªad
 );

303 
	`¨ch_swôch_to_thªad
 ( 
NULL
, &
a˘ive_thªad
->
°©e
.
c⁄ãxt
 );

304 
	`ASSERT
 ( 
FALSE
 );

309 
	`kthªads_scheduÀ
 ();

310  
EXIT_SUCCESS
;

316 i‡–
kthªad
->
°©e
.°©ê=
THR_STATE_PASSIVE
 )

317  
EXIT_SUCCESS
;

319 i‡–
kthªad
->
°©e
.°©ê=
THR_STATE_READY
 )

322 i‡–!
	`kthªad_ªmove_‰om_ªady
 ( 
kthªad
 ) )

323 
	`ASSERT
 ( 
FALSE
 );

325 i‡–
kthªad
->
°©e
.°©ê=
THR_STATE_WAIT
 )

328 i‡–!
	`kthªadq_ªmove
 ( 
kthªad
->
queue
, kthread ) )

329 
	`ASSERT
 ( 
FALSE
 );

331 i‡–
kthªad
->
°©e
.°©ê=
THR_STATE_SUSPENDED
 )

334 i‡–
kthªad
->
°©e
.
ˇn˚l_su•íd_h™dÀr
 )

335 
kthªad
->
°©e
.
	`ˇn˚l_su•íd_h™dÀr
 ( kthread,

336 
kthªad
->
°©e
.
ˇn˚l_su•íd_∑øm
 );

338 i‡–
kthªad
->
°©e
.°©ê=
THR_STATE_ACTIVE
 )

340 i‡–
kthªad
 !
a˘ive_thªad
 )

341  
ESRCH
;

344  
ESRCH
;

347 
kthªad
->
°©e
.°©ê
THR_STATE_PASSIVE
;

348 
kthªad
->
°©e
.
exô_°©us
 =Éxit_status;

351 
q
 = &
kthªad
->
joö_queue
;

353  (
ªÀa£d
 = 
	`kthªadq_ªmove
 ( 
q
, 
NULL
 )) != NULL )

356 
p
 = 
	`kthªad_gë_¥iv©e_∑øm
 ( 
ªÀa£d
 );

357 i‡–
p
 )

358 *
p
 = 
exô_°©us
;

360 
	`kthªad_move_to_ªady
 ( 
ªÀa£d
, 
LAST
 );

361 
kthªad
->
ªf_˙t
--;

365 
	`kthªad_ª°‹e_°©e
 ( 
kthªad
 );

366 
kthªad
->
ªf_˙t
--;

367 i‡–!
kthªad
->
ªf_˙t
 )

368 
	`kthªad_ªmove_des¸ùt‹
 ( 
kthªad
 );

370 i‡–
kthªad
 =
a˘ive_thªad
 )

372 
a˘ive_thªad
 = 
NULL
;

373 
	`kthªads_scheduÀ
 ();

376  
EXIT_SUCCESS
;

377 
	}
}

380 
	$kthªad_ªmove_des¸ùt‹
 ( 
kthªad_t
 *
kthªad
 )

382 
	`ASSERT
 ( 
kthªad
 );

384 
	`k_‰ì_id
 ( 
kthªad
->
id
 );

385 
kthªad
->
id
 = 0;

387 #ifde‡
DEBUG


388 
	`ASSERT
–
kthªad
 =
	`li°_föd_™d_ªmove
 (&
Æl_thªads
, &kthªad->
Æl
) );

390 (Ë
	`li°_ªmove
 ( &
Æl_thªads
, 0, &
kthªad
->
Æl
 );

393 
	`k‰ì
 ( 
kthªad
 );

394 
	}
}

400 
	$kthªad_waô_thªad
 ( 
kthªad_t
 *
waôög
, kthªad_à*
waôed
 )

402 
	`ASSERT
 ( 
waôed
 );

404 
waôed
->
ªf_˙t
++;

405 
	`kthªad_íqueue
 ( 
waôög
, &
waôed
->
joö_queue
, 0, 
NULL
, NULL );

406 
	}
}

409 
	$kthªad_cﬁÀ˘_°©us
 ( 
kthªad_t
 *
waôed
, **
ªtvÆ
 )

411 
	`ASSERT
 ( 
waôed
 );

413 i‡–
ªtvÆ
 )

414 *
ªtvÆ
 = 
waôed
->
°©e
.
exô_°©us
;

416 
waôed
->
ªf_˙t
--;

417 i‡–!
waôed
->
ªf_˙t
 )

418 
	`kthªad_ªmove_des¸ùt‹
 ( 
waôed
 );

419 
	}
}

422 
	$kthªad_swôch_to_thªad
 ( 
kthªad_t
 *
‰om
, kthªad_à*
to
 )

424 
	`ASSERT
 ( 
to
 =
a˘ive_thªad
 );

426 
	`¨ch_swôch_to_thªad
 (

427  ( 
‰om
 ? 
	`kthªad_gë_c⁄ãxt
 ( from ) : 
NULL
 ),

428  
	`kthªad_gë_c⁄ãxt
 ( 
to
 )

430 
	}
}

445 
	$kthªad_íqueue
 ( 
kthªad_t
 *
kthªad
, 
kthªad_q
 *
q
, 
sig_öt
,

446 *
wakeup_a˘i⁄
, *
∑øm
 )

448 
	`ASSERT
 ( ( 
kthªad
 || 
a˘ive_thªad
 ) && 
q
 );

450 i‡–!
kthªad
 )

451 
kthªad
 = 
a˘ive_thªad
;

453 
kthªad
->
°©e
.°©ê
THR_STATE_WAIT
;

454 
kthªad
->
queue
 = 
q
;

455 
kthªad
->
°©e
.
sig_öt
 = sig_int;

457 i‡–
sig_öt
 && 
wakeup_a˘i⁄
 =
NULL
 )

458 
wakeup_a˘i⁄
 = 
kthªad_ªÀa£_¥em©uªly
;

459 
	`kthªad_£t_sig«l_öãºu±_h™dÀr
 ( 
kthªad
, 
wakeup_a˘i⁄
, 
∑øm
 );

461 
	`kthªadq_≠≥nd
 ( 
kthªad
->
queue
, kthread );

462 
	}
}

469 
	$kthªadq_ªÀa£
 ( 
kthªad_q
 *
q
 )

471 
kthªad_t
 *
kthªad
;

473 
	`ASSERT
 ( 
q
 );

475 
kthªad
 = 
	`kthªadq_ªmove
 ( 
q
, 
NULL
 );

477 i‡–
kthªad
 )

479 
	`kthªad_move_to_ªady
 ( 
kthªad
, 
LAST
 );

480 
kthªad
->
°©e
.
sig_öt
 = 1;

487 
	}
}

494 
	$kthªadq_ªÀa£_Æl
 ( 
kthªad_q
 *
q
 )

496 
	`ASSERT
 ( 
q
 );

497 
˙t
 = 0;

499  
	`kthªadq_ªÀa£
 (
q
) )

500 
˙t
++;

502  
˙t
;

503 
	}
}

506 
	$kthªadq_öô
 ( 
kthªad_q
 *
q
 )

508 
	`ASSERT
 ( 
q
 );

509 
	`li°_öô
 ( &
q
->q );

510 
	}
}

511 
	$kthªadq_≠≥nd
 ( 
kthªad_q
 *
q
, 
kthªad_t
 *
kthªad
 )

513 
	`ASSERT
 ( 
kthªad
 && 
q
 );

514 
	`li°_≠≥nd
 ( &
q
->q, 
kthªad
, &kthªad->
li°
 );

515 
	}
}

516 
	$kthªadq_¥ïíd
 ( 
kthªad_q
 *
q
, 
kthªad_t
 *
kthªad
 )

518 
	`ASSERT
 ( 
kthªad
 && 
q
 );

519 
	`li°_¥ïíd
 ( &
q
->q, 
kthªad
, &kthªad->
li°
 );

520 
	}
}

521 
kthªad_t
 *
	$kthªadq_ªmove
 ( 
kthªad_q
 *
q
, 
kthªad_t
 *
kthªad
 )

523 
	`ASSERT
 ( 
q
 );

524 i‡–
kthªad
 )

525  
	`li°_föd_™d_ªmove
 ( &
q
->q, &
kthªad
->
li°
 );

527  
	`li°_ªmove
 ( &
q
->q, 
FIRST
, 
NULL
 );

528 
	}
}

529 
kthªad_t
 *
	$kthªadq_gë
 ( 
kthªad_q
 *
q
 )

531 
	`ASSERT
 ( 
q
 );

532  
	`li°_gë
 ( &
q
->q, 
FIRST
 );

533 
	}
}

534 
kthªad_t
 *
	$kthªadq_gë_√xt
 ( 
kthªad_t
 *
kthªad
 )

536 
	`ASSERT
 ( 
kthªad
 );

537  
	`li°_gë_√xt
 ( &
kthªad
->
li°
 );

538 
	}
}

541 
	$kthªad_gë_sched_pﬁicy
 ( 
kthªad_t
 *
kthªad
 )

543 i‡–
kthªad
 )

544  
kthªad
->
sched_pﬁicy
;

546  
a˘ive_thªad
->
sched_pﬁicy
;

547 
	}
}

549 
	$kthªad_gë_¥io
 ( 
kthªad_t
 *
kthªad
 )

551 i‡–
kthªad
 )

552  
kthªad
->
sched_¥i‹ôy
;

554  
a˘ive_thªad
->
sched_¥i‹ôy
;

555 
	}
}

556 
	$kthªad_£t_¥io
 ( 
kthªad_t
 *
kthªad
, 
¥io
 )

558 
kthªad_t
 *
kthr
 = 
kthªad
;

559 
ﬁd_¥io
;

561 i‡–!
kthr
 )

562 
kthr
 = 
a˘ive_thªad
;

564 
ﬁd_¥io
 = 
kthr
->
sched_¥i‹ôy
;

571  
kthr
->
°©e
.state )

573 
THR_STATE_ACTIVE
:

574 
kthr
->
sched_¥i‹ôy
 = 
¥io
;

575 
	`kthªad_move_to_ªady
 ( 
kthr
, 
LAST
 );

576 
	`kthªads_scheduÀ
 ();

579 
THR_STATE_READY
:

580 
	`kthªad_ªmove_‰om_ªady
 (
kthr
);

581 
kthr
->
sched_¥i‹ôy
 = 
¥io
;

582 
	`kthªad_move_to_ªady
 ( 
kthr
, 
LAST
 );

583 
	`kthªads_scheduÀ
 ();

586 
THR_STATE_WAIT
:

587 
kthr
->
sched_¥i‹ôy
 = 
¥io
;

590 
THR_STATE_PASSIVE
:

591 
kthr
->
sched_¥i‹ôy
 = 
¥io
;

595  
ﬁd_¥io
;

596 
	}
}

600 
	$kthªad_is_a˘ive
 ( 
kthªad_t
 *
kthªad
 )

602 
	`ASSERT
 ( 
kthªad
 );

603 i‡–
kthªad
->
°©e
.°©ê=
THR_STATE_ACTIVE
 )

604  
TRUE
;

606  
FALSE
;

607 
	}
}

609 
	$kthªad_is_ªady
 ( 
kthªad_t
 *
kthªad
 )

611 
	`ASSERT
 ( 
kthªad
 );

613  
kthªad
->
°©e
.°©ê=
THR_STATE_ACTIVE
 ||

614 
kthªad
->
°©e
.°©ê=
THR_STATE_READY
;

615 
	}
}

617 
	$kthªad_is_Æive
 ( 
kthªad_t
 *
kthªad
 )

619  
kthªad
->
°©e
.°©ê!
THR_STATE_PASSIVE
 &&

620 
	`kthªad_check_kthªad
 ( 
kthªad
 );

621 
	}
}

623 
	$kthªad_is_∑ssive
 ( 
kthªad_t
 *
kthªad
 )

625 
	`ASSERT
 ( 
kthªad
 );

626 i‡–
kthªad
->
°©e
.°©ê=
THR_STATE_PASSIVE
 )

627  
TRUE
;

629  
FALSE
;

630 
	}
}

632 
	$kthªad_is_su•íded
 (
kthªad_t
 *
kthªad
, **
func
, **
∑øm
)

634 i‡–!
kthªad
 )

635 
kthªad
 = 
a˘ive_thªad
;

637 i‡–
func
 )

638 *
func
 = 
kthªad
->
°©e
.
ˇn˚l_su•íd_h™dÀr
;

639 i‡–
∑øm
 )

640 *
∑øm
 = 
kthªad
->
°©e
.
ˇn˚l_su•íd_∑øm
;

642 i‡–
kthªad
->
°©e
.°©ê=
THR_STATE_SUSPENDED
 )

643  
TRUE
;

645  
FALSE
;

646 
	}
}

649 
	$kthªad_check_kthªad
 ( 
kthªad_t
 *
kthªad
 )

651  
kthªad
 && 
	`li°_föd
 ( &
Æl_thªads
, &kthªad->
Æl
 );

652 
	}
}

654 
	$kthªad_gë_id
 ( 
kthªad_t
 *
kthªad
 )

656 i‡–
kthªad
 )

657  
kthªad
->
id
;

659  
a˘ive_thªad
->
id
;

660 
	}
}

662 
kthªad_t
 *
	$kthªad_gë_a˘ive
 ()

664  
a˘ive_thªad
;

665 
	}
}

667 *
	$kthªad_gë_c⁄ãxt
 ( 
kthªad_t
 *
kthªad
 )

669 i‡–
kthªad
 )

670  &
kthªad
->
°©e
.
c⁄ãxt
;

672  &
a˘ive_thªad
->
°©e
.
c⁄ãxt
;

673 
	}
}

676 
kthªad_t
 *
	$kthªad_gë_des¸ùt‹
 ( 
±hªad_t
 *
thªad
 )

678 
kthªad_t
 *
kthªad
;

680 i‡–
thªad
 && (
kthªad
 =Åhªad->
±r
Ë&&Åhªad->
id
 == kthread->id &&

681 
kthªad
->
°©e
.°©ê!
THR_STATE_PASSIVE
 )

682  
kthªad
;

684  
NULL
;

685 
	}
}

687 *
	$kthªad_gë_sig∑øms
 ( 
kthªad_t
 *
kthªad
 )

689 i‡–!
kthªad
 )

690 
kthªad
 = 
a˘ive_thªad
;

691 
	`ASSERT
 ( 
kthªad
 );

692  &
kthªad
->
sig_h™dlög
;

693 
	}
}

695 
	$kthªad_gë_öãºu±abÀ
 ( 
kthªad_t
 *
kthªad
 )

697 i‡–!
kthªad
 )

698 
kthªad
 = 
a˘ive_thªad
;

699 
	`ASSERT
 ( 
kthªad
 );

700  
kthªad
->
°©e
.
sig_öt
;

701 
	}
}

703 
	$kthªad_£t_a˘ive
 ( 
kthªad_t
 *
kthªad
 )

705 
	`ASSERT
 ( 
kthªad
 );

706 
a˘ive_thªad
 = 
kthªad
;

707 
a˘ive_thªad
->
°©e
.°©ê
THR_STATE_ACTIVE
;

708 
a˘ive_thªad
->
queue
 = 
NULL
;

709 
	}
}

710 
	$kthªad_m¨k_ªady
 ( 
kthªad_t
 *
kthªad
 )

712 
	`ASSERT
 ( 
kthªad
 );

713 
kthªad
->
°©e
.°©ê
THR_STATE_READY
;

714 
	}
}

715 
	$kthªad_£t_queue
 ( 
kthªad_t
 *
kthªad
, 
kthªad_q
 *
queue
 )

717 
	`ASSERT
 ( 
kthªad
 && 
queue
 );

718 
kthªad
->
queue
 = queue;

719 
	}
}

720 
kthªad_q
 *
	$kthªad_gë_queue
 ( 
kthªad_t
 *
kthªad
 )

722 
	`ASSERT
 ( 
kthªad
 );

723  
kthªad
->
queue
;

724 
	}
}

728 
	$kthªad_£t_¥iv©e_∑øm
 ( 
kthªad_t
 *
kthªad
, *
µ¨am
 )

730 i‡–!
kthªad
 )

731 
kthªad
 = 
a˘ive_thªad
;

732 
kthªad
->
°©e
.
µ¨am
 =Öparam;

733 
	}
}

734 *
	$kthªad_gë_¥iv©e_∑øm
 ( 
kthªad_t
 *
kthªad
 )

736 i‡–!
kthªad
 )

737 
kthªad
 = 
a˘ive_thªad
;

738  
kthªad
->
°©e
.
µ¨am
;

739 
	}
}

743 
	$kthªad_£t_î∫o
 ( 
kthªad_t
 *
kthªad
, 
îr‹_numbî
 )

745 i‡–!
kthªad
 )

746 
kthªad
 = 
a˘ive_thªad
;

747 
kthªad
->
°©e
.
î∫o
 = 
îr‹_numbî
;

748 
	}
}

749 
	$kthªad_gë_î∫o
 ( 
kthªad_t
 *
kthªad
 )

751 i‡–
kthªad
 )

752  
kthªad
->
°©e
.
î∫o
;

754  
a˘ive_thªad
->
°©e
.
î∫o
;

755 
	}
}

756 *
	$kthªad_gë_î∫o_±r
 ( 
kthªad_t
 *
kthªad
 )

758 i‡–
kthªad
 )

759  &
kthªad
->
°©e
.
î∫o
;

761  &
a˘ive_thªad
->
°©e
.
î∫o
;

762 
	}
}

763 
	$kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad_t
 *
kthªad
, 
ªt_vÆ
 )

765 i‡–!
kthªad
 )

766 
kthªad
 = 
a˘ive_thªad
;

767 
	`ASSERT
 ( 
kthªad
 );

769 
kthªad
->
°©e
.
ªtvÆ
 = 
ªt_vÆ
;

770 
	}
}

771 
	$kthªad_gë_sysˇŒ_ªtvÆ
 ( 
kthªad_t
 *
kthªad
 )

773 i‡–!
kthªad
 )

774 
kthªad
 = 
a˘ive_thªad
;

775 
	`ASSERT
 ( 
kthªad
 );

777  
kthªad
->
°©e
.
ªtvÆ
;

778 
	}
}

782 
	$kthªad_öfo
 ()

784 
kthªad_t
 *
kthªad
;

785 
i
 = 1;

787 
	`k¥ötf
 ( "Threads info\n" );

789 
	`k¥ötf
 ( "[this]\tid=%d (desc.át %x)\n",

790 
a˘ive_thªad
->
id
,áctive_thread );

792 
	`k¥ötf
 ( "\tprio=%d, state=%d,Éxit_status=%x\n",

793 
a˘ive_thªad
->
sched_¥i‹ôy
,á˘ive_thªad->
°©e
.state,

794 
a˘ive_thªad
->
°©e
.
exô_°©us
 );

796 
kthªad
 = 
	`li°_gë
 ( &
Æl_thªads
, 
FIRST
 );

797  
kthªad
 )

799 
	`k¥ötf
 ( "[%d]\tid=%d (desc.át %x)\n",

800 
i
++, 
kthªad
->
id
, kthread );

802 
	`k¥ötf
 ( "\tprio=%d, state=%d,Éxit_status=%x\n",

803 
kthªad
->
sched_¥i‹ôy
, kthªad->
°©e
.state,

804 
kthªad
->
°©e
.
exô_°©us
 );

806 
kthªad
 = 
	`li°_gë_√xt
 ( &kthªad->
Æl
 );

810 
	}
}

814 
	$idÀ_thªad
 ( *
∑øm
 )

817 
	`su•íd
 ();

818 
	}
}

821 
	$kthªad_£tsched∑øm
 (
kthªad_t
 *
kthªad
, 
pﬁicy
, 
sched_∑øm_t
 *
∑øm
)

823 
sched_¥i‹ôy
;

825 
	`ASSERT_AND_RETURN_ERRNO
 ( 
kthªad
, 
EINVAL
 );

826 
	`ASSERT_AND_RETURN_ERRNO
 ( 
	`kthªad_is_Æive
 (
kthªad
), 
ESRCH
 );

827 
	`ASSERT_AND_RETURN_ERRNO
 ( 
pﬁicy
 >0 &&Öﬁicy < 
SCHED_NUM
, 
EINVAL
 );

829 i‡–
∑øm
 )

831 
	`ASSERT_AND_RETURN_ERRNO
 (

832 
∑øm
->
sched_¥i‹ôy
 >
THREAD_MIN_PRIO
 &&

833 
∑øm
->
sched_¥i‹ôy
 <
THREAD_MAX_PRIO
, 
EINVAL
 );

835 i‡–
∑øm
->
sched_¥i‹ôy
 )

836 
sched_¥i‹ôy
 = 
∑øm
->sched_priority;

838 
sched_¥i‹ôy
 = 
kthªad
->sched_priority;

841 
sched_¥i‹ôy
 = 
kthªad
->sched_priority;

845 i‡–
kthªad
->
sched_¥i‹ôy
 != sched_priority )

846 
	`kthªad_£t_¥io
 ( 
kthªad
, 
sched_¥i‹ôy
 );

848  
EXIT_SUCCESS
;

849 
	}
}

	@kernel/thread.h

2 #¥agm®
⁄˚


4 
	~<kî√l/thªad.h
>

5 
	~<lib/li°.h
>

8 #i‚de‡
_K_THREAD_C_


9 
	tkthªad_t
;

11 
	g_kthªad_t_
;

12 
_kthªad_t_
 
	tkthªad_t
;

16 
	~"mem‹y.h
"

17 
	~"sched.h
"

18 
	~"sig«l.h
"

19 
	~"time.h
"

22 
kthªads_öô
 ();

23 
kthªad_t
 *
kthªad_¸óã
 ( *
°¨t_routöe
, *
¨g
, 
uöt
 
Êags
,

24 
sched_pﬁicy
, 
sched_¥i‹ôy
, *
°ackaddr
, 
size_t
 
°acksize
 );

27 
kthªad_¸óã_√w_°©e
 ( 
kthªad_t
 *
kthªad
, *
°¨t_func
,

28 *
∑øm
, *
°ack
, 
size_t
 
°ack_size
, 
ßve_ﬁd_°©e
 );

29 
kthªad_ª°‹e_°©e
 ( 
kthªad_t
 *
kthªad
 );

32 
kthªad_su•íd
 (

33 
kthªad_t
 *
kthªad
, *
wakeup_a˘i⁄
, *
∑øm
 );

34 
kthªad_£t_sig«l_öãºu±_h™dÀr
 (

35 
kthªad_t
 *
kthªad
, *
wakeup_a˘i⁄
, *
∑øm
 );

39 
kthªad_add_˛ónup
 ( 
kthªad_t
 *
kthªad
, *
˛ónup_fun˘i⁄
,

40 
∑øm_t
 
∑øm1
,Ö¨am_à
∑øm2
,Ö¨am_à
∑øm3
 );

42 
kthªad_∑øm_‰ì
 ( 
∑øm_t
 
p1
,Ö¨am_à
p2
,Ö¨am_à
p3
 );

45 
kthªad_exô
 ( 
kthªad_t
 *
kthªad
, *
exô_°©us
, 
f‹˚
 );

46 
kthªad_waô_thªad
 ( 
kthªad_t
 *
waôög
, kthªad_à*
waôed
 );

47 
kthªad_cﬁÀ˘_°©us
 ( 
kthªad_t
 *
waôed
, **
ªtvÆ
 );

48 
kthªad_swôch_to_thªad
 ( 
kthªad_t
 *
‰om
, kthªad_à*
to
 );

49 
kthªad_˛ónup
 ( 
kthªad_t
 *
kthªad
 );

52 
kthªad_íqueue
 ( 
kthªad_t
 *
kthªad
, 
kthªad_q
 *
q_id
, 
sig_öt
,

53 *
wakeup_a˘i⁄
, *
∑øm
 );

54 
kthªadq_ªÀa£
 ( 
kthªad_q
 *
q_id
 );

55 
kthªadq_ªÀa£_Æl
 ( 
kthªad_q
 *
q_id
 );

58 
kthªadq_öô
 ( 
kthªad_q
 *
q
 );

59 
kthªadq_≠≥nd
 ( 
kthªad_q
 *
q
, 
kthªad_t
 *
kthªad
 );

60 
kthªadq_¥ïíd
 ( 
kthªad_q
 *
q
, 
kthªad_t
 *
kthªad
 );

61 
kthªad_t
 *
kthªadq_ªmove
 ( 
kthªad_q
 *
q
, kthªad_à*
kthªad
 );

62 
kthªad_t
 *
kthªadq_gë
 ( 
kthªad_q
 *
q
 );

63 
kthªad_t
 *
kthªadq_gë_√xt
 ( kthªad_à*
kthªad
 );

66 
kthªad_£tsched∑øm
 ( 
kthªad_t
 *
kthªad
, 
pﬁicy
,

67 
sched_∑øm_t
 *
∑øm
 );

70 
kthªad_gë_sched_pﬁicy
 ( 
kthªad_t
 *
kthªad
 );

73 
kthªad_gë_¥io
 ( 
kthªad_t
 *
kthªad
 );

74 
kthªad_£t_¥io
 ( 
kthªad_t
 *
kthªad
, 
¥io
 );

77 
kthªad_is_a˘ive
 ( 
kthªad_t
 *
kthªad
 );

78 
kthªad_is_ªady
 ( 
kthªad_t
 *
kthªad
 );

79 
kthªad_is_Æive
 ( 
kthªad_t
 *
kthªad
 );

80 
kthªad_is_∑ssive
 ( 
kthªad_t
 *
kthªad
 );

81 
kthªad_is_su•íded
 (
kthªad_t
 *, **
func
, **
∑øm
);

82 
kthªad_check_kthªad
 ( 
kthªad_t
 *
kthªad
 );

84 
kthªad_gë_id
 ( 
kthªad_t
 *
kthªad
 );

85 
kthªad_t
 *
kthªad_gë_a˘ive
 ();

86 *
kthªad_gë_c⁄ãxt
 ( 
kthªad_t
 *
thªad
 );

87 
kthªad_t
 *
kthªad_gë_des¸ùt‹
 ( 
±hªad_t
 *
thr
 );

90 *
kthªad_gë_sig∑øms
 ( 
kthªad_t
 *
kthªad
 );

92 
kthªad_gë_öãºu±abÀ
 ( 
kthªad_t
 *
kthªad
 );

95 
kthªad_£t_¥iv©e_∑øm
 (
kthªad_t
 *
kthªad
, *
qd©a
);

96 *
kthªad_gë_¥iv©e_∑øm
 ( 
kthªad_t
 *
kthªad
 );

99 
kthªad_£t_î∫o
 ( 
kthªad_t
 *
kthªad
, 
îr‹_numbî
 );

100 
kthªad_gë_î∫o
 ( 
kthªad_t
 *
kthªad
 );

101 *
kthªad_gë_î∫o_±r
 ( 
kthªad_t
 *
kthªad
 );

102 
kthªad_£t_sysˇŒ_ªtvÆ
 (
kthªad_t
 *
kthªad
, 
ªt_vÆ
);

103 
kthªad_gë_sysˇŒ_ªtvÆ
 (
kthªad_t
 *
kthªad
);

106 
kthªad_öfo
 ();

108 #ifde‡
_K_SCHED_


109 
kthªad_£t_a˘ive
 ( 
kthªad_t
 *
kthªad
 );

110 
kthªad_m¨k_ªady
 ( 
kthªad_t
 *
kthªad
 );

111 
kthªad_£t_queue
 ( 
kthªad_t
 *
kthªad
, 
kthªad_q
 *
queue
 );

112 
kthªad_q
 *
kthªad_gë_queue
 ( 
kthªad_t
 *
kthªad
 );

115 #ifde‡
_K_THREAD_C_


117 
	~<¨ch/c⁄ãxt.h
>

120 
	s_kthªad_°©e_t_


122 
	m°©e
;

125 
	mÊags
;

128 
c⁄ãxt_t
 
	mc⁄ãxt
;

131 
	mªtvÆ
;

134 
	mî∫o
;

137 *
	mexô_°©us
;

140 
	msig_öt
;

143 
sig£t_t
 
	msigmask
;

146 (*
	mˇn˚l_su•íd_h™dÀr
Ë(
	mkthªad_t
 *, *);

147 *
	mˇn˚l_su•íd_∑øm
;

152 *
	mµ¨am
;

157 *
	m°ack
;

158 
uöt
 
	m°ack_size
;

161 
li°_t
 
	m˛ónup
;

164 
li°_h
 
	mli°
;

166 
	tkthªad_°©e_t
;

169 
	s_kthªad_°©e_˛ónup_t_


171 (*
	m˛ónup
Ë–
	m∑øm_t
,Öaram_t,Öaram_t );

172 
∑øm_t
 
	m∑øm1
;

173 
∑øm_t
 
	m∑øm2
;

174 
∑øm_t
 
	m∑øm3
;

176 
li°_h
 
	mli°
;

178 
	tkthªad_°©e_˛ónup_t
;

182 
	s_kthªad_t_


184 
id_t
 
	mid
;

187 
kthªad_°©e_t
 
	m°©e
;

189 
li°_t
 
	m°©es
;

192 
	msched_pﬁicy
;

194 
	msched_¥i‹ôy
;

197 
kthªad_q
 *
	mqueue
;

200 
kthªad_q
 
	mjoö_queue
;

203 
ksig«l_h™dlög_t
 
	msig_h™dlög
;

206 
li°_h
 
	mli°
;

209 
li°_h
 
	mÆl
;

212 
	mªf_˙t
;

218 
	mTHR_STATE_ACTIVE
 = 1,

219 
	mTHR_STATE_READY
,

220 
	mTHR_STATE_WAIT
,

221 
	mTHR_STATE_SUSPENDED
,

222 
	mTHR_STATE_PASSIVE


225 
	#THR_FLAG_DELETE
 1

	)

	@kernel/time.c

2 
	#_K_TIME_C_


	)

4 
	~"time.h
"

6 
	~"thªad.h
"

7 
	~"mem‹y.h
"

8 
	~<kî√l/k¥öt.h
>

9 
	~<kî√l/î∫o.h
>

10 
	~<¨ch/time.h
>

11 
	~<¨ch/öãºu±.h
>

12 
	~<¨ch/¥o˚ss‹.h
>

13 
	~<ty≥s/bôs.h
>

15 
k˛ock_wake_thªad
 ( 
sigvÆ_t
 
sigvÆ
 );

16 
k˛ock_öãºu±_¶ìp
 ( 
kthªad_t
 *
kthªad
, *
∑øm
 );

17 
ktimî_cmp
 ( *
_a
, *
_b
 );

18 
ktimî_scheduÀ
 ();

21 
li°_t
 
	gktimîs
;

23 
time•ec_t
 
	gthªshﬁd
;

27 
	$k_time_öô
 ()

29 
	`¨ch_timî_öô
 ();

32 
	`li°_öô
 ( &
ktimîs
 );

34 
	`¨ch_gë_mö_öãrvÆ
 ( &
thªshﬁd
 );

35 
thªshﬁd
.
tv_n£c
 /= 2;

36 i‡–
thªshﬁd
.
tv_£c
 % 2 )

37 
thªshﬁd
.
tv_n£c
 += 500000000L;

38 
thªshﬁd
.
tv_£c
 /= 2;

40  
EXIT_SUCCESS
;

41 
	}
}

48 
	$k˛ock_gëtime
 ( 
˛ockid_t
 
˛ockid
, 
time•ec_t
 *
time
 )

50 
	`ASSERT
(
time
 && (
˛ockid
==
CLOCK_REALTIME
 || clockid==
CLOCK_MONOTONIC
));

52 
	`¨ch_gë_time
 ( 
time
 );

54  
EXIT_SUCCESS
;

55 
	}
}

62 
	$k˛ock_£âime
 ( 
˛ockid_t
 
˛ockid
, 
time•ec_t
 *
time
 )

64 
	`ASSERT
(
time
 && (
˛ockid
==
CLOCK_REALTIME
 || clockid==
CLOCK_MONOTONIC
));

66 
	`¨ch_£t_time
 ( 
time
 );

68  
EXIT_SUCCESS
;

69 
	}
}

75 
	$k˛ock_wake_thªad
 ( 
sigvÆ_t
 
sigvÆ
 )

77 
kthªad_t
 *
kthªad
;

78 
ktimî_t
 *
ktimî
;

80 
kthªad
 = 
sigvÆ
.
sivÆ_±r
;

81 
	`ASSERT
 ( 
kthªad
 );

83 i‡–
	`kthªad_check_kthªad
 ( 
kthªad
 ) &&

84 
	`kthªad_is_su•íded
 ( 
kthªad
, 
NULL
, NULL ) )

86 
ktimî
 = 
	`kthªad_gë_¥iv©e_∑øm
 ( 
kthªad
 );

87 
time•ec_t
 *
ªmaö
 = 
ktimî
->
∑øm
;

88 i‡–
ªmaö
 )

89 
	`TIME_RESET
 ( 
ªmaö
 );

91 
	`kthªad_move_to_ªady
 ( 
kthªad
, 
LAST
 );

93 
	`ktimî_dñëe
 ( 
ktimî
 );

103 
	`kthªads_scheduÀ
 ();

104 
	}
}

110 
	$k˛ock_öãºu±_¶ìp
 ( 
kthªad_t
 *
kthªad
, *
∑øm
 )

112 
ktimî_t
 *
ktimî
;

113 
time•ec_t
 *
ªmaö
;

114 
ôimî•ec_t
 
úem
;

116 
	`ASSERT
 ( 
kthªad
 && 
∑øm
 );

117 
	`ASSERT
 ( 
	`kthªad_check_kthªad
 ( 
kthªad
 ) );

118 
	`ASSERT
 ( 
	`kthªad_is_su•íded
 ( 
kthªad
, 
NULL
, NULL ) );

120 
ktimî
 = 
∑øm
;

121 
ªmaö
 = 
ktimî
->
∑øm
;

123 i‡–
ªmaö
 )

126 
time•ec_t
 
now
;

127 
	`k˛ock_gëtime
 ( 
CLOCK_REALTIME
, &
now
 );

128 
	`ktimî_gëtime
 ( 
ktimî
, &
úem
 );

129 *
ªmaö
 = 
úem
.
ô_vÆue
;

130 
	`time_sub
 ( 
ªmaö
, &
now
 );

133 
	`ktimî_dñëe
 (
ktimî
);

135 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad
, 
EXIT_FAILURE
 );

136 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EINTR
 );

137 
	}
}

147 
	$ktimî_cmp
 ( *
_a
, *
_b
 )

149 
ktimî_t
 *
a
 = 
_a
, *
b
 = 
_b
;

151  
	`time_cmp
 ( &
a
->
ôimî
.
ô_vÆue
, &
b
->itimer.it_value );

152 
	}
}

162 
	$ktimî_¸óã
 ( 
˛ockid_t
 
˛ockid
, 
sigevít_t
 *
evp
, 
ktimî_t
 **
_ktimî
,

163 *
ow√r
 )

165 
ktimî_t
 *
ktimî
;

166 
	`ASSERT
 ( 
˛ockid
 =
CLOCK_REALTIME
 || clockid =
CLOCK_MONOTONIC
 );

167 
	`ASSERT
 ( 
evp
 && 
_ktimî
 );

170 
ktimî
 = 
	`kmÆloc
 (  (
ktimî_t
) );

171 
	`ASSERT
 ( 
ktimî
 );

173 
ktimî
->
id
 = 
	`k_√w_id
 ();

174 
ktimî
->
˛ockid
 = clockid;

175 
ktimî
->
evp
 = *evp;

176 
ktimî
->
ow√r
 = owner;

177 
	`TIMER_DISARM
 ( 
ktimî
 );

178 
ktimî
->
∑øm
 = 
NULL
;

180 *
_ktimî
 = 
ktimî
;

182  
EXIT_SUCCESS
;

183 
	}
}

190 
	$ktimî_dñëe
 ( 
ktimî_t
 *
ktimî
 )

192 
	`ASSERT
 ( 
ktimî
 );

195 i‡–!
	`k_check_id
 ( 
ktimî
->
id
 ) )

199  
ENOENT
;

203 i‡–
	`TIMER_IS_ARMED
 ( 
ktimî
 ) )

205 
	`li°_ªmove
 ( &
ktimîs
, 0, &
ktimî
->
li°
 );

206 
	`ktimî_scheduÀ
 ();

209 
	`k_‰ì_id
 ( 
ktimî
->
id
 );

210 
	`k‰ì
 ( 
ktimî
 );

212  
EXIT_SUCCESS
;

213 
	}
}

223 
	$ktimî_£âime
 ( 
ktimî_t
 *
ktimî
, 
Êags
, 
ôimî•ec_t
 *
vÆue
,

224 
ôimî•ec_t
 *
ovÆue
 )

226 
time•ec_t
 
now
;

228 
	`ASSERT
 ( 
ktimî
 );

230 
	`k˛ock_gëtime
 ( 
ktimî
->
˛ockid
, &
now
 );

232 i‡–
ovÆue
 )

234 *
ovÆue
 = 
ktimî
->
ôimî
;

237 i‡–
	`TIME_IS_SET
 ( &
ovÆue
->
ô_vÆue
 ) )

238 
	`time_sub
 ( &
ovÆue
->
ô_vÆue
, &
now
 );

242 i‡–
	`TIMER_IS_ARMED
 ( 
ktimî
 ) )

244 
	`TIMER_DISARM
 ( 
ktimî
 );

245 
	`li°_ªmove
 ( &
ktimîs
, 0, &
ktimî
->
li°
 );

248 i‡–
vÆue
 && 
	`TIME_IS_SET
 ( &vÆue->
ô_vÆue
 ) )

251 
ktimî
->
ôimî
 = *
vÆue
;

252 i‡–!(
Êags
 & 
TIMER_ABSTIME
) )

253 
	`time_add
 ( &
ktimî
->
ôimî
.
ô_vÆue
, &
now
 );

255 
	`li°_s‹t_add
 ( &
ktimîs
, 
ktimî
, &ktimî->
li°
, 
ktimî_cmp
 );

258 
	`ktimî_scheduÀ
 ();

260  
EXIT_SUCCESS
;

261 
	}
}

269 
	$ktimî_gëtime
 ( 
ktimî_t
 *
ktimî
, 
ôimî•ec_t
 *
vÆue
 )

271 
	`ASSERT
–
ktimî
 && 
vÆue
 );

272 
time•ec_t
 
now
;

274 
	`k˛ock_gëtime
 ( 
ktimî
->
˛ockid
, &
now
 );

276 *
vÆue
 = 
ktimî
->
ôimî
;

279 i‡–
	`TIME_IS_SET
 ( &
vÆue
->
ô_vÆue
 ) )

280 
	`time_sub
 ( &
vÆue
->
ô_vÆue
, &
now
 );

282  
EXIT_SUCCESS
;

283 
	}
}

286 
	$ktimî_scheduÀ
 ()

288 
ktimî_t
 *
fú°
, *
√xt
;

289 
time•ec_t
 
time
, 
ªf_time
;

290 
ªsched
 = 0;

292 i‡–!
	`sys__„©uª
 ( 
FEATURE_TIMERS
, 
FEATURE_GET
, 0 ) )

295 
	`k˛ock_gëtime
 ( 
CLOCK_REALTIME
, &
time
 );

298 
ªf_time
 = 
time
;

299 
	`time_add
 ( &
ªf_time
, &
thªshﬁd
 );

303 
fú°
 = 
	`li°_gë
 ( &
ktimîs
, 
FIRST
 );

304  
fú°
 !
NULL
 )

307 i‡–
	`time_cmp
 ( &
fú°
->
ôimî
.
ô_vÆue
, &
ªf_time
 ) <= 0 )

312 
fú°
 = 
	`li°_ªmove
 ( &
ktimîs
, 
FIRST
, 
NULL
 );

315 i‡–
	`TIME_IS_SET
 ( &
fú°
->
ôimî
.
ô_öãrvÆ
) )

318 
	`time_add
 ( &
fú°
->
ôimî
.
ô_vÆue
,

319 &
fú°
->
ôimî
.
ô_öãrvÆ
 );

321 
	`li°_s‹t_add
 ( &
ktimîs
, 
fú°
,

322 &
fú°
->
li°
, 
ktimî_cmp
 );

325 
	`TIMER_DISARM
 ( 
fú°
 );

335 
√xt
 = 
	`li°_gë
 ( &
ktimîs
, 
FIRST
 );

336 i‡–
√xt
 !
NULL
 )

338 
ªf_time
 = 
√xt
->
ôimî
.
ô_vÆue
;

339 
	`time_sub
 ( &
ªf_time
, &
time
 );

340 
	`¨ch_timî_£t
 ( &
ªf_time
, 
ktimî_scheduÀ
 );

344 i‡–
fú°
->
ow√r
 =
NULL
 )

347 i‡–
fú°
->
evp
.
sigev_nŸify_fun˘i⁄
 )

348 
fú°
->
evp
.
	`sigev_nŸify_fun˘i⁄
 (

349 
fú°
->
evp
.
sigev_vÆue


354 i‡–!
	`ksig«l_¥o˚ss_evít
 (

355 &
fú°
->
evp
, fú°->
ow√r
, 
SI_TIMER
 ) )

357 
ªsched
++;

362 
	`k˛ock_gëtime
 ( 
CLOCK_REALTIME
, &
time
 );

363 
ªf_time
 = 
time
;

364 
	`time_add
 ( &
ªf_time
, &
thªshﬁd
 );

366 
fú°
 = 
	`li°_gë
 ( &
ktimîs
, 
FIRST
 );

369 
fú°
 = 
	`li°_gë
 ( &
ktimîs
, 
FIRST
 );

370 i‡–
fú°
 )

372 
ªf_time
 = 
fú°
->
ôimî
.
ô_vÆue
;

373 
	`time_sub
 ( &
ªf_time
, &
time
 );

374 
	`¨ch_timî_£t
 ( &
ªf_time
, 
ktimî_scheduÀ
 );

380 i‡–
ªsched
 )

381 
	`kthªads_scheduÀ
 ();

382 
	}
}

393 
	$sys__˛ock_gëtime
 ( 
˛ockid_t
 
˛ockid
, 
time•ec_t
 *
time
 )

395 
ªtvÆ
;

397 
	`SYS_ENTRY
();

399 
	`ASSERT_ERRNO_AND_EXIT
 (

400 
time
 && (
˛ockid
==
CLOCK_REALTIME
 || clockid==
CLOCK_MONOTONIC
),

401 
EINVAL


404 
ªtvÆ
 = 
	`k˛ock_gëtime
 ( 
˛ockid
, 
time
 );

406 
	`SYS_EXIT
 ( 
ªtvÆ
,Ñetval );

407 
	}
}

415 
	$sys__˛ock_£âime
 ( 
˛ockid_t
 
˛ockid
, 
time•ec_t
 *
time
 )

417 
ªtvÆ
;

419 
	`SYS_ENTRY
();

421 
	`ASSERT_ERRNO_AND_EXIT
 (

422 
time
 && (
˛ockid
==
CLOCK_REALTIME
 || clockid==
CLOCK_MONOTONIC
),

423 
EINVAL


426 
ªtvÆ
 = 
	`k˛ock_£âime
 ( 
˛ockid
, 
time
 );

428 
	`SYS_EXIT
 ( 
ªtvÆ
,Ñetval );

429 
	}
}

440 
	$sys__˛ock_«no¶ìp
 ( 
˛ockid_t
 
˛ockid
, 
Êags
,

441 
time•ec_t
 *
ªque°
,Åime•ec_à*
ªmaö
 )

443 
ªtvÆ
 = 
EXIT_SUCCESS
;

444 
kthªad_t
 *
kthªad
 = 
	`kthªad_gë_a˘ive
 ();

445 
ktimî_t
 *
ktimî
;

446 
sigevít_t
 
evp
;

447 
ôimî•ec_t
 
ôimî
;

449 
	`SYS_ENTRY
();

451 
	`ASSERT_ERRNO_AND_EXIT
 (

452 (
˛ockid
==
CLOCK_REALTIME
 || clockid==
CLOCK_MONOTONIC
) &&

453 
ªque°
 && 
	`TIME_IS_SET
(request),

454 
EINVAL


460 
evp
.
sigev_nŸify
 = 
SIGEV_WAKE_THREAD
;

461 
evp
.
sigev_vÆue
.
sivÆ_±r
 = 
kthªad
;

462 
evp
.
sigev_nŸify_fun˘i⁄
 = 
k˛ock_wake_thªad
;

464 
ªtvÆ
 +
	`ktimî_¸óã
 ( 
˛ockid
, &
evp
, &
ktimî
, 
kthªad
 );

465 
	`ASSERT
 ( 
ªtvÆ
 =
EXIT_SUCCESS
 );

468 
ktimî
->
∑øm
 = 
ªmaö
;

471 
	`kthªad_£t_¥iv©e_∑øm
 ( 
kthªad
, 
ktimî
 );

472 
ªtvÆ
 +
	`kthªad_su•íd
 ( 
kthªad
, 
k˛ock_öãºu±_¶ìp
, 
ktimî
 );

473 
	`ASSERT
 ( 
ªtvÆ
 =
EXIT_SUCCESS
 );

476 
	`TIME_RESET
 ( &
ôimî
.
ô_öãrvÆ
 );

477 
ôimî
.
ô_vÆue
 = *
ªque°
;

479 
ªtvÆ
 +
	`ktimî_£âime
 ( 
ktimî
, 
Êags
, &
ôimî
, 
NULL
 );

480 
	`ASSERT
 ( 
ªtvÆ
 =
EXIT_SUCCESS
 );

482 
	`kthªad_£t_î∫o
 ( 
kthªad
, 
EXIT_SUCCESS
 );

483 
	`kthªad_£t_sysˇŒ_ªtvÆ
 ( 
kthªad
, 
ªtvÆ
 );

486 
	`kthªads_scheduÀ
 ();

488 
	`SYS_EXIT
 ( 
	`kthªad_gë_î∫o
(
NULL
), 
	`kthªad_gë_sysˇŒ_ªtvÆ
(NULL) );

489 
	}
}

498 
	$sys__timî_¸óã
 ( 
˛ockid_t
 
˛ockid
, 
sigevít_t
 *
evp
, 
timî_t
 *
timîid
 )

500 
ktimî_t
 *
ktimî
;

501 
ªtvÆ
;

502 
kobje˘_t
 *
kobj
;

504 
	`SYS_ENTRY
();

506 
	`ASSERT_ERRNO_AND_EXIT
 (

507 
˛ockid
 =
CLOCK_REALTIME
 || clockid =
CLOCK_MONOTONIC
, 
EINVAL
 );

508 
	`ASSERT_ERRNO_AND_EXIT
 ( 
evp
 && 
timîid
, 
EINVAL
 );

510 
ªtvÆ
 = 
	`ktimî_¸óã
 ( 
˛ockid
, 
evp
, &
ktimî
, 
	`kthªad_gë_a˘ive
() );

511 i‡–
ªtvÆ
 =
EXIT_SUCCESS
 )

513 
kobj
 = 
	`kmÆloc_kobje˘
 ( 0 );

514 
kobj
->
kobje˘
 = 
ktimî
;

515 
timîid
->
id
 = 
ktimî
->id;

516 
timîid
->
±r
 = 
kobj
;

519 
	`SYS_EXIT
 ( 
ªtvÆ
,Ñetval );

520 
	}
}

527 
	$sys__timî_dñëe
 ( 
timî_t
 *
timîid
 )

529 
ktimî_t
 *
ktimî
;

530 
ªtvÆ
;

531 
kobje˘_t
 *
kobj
;

533 
	`SYS_ENTRY
();

535 
	`ASSERT_ERRNO_AND_EXIT
 ( 
timîid
, 
EINVAL
 );

536 
kobj
 = 
timîid
->
±r
;

537 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

538 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

539 
EINVAL
 );

541 
ktimî
 = 
kobj
->
kobje˘
;

542 
	`ASSERT_ERRNO_AND_EXIT
 ( 
ktimî
 && ktimî->
id
 =
timîid
->id, 
EINVAL
 );

544 
ªtvÆ
 = 
	`ktimî_dñëe
 ( 
ktimî
 );

546 
	`k‰ì_kobje˘
 ( 
kobj
 );

548 
	`SYS_EXIT
 ( 
ªtvÆ
,Ñetval );

549 
	}
}

559 
	$sys__timî_£âime
 ( 
timî_t
 *
timîid
, 
Êags
,

560 
ôimî•ec_t
 *
vÆue
, itimî•ec_à*
ovÆue
 )

562 
ktimî_t
 *
ktimî
;

563 
ªtvÆ
;

564 
kobje˘_t
 *
kobj
;

566 
	`SYS_ENTRY
();

568 
	`ASSERT_ERRNO_AND_EXIT
 ( 
timîid
, 
EINVAL
 );

569 
kobj
 = 
timîid
->
±r
;

570 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

571 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

572 
EINVAL
 );

574 
ktimî
 = 
kobj
->
kobje˘
;

575 
	`ASSERT_ERRNO_AND_EXIT
 ( 
ktimî
 && ktimî->
id
 =
timîid
->id, 
EINVAL
 );

577 
ªtvÆ
 = 
	`ktimî_£âime
 ( 
ktimî
, 
Êags
, 
vÆue
, 
ovÆue
 );

579 
	`SYS_EXIT
 ( 
ªtvÆ
,Ñetval );

580 
	}
}

588 
	$sys__timî_gëtime
 ( 
timî_t
 *
timîid
, 
ôimî•ec_t
 *
vÆue
 )

590 
ktimî_t
 *
ktimî
;

591 
ªtvÆ
;

592 
kobje˘_t
 *
kobj
;

594 
	`SYS_ENTRY
();

596 
	`ASSERT_ERRNO_AND_EXIT
 ( 
timîid
, 
EINVAL
 );

597 
kobj
 = 
timîid
->
±r
;

598 
	`ASSERT_ERRNO_AND_EXIT
 ( 
kobj
, 
EINVAL
 );

599 
	`ASSERT_ERRNO_AND_EXIT
 ( 
	`li°_föd
 ( &
kobje˘s
, &
kobj
->
li°
 ),

600 
EINVAL
 );

602 
ktimî
 = 
kobj
->
kobje˘
;

603 
	`ASSERT_ERRNO_AND_EXIT
 ( 
ktimî
 && ktimî->
id
 =
timîid
->id, 
EINVAL
 );

605 
ªtvÆ
 = 
	`ktimî_gëtime
 ( 
ktimî
, 
vÆue
 );

607 
	`SYS_EXIT
 ( 
ªtvÆ
,Ñetval );

608 
	}
}

	@kernel/time.h

2 #¥agm®
⁄˚


4 
	~<kî√l/time.h
>

8 #i‚de‡
_K_TIME_C_


9 
	tktimî_t
;

11 
	g_ktimî_t_
; 
_ktimî_t_
 
	tktimî_t
;

14 
k_time_öô
 ();

15 
k˛ock_gëtime
 ( 
˛ockid_t
 
˛ockid
, 
time•ec_t
 *
time
 );

16 
k˛ock_£âime
 ( 
˛ockid_t
 
˛ockid
, 
time•ec_t
 *
time
 );

18 
ktimî_¸óã
 ( 
˛ockid_t
 
˛ockid
, 
sigevít_t
 *
evp
, 
ktimî_t
 **
_ktimî
,

19 *
ow√r
 );

20 
ktimî_dñëe
 ( 
ktimî_t
 *
ktimî
 );

21 
ktimî_£âime
 ( 
ktimî_t
 *
ktimî
, 
Êags
, 
ôimî•ec_t
 *
vÆue
,

22 
ôimî•ec_t
 *
ovÆue
 );

23 
ktimî_gëtime
 ( 
ktimî_t
 *
ktimî
, 
ôimî•ec_t
 *
vÆue
 );

26 
	#SIGEV_WAKE_THREAD
 (
SIGEV_THREAD_ID
 + 1)

	)

29 #ifdef 
_K_TIME_C_


32 
	~<lib/li°.h
>

35 
	s_ktimî_t_


37 
id_t
 
	mid
;

40 
˛ockid_t
 
	m˛ockid
;

42 
sigevít_t
 
	mevp
;

44 
ôimî•ec_t
 
	môimî
;

46 *
	mow√r
;

49 *
	m∑øm
;

52 
li°_h
 
	mli°
;

56 
	#TIMER_IS_ARMED
(
T
Ë
	`TIME_IS_SET
 ( &(T)->
ôimî
.
ô_vÆue
 )

	)

57 
	#TIMER_DISARM
(
T
Ë
	`TIME_RESET
 ( &(T)->
ôimî
.
ô_vÆue
 )

	)

	@lib/list.c

12 
	~<lib/li°.h
>

14 #ö˛udê
ASSERT_H


16 
	$li°_öô
 ( 
li°_t
 *
li°
 )

18 
	`ASSERT
 ( 
li°
 );

20 
li°
->
fú°
 =Üi°->
œ°
 = 
NULL
;

21 
	}
}

24 
	$li°_≠≥nd
 ( 
li°_t
 *
li°
, *
obje˘
, 
li°_h
 *
hdr
 )

26 
	`ASSERT
 ( 
li°
 && 
obje˘
 && 
hdr
 );

28 
hdr
->
obje˘
 = object;

29 
hdr
->
√xt
 = 
NULL
;

31 i‡–
li°
->
fú°
 )

33 
li°
->
œ°
->
√xt
 = 
hdr
;

34 
hdr
->
¥ev
 = 
li°
->
œ°
;

35 
li°
->
œ°
 = 
hdr
;

38 
li°
->
fú°
 =Üi°->
œ°
 = 
hdr
;

39 
hdr
->
¥ev
 = 
NULL
;

41 
	}
}

44 
	$li°_¥ïíd
 ( 
li°_t
 *
li°
, *
obje˘
, 
li°_h
 *
hdr
 )

46 
	`ASSERT
 ( 
li°
 && 
obje˘
 && 
hdr
 );

48 
hdr
->
obje˘
 = object;

49 
hdr
->
¥ev
 = 
NULL
;

51 
hdr
->
√xt
 = 
li°
->
fú°
;

53 i‡–
li°
->
fú°
 )

54 
li°
->
fú°
->
¥ev
 = 
hdr
;

56 
li°
->
œ°
 = 
hdr
;

58 
li°
->
fú°
 = 
hdr
;

59 
	}
}

62 
li°_s‹t_add
 ( 
li°_t
 *
li°
, *
obje˘
, 
li°_h
 *
hdr
,

63 (*
cmp
) ( *, * ) )

65 
li°_h
 *
ôî
;

67 
	`ASSERT
 ( 
li°
 && 
obje˘
 && 
hdr
 && 
cmp
 );

69 
hdr
->
obje˘
 = object;

72 i‡–
li°
->
œ°
 && 
	`cmp
 ( 
obje˘
,Üist->last->object ) >= 0 )

73 
ôî
 = 
NULL
;

75 
ôî
 = 
li°
->
fú°
;

77  
ôî
 && 
	`cmp
 ( 
obje˘
, iter->object ) >= 0 )

78 
ôî
 = iãr->
√xt
;

81 
hdr
->
√xt
 = 
ôî
;

83 i‡–
ôî
 )

85 
hdr
->
¥ev
 = 
ôî
->prev;

86 i‡–
ôî
->
¥ev
 )

87 
ôî
->
¥ev
->
√xt
 = 
hdr
;

89 
li°
->
fú°
 = 
hdr
;

90 
ôî
->
¥ev
 = 
hdr
;

94 i‡–
li°
->
œ°
 )

97 
hdr
->
¥ev
 = 
li°
->
œ°
;

98 
li°
->
œ°
->
√xt
 = 
hdr
;

99 
li°
->
œ°
 = 
hdr
;

103 
li°
->
fú°
 =Üi°->
œ°
 = 
hdr
;

104 
hdr
->
¥ev
 = 
NULL
;

107 
	}
}

110 *
	$li°_gë
 ( 
li°_t
 *
li°
, 
Êags
 )

112 
li°_h
 *
hdr
;

114 
	`ASSERT
 ( 
li°
 );

116 i‡–
Êags
 & 
LAST
 )

117 
hdr
 = 
li°
->
œ°
;

119 
hdr
 = 
li°
->
fú°
;

121 i‡–
hdr
 )

122  
hdr
->
obje˘
;

124  
NULL
;

125 
	}
}

128 *
	$li°_gë_√xt
 ( 
li°_h
 *
hdr
 )

130 i‡–!
hdr
 || !hdr->
√xt
 )

131  
NULL
;

133  
hdr
->
√xt
->
obje˘
;

134 
	}
}

145 *
	$li°_ªmove
 ( 
li°_t
 *
li°
, 
Êags
, 
li°_h
 *
ªf
 )

147 
li°_h
 *
hdr
;

149 
	`ASSERT
 ( 
li°
 );

151 i‡–
ªf
 )

152 
hdr
 = 
ªf
;

153 i‡–
Êags
 & 
LAST
 )

154 
hdr
 = 
li°
->
œ°
;

156 
hdr
 = 
li°
->
fú°
;

158 i‡–
hdr
 )

160 i‡–
hdr
->
¥ev
 )

161 
hdr
->
¥ev
->
√xt
 = hdr->next;

163 i‡–
hdr
->
√xt
 )

164 
hdr
->
√xt
->
¥ev
 = hdr->prev;

166 i‡–
li°
->
fú°
 =
hdr
 )

167 
li°
->
fú°
 = 
hdr
->
√xt
;

169 i‡–
li°
->
œ°
 =
hdr
 )

170 
li°
->
œ°
 = 
hdr
->
¥ev
;

172  
hdr
->
obje˘
;

175  
NULL
;

177 
	}
}

185 *
	$li°_föd
 ( 
li°_t
 *
li°
, 
li°_h
 *
ªf
 )

187 
li°_h
 *
ôî
;

189 
	`ASSERT
 ( 
li°
 && 
ªf
 );

191 
ôî
 = 
li°
->
fú°
;

192  
ôî
 )

194 i‡–
ôî
 =
ªf
 )

195  
ªf
;

197 
ôî
 = iãr->
√xt
;

200  
NULL
;

201 
	}
}

209 *
	$li°_föd_™d_ªmove
 ( 
li°_t
 *
li°
, 
li°_h
 *
ªf
 )

211 i‡–
	`li°_föd
 ( 
li°
, 
ªf
 ) )

213 i‡–
ªf
->
¥ev
 )

214 
ªf
->
¥ev
->
√xt
 =Ñef->next;

216 i‡–
ªf
->
√xt
 )

217 
ªf
->
√xt
->
¥ev
 =Ñef->prev;

219 i‡–
li°
->
fú°
 =
ªf
 )

220 
li°
->
fú°
 = 
ªf
->
√xt
;

222 i‡–
li°
->
œ°
 =
ªf
 )

223 
li°
->
œ°
 = 
ªf
->
¥ev
;

225  
ªf
->
obje˘
;

228  
NULL
;

229 
	}
}

	@lib/mm/ff_simple.c

3 
	#_FF_SIMPLE_C_


	)

4 
	~<lib/ff_sim∂e.h
>

6 #i‚de‡
ASSERT


7 #ö˛udê
ASSERT_H


16 *
	$ffs_öô
 ( *
mem_£gm
, 
size_t
 
size
 )

18 
size_t
 
°¨t
, 
íd
;

19 
ffs_hdr_t
 *
chunk
, *
b‹dî
;

20 
ffs_mpoﬁ_t
 *
mpoﬁ
;

22 
	`ASSERT
 ( 
mem_£gm
 && 
size
 >  (
ffs_hdr_t
) * 2 );

25 
°¨t
 = (
size_t
Ë
mem_£gm
;

26 
íd
 = 
°¨t
 + 
size
;

27 
	`ALIGN_FW
 ( 
°¨t
 );

28 
mpoﬁ
 = (*Ë
°¨t
;

29 
°¨t
 + (
ffs_mpoﬁ_t
);

30 
	`ALIGN
 ( 
íd
 );

32 
mpoﬁ
->
fú°
 = 
NULL
;

34 i‡–
íd
 - 
°¨t
 < 2 * 
HEADER_SIZE
 )

35  
NULL
;

37 
b‹dî
 = (
ffs_hdr_t
 *Ë
°¨t
;

38 
b‹dî
->
size
 =  (
size_t
);

39 
	`MARK_USED
 ( 
b‹dî
 );

41 
chunk
 = 
	`GET_AFTER
 ( 
b‹dî
 );

42 
chunk
->
size
 = 
íd
 - 
°¨t
 - 2 * (
size_t
);

43 
	`MARK_FREE
 ( 
chunk
 );

44 
	`CLONE_SIZE_TO_TAIL
 ( 
chunk
 );

46 
b‹dî
 = 
	`GET_AFTER
 ( 
chunk
 );

47 
b‹dî
->
size
 =  (
size_t
);

48 
	`MARK_USED
 ( 
b‹dî
 );

50 
	`ffs_ö£π_chunk
 ( 
mpoﬁ
, 
chunk
 );

52  
mpoﬁ
;

53 
	}
}

61 *
	$ffs_Æloc
 ( 
ffs_mpoﬁ_t
 *
mpoﬁ
, 
size_t
 
size
 )

63 
ffs_hdr_t
 *
ôî
, *
chunk
;

65 
	`ASSERT
 ( 
mpoﬁ
 );

67 
size
 + (
size_t
) * 2;

68 i‡–
size
 < 
HEADER_SIZE
 )

69 
size
 = 
HEADER_SIZE
;

72 
	`ALIGN_FW
 ( 
size
 );

74 
ôî
 = 
mpoﬁ
->
fú°
;

75  
ôî
 !
NULL
 && iãr->
size
 < size )

76 
ôî
 = iãr->
√xt
;

78 i‡–
ôî
 =
NULL
 )

79  
NULL
;

81 i‡–
ôî
->
size
 >sizê+ 
HEADER_SIZE
 )

85 
ôî
->
size
 -= size;

86 
	`CLONE_SIZE_TO_TAIL
 ( 
ôî
 );

88 
chunk
 = 
	`GET_AFTER
 ( 
ôî
 );

89 
chunk
->
size
 = size;

92 
chunk
 = 
ôî
;

95 
	`ffs_ªmove_chunk
 ( 
mpoﬁ
, 
chunk
 );

98 
	`MARK_USED
 ( 
chunk
 );

99 
	`CLONE_SIZE_TO_TAIL
 ( 
chunk
 );

101  ( (*Ë
chunk
 ) +  (
size_t
);

102 
	}
}

110 
	$ffs_‰ì
 ( 
ffs_mpoﬁ_t
 *
mpoﬁ
, *
chunk_to_be_‰ìd
 )

112 
ffs_hdr_t
 *
chunk
, *
bef‹e
, *
a·î
;

114 
	`ASSERT
 ( 
mpoﬁ
 && 
chunk_to_be_‰ìd
 );

116 
chunk
 = 
chunk_to_be_‰ìd
 -  (
size_t
);

117 
	`ASSERT
 ( 
	`CHECK_USED
 ( 
chunk
 ) );

119 
	`MARK_FREE
 ( 
chunk
 );

122 
bef‹e
 = ( (*Ë
chunk
 ) - (
size_t
);

123 i‡–
	`CHECK_FREE
 ( 
bef‹e
 ) )

125 
bef‹e
 = 
	`GET_HDR
 ( before );

126 
	`ffs_ªmove_chunk
 ( 
mpoﬁ
, 
bef‹e
 );

127 
bef‹e
->
size
 +
chunk
->size;

128 
chunk
 = 
bef‹e
;

132 
a·î
 = 
	`GET_AFTER
 ( 
chunk
 );

133 i‡–
	`CHECK_FREE
 ( 
a·î
 ) )

135 
	`ffs_ªmove_chunk
 ( 
mpoﬁ
, 
a·î
 );

136 
chunk
->
size
 +
a·î
->size;

140 
	`ffs_ö£π_chunk
 ( 
mpoﬁ
, 
chunk
 );

143 
	`CLONE_SIZE_TO_TAIL
 ( 
chunk
 );

146 
	}
}

153 
	$ffs_ªmove_chunk
 ( 
ffs_mpoﬁ_t
 *
mpoﬁ
, 
ffs_hdr_t
 *
chunk
 )

155 i‡–
chunk
 =
mpoﬁ
->
fú°
 )

156 
mpoﬁ
->
fú°
 = 
chunk
->
√xt
;

158 
chunk
->
¥ev
->
√xt
 = chunk->next;

160 i‡–
chunk
->
√xt
 !
NULL
 )

161 
chunk
->
√xt
->
¥ev
 = chunk->prev;

162 
	}
}

169 
	$ffs_ö£π_chunk
 ( 
ffs_mpoﬁ_t
 *
mpoﬁ
, 
ffs_hdr_t
 *
chunk
 )

171 
chunk
->
√xt
 = 
mpoﬁ
->
fú°
;

172 
chunk
->
¥ev
 = 
NULL
;

174 i‡–
mpoﬁ
->
fú°
 )

175 
mpoﬁ
->
fú°
->
¥ev
 = 
chunk
;

177 
mpoﬁ
->
fú°
 = 
chunk
;

178 
	}
}

	@lib/mm/gma.c

3 
	#_GMA_C_


	)

4 
	~<lib/gma.h
>

6 
gma_t
 
	gpoﬁ
;

16 
gma_t
 *
	$gma_öô
 ( *
mem‹y_£gmít
, 
size_t
 
size
, size_à
mö_chunk_size
,

17 
uöt
 
Êags
 )

19 
gma_t
 *
mpoﬁ
;

20 
size_t
 
addr
, 
íd
;

21 
uöt
 
Àvñs
, 
i
, 
j
;

22 *
chunk
;

24 
	`ASSERT
 ( 
mem‹y_£gmít
 );

27 
addr
 = 
	`CHUNK_ALIGN_FW
 ( 
mem‹y_£gmít
 );

28 
íd
 = 
	`CHUNK_ALIGN
 ( 
mem‹y_£gmít
 + 
size
 );

30 
	`ASSERT
 ( 
íd
 - 
addr
 >
MIN_POOL_SIZE
 );

32 i‡–
Êags
 & 
NEW_MPOOL
 )

34 
mpoﬁ
 = (
gma_t
 *Ë
addr
;

35 
addr
 = 
	`CHUNK_ALIGN_FW
 (ádd∏+  (
gma_t
) );

38 
mpoﬁ
 = &
poﬁ
;

42 i‡–
mö_chunk_size
 == 0 )

43 
mö_chunk_size
 = 
DEF_MIN_CHUNK_SIZE
;

45 i‡–
mö_chunk_size
 >
MIN_CHUNK_SIZE
 )

46 
mpoﬁ
->
mö_chunk_size
 = min_chunk_size;

48 
mpoﬁ
->
mö_chunk_size
 = 
MIN_CHUNK_SIZE
;

50 
mpoﬁ
->
Ê_mö
 = 
	`msb_ödex
 ( mpoﬁ->
mö_chunk_size
 );

52 
mpoﬁ
->
Ê_max
 = 
	`msb_ödex
 ( 
size
 );

54 
Àvñs
 = 
mpoﬁ
->
Ê_max
 - mpoﬁ->
Ê_mö
 + 1;

56 
mpoﬁ
->
SL_bôm≠
 = (
size_t
 *Ë
addr
;

57 
addr
 = 
	`CHUNK_ALIGN_FW
 (ádd∏+  (
size_t
Ë* 
Àvñs
 );

58  
i
 = 0; i < 
Àvñs
; i++ )

59 
mpoﬁ
->
SL_bôm≠
[
i
] = 0;

61 
mpoﬁ
->
chunk
 = ( 
mchunk_t
 *(*Ë[
SL_DIM
] ) 
addr
;

62 
addr
 = 
	`CHUNK_ALIGN_FW
 (ádd∏+ (
mchunk_t
 *Ë* 
SL_DIM
 * 
Àvñs
 );

63  
i
 = 0; i < 
Àvñs
; i++ )

64  
j
 = 0; j < 
SL_DIM
; j++ )

65 
mpoﬁ
->
chunk
[
i
][
j
] = 
NULL
;

74 
chunk
 = 
	`make_fú°_chunk
 ( (*Ë
addr
, 
íd
 -áddr );

77 
	`gma_‰ì
 ( 
mpoﬁ
, 
chunk
 );

79  
mpoﬁ
;

80 
	}
}

89 *
	$gma_Æloc
 ( 
gma_t
 *
mpoﬁ
, 
size_t
 
size
 )

91 
size_t
 
Ê
, 
¶
;

92 
mchunk_t
 *
chunk
, *
ªmaödî
;

94 
	`ASSERT
 ( 
size
 > 0 && sizê< 
MAX_CHUNK_SIZE
 );

96 i‡–
mpoﬁ
 =
NULL
 )

97 
mpoﬁ
 = &
poﬁ
;

99 
size
 = 
	`CHUNK_ALIGN_FW
 ( sizê+ (
size_t
) );

101 i‡–
size
 < 
mpoﬁ
->
mö_chunk_size
 )

102 
size
 = 
mpoﬁ
->
mö_chunk_size
;

104 i‡–
	`gë_ödexes
 ( 
mpoﬁ
, 
size
, &
Ê
, &
¶
, 0 ) )

105  
NULL
;

107 i‡–!–
chunk
 = 
	`ªmove_fú°_chunk_‰om_‰ì_li°
 ( 
mpoﬁ
, 
Ê
, 
¶
 ) ) )

108  
NULL
;

110 i‡–
	`GET_CHUNK_SIZE
 ( 
chunk
 ) >
size
 + 
mpoﬁ
->
mö_chunk_size
 )

112 
ªmaödî
 = 
	`•lô_chunk_©
 ( 
chunk
, 
size
 );

114 
	`ö£π_chunk_ö_‰ì_li°
 ( 
mpoﬁ
, 
ªmaödî
 );

117 
	`SET_CHUNK_IN_USE
(
chunk
);

119  
	`GET_CHUNK_USABLE_ADDR
 ( 
chunk
 );

120 
	}
}

126 
	$gma_‰ì
 ( 
gma_t
 *
mpoﬁ
, *
addªss
 )

128 
mchunk_t
 *
chunk
, *
bef‹e
, *
a·î
;

130 
chunk
 = 
	`GET_CHUNK_HDR_FROM_USABLE_ADDR
 ( 
addªss
 );

132 
	`ASSERT
 ( 
addªss
 );

133 
	`ASSERT
 ( 
	`GET_CHUNK_INUSE
 (
chunk
) );

134 
	`ASSERT
 ( !
	`IS_BORDER_CHUNK
 (
chunk
) );

135 
	`ASSERT
 ( 
	`CHUNK_IS_ALIGNED
 (
chunk
) );

137 i‡–
mpoﬁ
 =
NULL
 )

138 
mpoﬁ
 = &
poﬁ
;

140 
	`CLEAR_CHUNK_INUSE
 ( 
chunk
 );

142 
bef‹e
 = 
	`GET_CHUNK_BEFORE
 ( 
chunk
 );

143 i‡–
bef‹e
 && !
	`GET_CHUNK_INUSE
 ( before ) )

145 
	`ªmove_chunk_‰om_‰ì_li°
 ( 
mpoﬁ
, 
bef‹e
 );

146 
	`JOIN_CHUNKS
 ( 
bef‹e
, 
chunk
 );

147 
chunk
 = 
bef‹e
;

150 
a·î
 = 
	`GET_CHUNK_AFTER
 ( 
chunk
 );

151 i‡–
a·î
 && !
	`GET_CHUNK_INUSE
 (áfter ) )

153 
	`ªmove_chunk_‰om_‰ì_li°
 ( 
mpoﬁ
, 
a·î
 );

154 
	`JOIN_CHUNKS
 ( 
chunk
, 
a·î
 );

157 
	`ö£π_chunk_ö_‰ì_li°
 ( 
mpoﬁ
, 
chunk
 );

160 
	}
}

173 
	$gë_ödexes
 ( 
gma_t
 *
mpoﬁ
, 
size_t
 
size
, size_à*
Ê
, size_à*
¶
,

174 
ö£π
 )

176 
size_t
 
bôs
;

178 
	`ASSERT
–
Ê
 && 
¶
 && 
size
 >
MIN_CHUNK_SIZE
 && 
	`CHUNK_IS_ALIGNED
(size) );

180 i‡–!
ö£π
 && 
size
 >
EXACT_LIMIT_SIZE
 )

181 
size
 +–1 << ( 
	`msb_ödex
 ( sizêË- 
L
 ) ) - 1;

185 *
Ê
 = 
	`msb_ödex
 ( 
size
 );

187 i‡–*
Ê
 > 
mpoﬁ
->
Ê_max
 )

189 
	`LOG
 ( 
ERROR
, "RequestedÅooÜarge chunk of memory" );

190  
EXIT_FAILURE
;

193 *
¶
 = ( 
size
 >> ( *
Ê
 - 
L
 ) ) - ( 1 << L );

195 *
Ê
 -
mpoﬁ
->
Ê_mö
;

197 i‡–!
ö£π
 )

201 
bôs
 = 
mpoﬁ
->
SL_bôm≠
[*
Ê
] & ( (~((
size_t
Ë0)Ë<< (*
¶
) );

203 i‡–
bôs
 != 0 )

205 *
¶
 = 
	`lsb_ödex
(
bôs
);

208 
bôs
 = 
mpoﬁ
->
FL_bôm≠
 & ((~((
size_t
Ë0))<<(*
Ê
 + 1));

209 i‡–
bôs
 == 0 )

210  
EXIT_FAILURE
;

212 *
Ê
 = 
	`lsb_ödex
 ( 
bôs
 );

213 *
¶
 = 
	`lsb_ödex
 ( 
mpoﬁ
->
SL_bôm≠
[*
Ê
] );

218 
	}
}

220 
ölöe
 
	$£t_li°_have_chunks
 ( 
gma_t
 *
mpoﬁ
, 
size_t
 
Ê
, size_à
¶
 )

222 
mpoﬁ
->
SL_bôm≠
[
Ê
] |((
size_t
Ë1Ë<< 
¶
;

223 
mpoﬁ
->
FL_bôm≠
 |((
size_t
Ë1Ë<< 
Ê
;

224 
	}
}

226 
ölöe
 
	$˛ór_li°_have_chunks
 ( 
gma_t
 *
mpoﬁ
, 
size_t
 
Ê
, size_à
¶
 )

228 
mpoﬁ
->
SL_bôm≠
[
Ê
] &~–((
size_t
Ë1Ë<< 
¶
 );

229 i‡–!
mpoﬁ
->
SL_bôm≠
[
Ê
] )

230 
mpoﬁ
->
FL_bôm≠
 &~–((
size_t
Ë1Ë<< 
Ê
 );

231 
	}
}

233 
	$ö£π_chunk_ö_‰ì_li°
 ( 
gma_t
 *
mpoﬁ
, 
mchunk_t
 *
chunk
 )

235 
size_t
 
Ê
 = 0, 
¶
 = 0;

237 
	`gë_ödexes
 ( 
mpoﬁ
, 
	`GET_CHUNK_SIZE
 ( 
chunk
 ), &
Ê
, &
¶
, 1 );

239 
	`ö£π_chunk_ö_li°
 ( &
mpoﬁ
->
chunk
[
Ê
][
¶
], chunk );

241 
	`£t_li°_have_chunks
 ( 
mpoﬁ
, 
Ê
, 
¶
 );

242 
	}
}

244 
	$ªmove_chunk_‰om_‰ì_li°
 ( 
gma_t
 *
mpoﬁ
, 
mchunk_t
 *
chunk
 )

246 
size_t
 
Ê
 = 0, 
¶
 = 0;

248 i‡–
	`ªmove_chunk_‰om_li°
 ( 
chunk
 ) )

250 
	`gë_ödexes
 ( 
mpoﬁ
, 
	`GET_CHUNK_SIZE
 ( 
chunk
 ), &
Ê
, &
¶
, 1 );

251 
	`˛ór_li°_have_chunks
 ( 
mpoﬁ
, 
Ê
, 
¶
 );

253 
	}
}

255 
mchunk_t
 *
	$ªmove_fú°_chunk_‰om_‰ì_li°
 ( 
gma_t
 *
mpoﬁ
, 
size_t
 
Ê
,

256 
size_t
 
¶
 )

258 
mchunk_t
 *
chunk
 = 
	`FIRST_IN_LIST
 ( 
mpoﬁ
->chunk[
Ê
][
¶
] );

260 i‡–
	`ªmove_chunk_‰om_li°
 ( 
chunk
 ) )

261 
	`˛ór_li°_have_chunks
 ( 
mpoﬁ
, 
Ê
, 
¶
 );

263  
chunk
;

264 
	}
}

	@lib/mm/test/test.c

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<mÆloc.h
>

6 
	~<°rög.h
>

7 
	~<time.h
>

10 
	~<±hªad.h
>

13 #i‚de‡
CLOCK_REALTIME


14 
	#CLOCK_REALTIME
 0

	)

15 
	gtime•ec_t
 { 
	gtv_£c
; 
	gtv_n£c
; };

19 #i‡
deföed
 ( 
FIRST_FIT
 )

22 
	tffs_mpoﬁ_t
;

24 *
ffs_öô
 ( *
mem_£gm
, 
size_t
 
size
 );

25 *
ffs_Æloc
 ( 
ffs_mpoﬁ_t
 *
mpoﬁ
, 
size_t
 
size
 );

26 
ffs_‰ì
 ( 
ffs_mpoﬁ_t
 *
mpoﬁ
, *
chunk_to_be_‰ìd
 );

28 
	#MEM_INIT
(
ADDR
, 
SIZE
Ë
	`ffs_öô
 ( ADDR, SIZE )

	)

29 
	#MEM_ALLOC
(
MP
, 
SIZE
Ë
	`ffs_Æloc
 ( MP, SIZE )

	)

30 
	#MEM_FREE
(
MP
, 
ADDR
Ë
	`ffs_‰ì
 ( MP, ADDR )

	)

32 #ñi‡
deföed
 ( 
GMA
 )

34 
	#gma_t
 

	)

36 
gma_t
 *
gma_öô
 ( *
mem‹y_£gmít
, 
size_t
 
size
, size_à
mö_chunk_size
,

37 
uöt
 
Êags
 );

38 *
gma_Æloc
 ( 
gma_t
 *
mpoﬁ
, 
size_t
 
size
 );

39 
gma_‰ì
 ( 
gma_t
 *
mpoﬁ
, *
addªss
 );

41 
	#MEM_INIT
(
ADDR
, 
SIZE
Ë
	`gma_öô
 ( ADDR, SIZE, 32, 0 )

	)

42 
	#MEM_ALLOC
(
MP
, 
SIZE
Ë
	`gma_Æloc
 ( MP, SIZE )

	)

43 
	#MEM_FREE
(
MP
, 
ADDR
Ë
	`gma_‰ì
 ( MP, ADDR )

	)

48 
	#PRINT
(
f‹m©
, ...)

	)

51 
	$maö
 ()

53 
poﬁ_size
 = 1234567;

54 
max_block_size
 = 1512;

55 
öô_ªque°s
 = 1500, 
ªque°s
 = 100000;

56 
i
, 
j
, 
k
, 
u£d
, 
Áû
;

57 
size_t
 
öu£
 = 0;

58 
	sªq


60 *
±r
;

61 
size
;

63 
m
[
ªque°s
];

64 *
poﬁ
, *
mpoﬁ
;

65 
time•ec_t
 
t1
, 
t2
;

67 i‡––
poﬁ
 = 
	`mÆloc
 ( 
poﬁ_size
 ) ) =
NULL
 )

69 
	`¥ötf
 ( "MallocÑeturn NULL\n" );

73 
	`mem£t
 ( 
poﬁ
, 0, 
poﬁ_size
 );

75  
j
 = 0; j < 
ªque°s
; j++)

77 
m
[
j
].
±r
 = 
NULL
;

78 
m
[
j
].
size
 = 0;

81 
mpoﬁ
 = 
	`MEM_INIT
 ( 
poﬁ
, 
poﬁ_size
 );

83 
u£d
 = 0;

84 
Áû
 = 0;

87  
j
 = 0; j < 
öô_ªque°s
; j++)

89 
m
[
j
].
size
 = 
	`Ã™d48
(Ë% 
max_block_size
 + 4;

90 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t1
);

91 
m
[
j
].
±r
 = 
	`MEM_ALLOC
 ( 
mpoﬁ
, m[j].
size
 );

92 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t2
);

94 i‡–
m
[
j
].
±r
 !
NULL
 )

96 
	`mem£t
 ( 
m
[
j
].
±r
, 5, m[j].
size
 );

97 
u£d
++;

98 
öu£
 +
m
[
j
].
size
;

100 
	`PRINT
 ( "%u %u %ld\n", (Ë
m
[
j
].
±r
, m[j].
size
,

101 (
t2
.
tv_£c
 - 
t1
.tv_£cË* 1000000000 +Å2.
tv_n£c
 -Å1.tv_nsec );

104 
Áû
++;

105 
	`PRINT
("[%d]áŒoc=%p\t[%u]\n", 
j
, 
m
[j].
±r
, m[j].
size
);

106 
	`PRINT
 ( "FAIL(%d)\n", 
Áû
 );

112 
	`¥ötf
 ( "Sèπ o‡ã°†(j=%d, faû=%d, inu£=%d)!\n", 
j
, 
Áû
, 
öu£
 );

114 
Áû
 = 0;

116  
i
 = 0; i < 
ªque°s
; i++ )

118 i‡–
	`Ã™d48
() & 1 )

121  
j
 = 0; j < 
ªque°s
 && 
m
[j].
±r
 !
NULL
; j++)

124 i‡–
j
 >
ªque°s
 )

126 
	`¥ötf
 ( "No freeÉlement in m[]!\n" );

130 
m
[
j
].
size
 = 
	`Ã™d48
(Ë% (
max_block_size
) + 4;

132 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t1
);

133 
m
[
j
].
±r
 = 
	`MEM_ALLOC
 ( 
mpoﬁ
, m[j].
size
 );

134 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t2
);

136 i‡–
m
[
j
].
±r
 !
NULL
 )

138 
	`mem£t
 ( 
m
[
j
].
±r
, 3, m[j].
size
 );

139 
u£d
++;

140 
öu£
 +
m
[
j
].
size
;

142 
	`PRINT
 ( "%u %ud %ld\n", (Ë
m
[
j
].
±r
, m[j].
size
,

143 (
t2
.
tv_£c
 - 
t1
.tv_£cË* 1000000000 +Å2.
tv_n£c
 -Å1.tv_nsec );

146 
Áû
++;

147 i‡–
Áû
 == 1 )

148 
	`¥ötf
 ( "\tFú° faû (i=%d)!\n", 
i
 );

153  
u£d
 > 0 )

155 
k
 = 
	`Ã™d48
(Ë% 
ªque°s
;

156 i‡–
m
[
k
].
±r
 !
NULL
 )

158 
	`MEM_FREE
 ( 
mpoﬁ
, 
m
[
k
].
±r
 );

160 
m
[
k
].
±r
 = 
NULL
;

162 
u£d
--;

163 
öu£
 -
m
[
j
].
size
;

171 
	`¥ötf
 ( "End o‡ã°†(i=%d, faû=%d, inu£=%d)!\n", 
i
, 
Áû
, 
öu£
 );

174 
	}
}

	@lib/mm/test/test.h

2 
	~<°dio.h
>

4 
	#ERROR
(
f‹m©
, ...) \

5 
	`¥ötf
 ( "[ERROR:%s:%d]" 
f‹m©
, 
__FILE__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

7 
	#LOG
(
Àvñ
, 
f‹m©
, ...) \

8 
	`¥ötf
 ( "[" #Àvñ ":%s:%d]" 
f‹m©
 "\n", 
__FILE__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

10 
	#ASSERT
(
ex¥
) \

11 dÿi‡–!–
ex¥
 ) ) \

13 
	`¥ötf
 ( "[BUG:%s:%d]\n", 
__FILE__
, 
__LINE__
); \

14 
	`exô
 (1); \

15 } 0)

	)

	@lib/string.c

3 
	~<lib/°rög.h
>

14 *
	$mem£t
 ( *
s
, 
c
, 
size_t
 
n
 )

16 
size_t
 
p
;

17 *
m
 = (*Ë
s
;

19  
p
 = 0;Ö < 
n
;Ö++, 
m
++ )

20 *
m
 = (Ë
c
;

22  
s
;

23 
	}
}

34 *
	$mem£tw
 (*
s
, 
c
, 
size_t
 
n
)

36 
size_t
 
p
;

37 *
m
 = (*Ë
s
;

39  
p
 = 0;Ö < 
n
;Ö++, 
m
++ )

40 *
m
 = (Ë
c
;

42  
s
;

43 
	}
}

54 *
	$mem˝y
 ( *
de°
, c⁄° *
§c
, 
size_t
 
n
 )

56 *
d
 = (*Ë
de°
, *
s
 = (*Ë
§c
;

57 
size_t
 
p
;

59  
p
 = 0;Ö < 
n
;Ö++, 
d
++, 
s
++ )

60 *
d
 = *
s
;

62  
de°
;

63 
	}
}

75 *
	$memmove
 ( *
de°
, c⁄° *
§c
, 
size_t
 
n
 )

77 *
d
, *
s
;

78 
size_t
 
p
;

80 i‡–
de°
 < 
§c
 )

82 
d
 = (*Ë
de°
;

83 
s
 = (*Ë
§c
;

84  
p
 = 0;Ö < 
n
;Ö++, 
d
++, 
s
++ )

85 *
d
 = *
s
;

88 
d
 = ((*Ë
de°
Ë+ 
n
 - 1;

89 
s
 = ((*Ë
§c
Ë+ 
n
 - 1;

90  
p
 = 0;Ö < 
n
;Ö++, 
d
--, 
s
-- )

91 *
d
 = *
s
;

94  
de°
;

95 
	}
}

107 *
	$memmovew
 ( *
de°
, c⁄° *
§c
, 
size_t
 
n
 )

109 *
d
, *
s
;

110 
size_t
 
p
;

112 i‡–
de°
 < 
§c
 )

114 
d
 = (*Ë
de°
;

115 
s
 = (*Ë
§c
;

116  
p
 = 0;Ö < 
n
;Ö++, 
d
++, 
s
++ )

117 *
d
 = *
s
;

120 
d
 = ((*Ë
de°
Ë+ 
n
 - 1;

121 
s
 = ((*Ë
§c
Ë+ 
n
 - 1;

122  
p
 = 0;Ö < 
n
;Ö++, 
d
--, 
s
-- )

123 *
d
 = *
s
;

126  
de°
;

127 
	}
}

144 
	$memcmp
 ( c⁄° *
m1
, c⁄° *
m2
, 
size_t
 
size
 )

146 *
a
 = (*Ë
m1
;

147 *
b
 = (*Ë
m2
;

149  ; 
size
 > 0; 
a
++, 
b
++, size-- )

151 i‡–*
a
 < *
b
 )

153 i‡–*
a
 > *
b
 )

158 
	}
}

161 
size_t
 
	$°æí
 ( c⁄° *
s
 )

163 
size_t
 
i
;

165  
i
 = 0; 
s
[i]; i++ )

168  
i
;

169 
	}
}

172 
	$°rcmp
 ( c⁄° *
s1
, c⁄° *
s2
 )

174 
size_t
 
i
;

176  
i
 = 0; 
s1
[i] || 
s2
[i]; i++ )

178 i‡–
s1
[
i
] < 
s2
[i] )

180 i‡–
s1
[
i
] > 
s2
[i] )

184 
	}
}

187 
	$°∫cmp
 ( c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
 )

189 
size_t
 
i
;

191  
i
 = 0; i < 
n
 && ( 
s1
[i] || 
s2
[i] ); i++ )

193 i‡–
s1
[
i
] < 
s2
[i] )

195 i‡–
s1
[
i
] > 
s2
[i] )

199 
	}
}

207 *
	$°r˝y
 ( *
de°
, c⁄° *
§c
 )

209 
i
;

211  
i
 = 0; 
§c
[i]; i++ )

212 
de°
[
i
] = 
§c
[i];

214 
de°
[
i
] = 0;

216  
de°
;

217 
	}
}

225 *
	$°rˇt
 ( *
de°
, c⁄° *
§c
 )

227 
i
;

229  
i
 = 0; 
de°
[i]; i++ )

232 
	`°r˝y
 ( &
de°
[
i
], 
§c
 );

234  
de°
;

235 
	}
}

243 *
	$°rchr
 (c⁄° *
s
, 
c
)

245 
i
;

247  
i
 = 0; 
s
[i]; i++ )

248 i‡–
s
[
i
] =(Ë
c
 )

249  (*Ë&
s
[
i
];

250  
NULL
;

251 
	}
}

259 *
	$°r°r
 (c⁄° *
s1
, c⁄° *
s2
)

261 
j
;

263 ; 
s1
 && 
s2
 ;)

265  
j
 = 0; 
s1
[j] && 
s2
[j] && s1[j] == s2[j]; j++ )

268 i‡–!
s2
[
j
] )

269  (*Ë
s1
;

271 i‡–!
s1
[
j
] )

272  
NULL
;

274 
s1
++;

277  (*Ë
s1
;

278 
	}
}

286 
	$ôﬂ
 ( *
buf„r
, 
ba£
, 
d
 )

288 *
p
 = 
buf„r
;

289 *
p1
, *
p2
, 
fú°hexch¨
;

290 
ud
 = 
d
;

291 
divis‹
 = 10;

292 
digôs
 = 0;

295 i‡–
ba£
 ='d' && 
d
 < 0 )

297 *
p
++ = '-';

298 
buf„r
++;

299 
ud
 = -
d
;

301 i‡–
ba£
 == 'x' || base == 'X' )

303 
divis‹
 = 16;

306 
fú°hexch¨
 = (
ba£
 == 'x' ? 'a' : 'A');

310 
ªmaödî
 = 
ud
 % 
divis‹
;

312 *
p
++ = (
ªmaödî
 < 10) ?Ñemainder + '0' :

313 
ªmaödî
 + 
fú°hexch¨
 - 10;

314 
digôs
++;

316  
ud
 /
divis‹
 );

319 i‡–
ba£
 == 'x' || base == 'X' )

321  
digôs
 < 8 )

323 
digôs
++;

324 *
p
++ = '0';

326 *
p
++ = 'x';

327 *
p
++ = '0';

330 *
p
 = 0;

333 
p1
 = 
buf„r
;

334 
p2
 = 
p
 - 1;

335  
p1
 < 
p2
 )

337 
tmp
 = *
p1
;

338 *
p1
 = *
p2
;

339 *
p2
 = 
tmp
;

340 
p1
++;

341 
p2
--;

343 
	}
}

347 
	$vs•rötf
 ( *
°r
, 
size_t
 
size
, **
¨g
 )

349 *
f‹m©
 = *
¨g
, 
buf„r
[20], *
p
;

350 
c
, 
i
 = 0;

352 i‡–!
f‹m©
 )

355 
¨g
++;

357  (
c
 = *
f‹m©
++Ë!0 && 
i
 < 
size
 - 1 )

359 i‡–
c
 != '%' )

361 
°r
[
i
++] = (Ë
c
;

364 
c
 = *
f‹m©
++;

365  
c
 ) {

370 
	`ôﬂ
 ( 
buf„r
, 
c
, *((*Ë
¨g
++) );

371 
p
 = 
buf„r
;

372 i‡–
i
 + 
	`°æí
 (
p
Ë< 
size
 - 1 )

373  *
p
 )

374 
°r
[
i
++] = *
p
++;

376 
too_l⁄g
;

380 
p
 = *
¨g
++;

381 i‡–!
p
 )

382 
p
 = "(null)";

384 i‡–
i
 + 
	`°æí
 (
p
Ë< 
size
 - 1 )

385  *
p
 )

386 
°r
[
i
++] = *
p
++;

388 
too_l⁄g
;

392 
°r
[
i
++] = *–(*Ë
¨g
++ );

398 
too_l⁄g
:

400 
°r
[
i
++] = 0;

402  
i
;

403 
	}
}

437 *
	$°πok
 ( *
s
, c⁄° *
dñim
 )

439 *
œ°
;

441  
	`°πok_r
 ( 
s
, 
dñim
, &
œ°
 );

442 
	}
}

444 *
	$°πok_r
 ( *
s
, c⁄° *
dñim
, **
œ°
 )

446 
i
, 
j
, 
found_dñim
;

448 i‡–
s
 =
NULL
 )

449 
s
 = *
œ°
;

450 i‡–
s
 =
NULL
)

451  
NULL
;

454  
i
 = 0; 
s
[i] != 0; i++ )

456 
found_dñim
 = 0;

457  
j
 = 0; 
dñim
[j] != 0; j++ )

459 i‡–
s
[
i
] =
dñim
[
j
] )

461 
found_dñim
 = 1;

466 i‡–
found_dñim
 == 0 )

470 i‡–
s
[
i
] == 0 )

472 *
œ°
 = 
NULL
;

473  
NULL
;

476 
s
 = &s[
i
];

479  
i
 = 1; 
s
[i] != 0; i++ )

481 
found_dñim
 = 0;

482  
j
 = 0; 
dñim
[j] != 0; j++ )

484 i‡–
s
[
i
] =
dñim
[
j
] )

486 
found_dñim
 = 1;

491 i‡–
found_dñim
 == 1 )

495 i‡–
s
[
i
] == 0 )

496 *
œ°
 = 
NULL
;

498 *
œ°
 = &
s
[
i
+1];

499 
s
[
i
] = 0;

501  
s
;

502 
	}
}

505 *
	$°πok_r
 ( *
s
, c⁄° *
dñim
, **
œ°
 )

507 *
•™p
;

508 
c
, 
sc
;

509 *
tok
;

512 i‡–
s
 =
NULL
 && ( s = *
œ°
 ) == NULL)

513  
NULL
;

518 
c⁄t
:

519 
c
 = *
s
++;

520  
•™p
 = (*Ë
dñim
; ( 
sc
 = *spanp++ ) != 0; )

521 i‡–
c
 =
sc
 )

522 
c⁄t
;

524 i‡–
c
 == 0 )

526 *
œ°
 = 
NULL
;

527  
NULL
;

530 
tok
 = 
s
 - 1;

538 
c
 = *
s
++;

539 
•™p
 = (*Ë
dñim
;

542 i‡––
sc
 = *
•™p
++ ) =
c
 )

544 i‡–
c
 == 0 )

545 
s
 = 
NULL
;

547 
s
[-1] = 0;

548 *
œ°
 = 
s
;

549  
tok
;

552  
sc
 != 0 );

555 
	}
}

	@programs/arguments/arguments.c

3 
	~<°dio.h
>

5 
	gPROG_HELP
[] = "Print given commandÜineárguments.";

7 
	$¨gumíts
 ( *
¨gv
[] )

9 
i
;

11 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

12 
PROG_HELP
 );

14 
	`¥ötf
 ( "Programárguments: " );

15  
i
 = 0; 
¨gv
 &&árgv[i]; i++ )

16 
	`¥ötf
 ( "[%s] ", 
¨gv
[
i
] );

17 
	`¥ötf
 ( "\n" );

20 
	}
}

	@programs/hello_world/hello_world.c

3 
	~<°dio.h
>

5 
	gPROG_HELP
[] = "Print 'Hello world'.";

7 
	$hñlo_w‹ld
 ( *
¨gs
[] )

9 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

10 
PROG_HELP
 );

12 
	`¥ötf
 ( "Hello World!\n" );

15 
	`¥ötf
 ( "\x1b[20;40H" "Hello Worldát 40, 20!\n" );

19 
	}
}

	@programs/keyboard/keyboard.c

3 
	~<°dio.h
>

4 
	~<time.h
>

6 
	gPROG_HELP
[] = "Print ASCII code forÉach keystroke. Press '.'ÅoÉnd.";

8 
	$keybﬂrd
 ( *
¨gs
[] )

10 
key
;

11 
time•ec_t
 
t
 = { .
tv_£c
 = 0, .
tv_n£c
 = 100000000 };

13 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

14 
PROG_HELP
 );

17 i‡––
key
 = 
	`gëch¨
 () ) )

18 
	`¥ötf
 ( "GŸ: %¯(%d)\n", 
key
, key );

20 
	`«no¶ìp
 ( &
t
, 
NULL
 );

22  
key
 != '.' );

24 
	`¥ötf
 ( "End of keyboardÅest\n" );

27 
	}
}

	@programs/messages/messages.c

3 
	~<±hªad.h
>

4 
	~<time.h
>

5 
	~<°dio.h
>

6 
	~<lib/°rög.h
>

7 
	~<î∫o.h
>

9 
	gPROG_HELP
[] = "MessagingÉxample.";

11 
	#CONSUMERS
 2

	)

12 
	#PRODUCERS
 3

	)

13 
	#MSGS_PER_PRODUCERS
 3

	)

14 
	#MSGS_PER_CONSUMERS
 \

15 ––
PRODUCERS
 * 
MSGS_PER_PRODUCERS
 + PRODUCERS - 1 ) / 
CONSUMERS
 )

	)

17 
	#MAX_MSG_SIZE
 10

	)

19 
time•ec_t
 
	g¶ìp
 = { .
tv_£c
 = 1, .
	gtv_n£c
 = 0 };

20 
	g¥odu˚rs_Æive
;

21 
mqd_t
 
	gmqdes
;

24 *
	$c⁄sumî
 ( *
∑øm
 )

26 
msgs
, 
msgsize
, 
thr_no
;

27 
uöt
 
msg¥io
;

28 
msg_buf
[
MSGS_PER_CONSUMERS
*
MAX_MSG_SIZE
];

29 
buf„r
[
MAX_MSG_SIZE
];

31 
thr_no
 = (Ë
∑øm
;

32 
msgs
 = 0;

33 
	`mem£t
 ( 
msg_buf
, 0, 
MSGS_PER_CONSUMERS
 );

35 
	`¥ötf
 ( "C⁄sumî %d sèπög\n", 
thr_no
 );

39 
	`mem£t
 ( 
buf„r
, 0, 
MAX_MSG_SIZE
 );

40 
msgsize
 = 
	`mq_ª˚ive
 ( 
mqdes
, 
buf„r
, 
MAX_MSG_SIZE
, &
msg¥io
 );

42 i‡–
msgsize
 > 0 )

44 
	`¥ötf
 ( "Consumer %d got message: size=%d, msg=%s\n",

45 
thr_no
, 
msgsize
, 
buf„r
 );

46 
	`°rˇt
 ( 
msg_buf
, 
buf„r
 );

47 
msgs
++;

48 
	`«no¶ìp
 ( &
¶ìp
, 
NULL
 );

51 i‡–
¥odu˚rs_Æive
 > 0 )

53 
	`¥ötf
("Buf„∏em±y, sÀïög (%d)!\n",
thr_no
);

54 
	`«no¶ìp
 ( &
¶ìp
, 
NULL
 );

62 
	`¥ötf
 ( "Consumer %dÉxiting,Ñeceived %d messaged (%s)\n",

63 
thr_no
, 
msgs
, 
msg_buf
 );

65  
NULL
;

66 
	}
}

69 *
	$¥odu˚r
 ( *
∑øm
 )

71 
i
, 
thr_no
;

72 
mesßge
[] = "A00";

73 
buf„r
[
MAX_MSG_SIZE
];

75 
thr_no
 = (Ë
∑øm
;

76 
	`mem£t
 ( 
buf„r
, 0, 
MAX_MSG_SIZE
 );

77 
buf„r
[0] = 
mesßge
[0] + 
thr_no
 - 1;

79 
	`¥ötf
 ( "Produ˚∏%¯°¨tög\n", 
buf„r
[0] );

81  
i
 = 0; i < 
MSGS_PER_PRODUCERS
; i++ )

83 
buf„r
[1] = 
mesßge
[1] + (
i
/10) % 10;

84 
buf„r
[2] = 
mesßge
[2] + 
i
 % 10;

86 
	`¥ötf
 ( "Produ˚∏%c: síd†%s\n", 
buf„r
[0], buffer );

88  
	`mq_£nd
 ( 
mqdes
, 
buf„r
, 4, 0 ) )

90 
	`¥ötf
 ( "Error sending message,Ñetrying (%c)!\n",

91 
buf„r
[0] );

92 
	`«no¶ìp
 ( &
¶ìp
, 
NULL
 );

95 
	`«no¶ìp
 ( &
¶ìp
, 
NULL
 );

97 
	`¥ötf
 ( "Produ˚∏%¯exôög\n", 
buf„r
[0] );

98 
¥odu˚rs_Æive
--;

100  
NULL
;

101 
	}
}

103 
	$mesßges
 ( *
¨gs
[] )

105 
±hªad_t
 
thªad
[
CONSUMERS
 + 
PRODUCERS
];

106 
mq_©å_t
 
©å
;

107 
i
;

109 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

110 
PROG_HELP
 );

112 
©å
.
mq_Êags
 = 0;

113 
©å
.
mq_maxmsg
 = 3;

114 
©å
.
mq_msgsize
 = 
MAX_MSG_SIZE
;

115 
©å
.
mq_curmsgs
 = 0;

117 
¥odu˚rs_Æive
 = 
PRODUCERS
;

119 
mqdes
 = 
	`mq_›í
 ( "mq1", 
O_CREAT
 | 
O_RDWR
 | 
O_NONBLOCK
, 0, &
©å
 );

120 i‡–
mqdes
.
id
 == -1 )

122 
	`¥ötf
 ( "Error creating message queue!\n" );

123  
EXIT_FAILURE
;

126  
i
 = 0; i < 
CONSUMERS
; i++ )

127 
	`±hªad_¸óã
 ( &
thªad
[
i
], 
NULL
, 
c⁄sumî
, (*) i+1 );

128  
i
 = 0; i < 
PRODUCERS
; i++ )

129 
	`±hªad_¸óã
 ( &
thªad
[
CONSUMERS
 + 
i
], 
NULL
,

130 
¥odu˚r
, (*Ë
i
+1 );

133  
i
 = 0; i < 
CONSUMERS
 + 
PRODUCERS
; i++ )

134 
	`±hªad_joö
 ( 
thªad
[
i
], 
NULL
 );

136 
	`mq_˛o£
 ( 
mqdes
 );

139 
	}
}

	@programs/monitors/monitors.c

3 
	~<°dio.h
>

4 
	~<±hªad.h
>

5 
	~<time.h
>

6 
	~<î∫o.h
>

8 
	gPROG_HELP
[] = "ThreadÉxample (monitor): The diningÖhilosophersÖroblem.";

10 
	#PHNUM
 5

	)

12 
time•ec_t
 
	gót
, 
	gthök
;

13 
	gãrmö©e_simuœti⁄
;

15 
	g°ick
[
PHNUM
];

16 
	gphs
[
PHNUM
+1];

18 
±hªad_muãx_t
 
	gm
;

19 
±hªad_c⁄d_t
 
	gq
[
PHNUM
];

22 *
	$phûos›hî
 ( *
∑øm
 )

24 
phû
, 
l°ick
, 
r°ick
, 
Õhû
, 
Ωhû
;

26 
phû
 = (Ë
∑øm
;

27 
l°ick
 = 
phû
;

28 
r°ick
 = ( 
l°ick
 + 1 ) % 
PHNUM
;

29 
Õhû
 = ( 
phû
 + 
PHNUM
 - 1 ) % PHNUM;

30 
Ωhû
 = ( 
phû
 + 1 ) % 
PHNUM
;

32 
	`¥ötf
 ( "%†- Phûos›hî %dÅhökög\n", 
phs
, 
phû
 );

34  !
ãrmö©e_simuœti⁄
 )

36 
	`«no¶ìp
 ( &
thök
, 
NULL
 );

38 
	`±hªad_muãx_lock
 ( &
m
 );

39 
phs
[
phû
] = '-';

40  
°ick
[
l°ick
] || stick[
r°ick
] )

41 
	`±hªad_c⁄d_waô
 ( &
q
[
phû
], &
m
 );

42 
°ick
[
l°ick
] = stick[
r°ick
] = 
TRUE
;

43 
phs
[
phû
] = 'X';

44 
	`¥ötf
 ( "%†- Phûos›hî %dÉ©ög\n", 
phs
, 
phû
 );

45 
	`±hªad_muãx_u∆ock
 ( &
m
 );

47 
	`«no¶ìp
 ( &
ót
, 
NULL
 );

49 
	`±hªad_muãx_lock
 ( &
m
 );

50 
°ick
[
l°ick
] = stick[
r°ick
] = 
FALSE
;

51 
phs
[
phû
] = 'O';

52 
	`¥ötf
 ( "%†- Phûos›hî %dÅhökög\n", 
phs
, 
phû
 );

53 
	`±hªad_muãx_u∆ock
 ( &
m
 );

55 
	`±hªad_c⁄d_sig«l
 ( &
q
[
Õhû
] );

56 
	`±hªad_c⁄d_sig«l
 ( &
q
[
Ωhû
] );

59  
NULL
;

60 
	}
}

62 
	$m⁄ô‹s
 ( *
¨gs
[] )

64 
±hªad_t
 
thªad
[
PHNUM
];

65 
time•ec_t
 
sim_time
;

66 
i
;

68 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

69 
PROG_HELP
 );

71 
ót
.
tv_£c
 = 3;

72 
ót
.
tv_n£c
 = 0;

73 
thök
.
tv_£c
 = 3;

74 
thök
.
tv_n£c
 = 0;

75 
sim_time
.
tv_£c
 = 30;

76 
sim_time
.
tv_n£c
 = 0;

78 
ãrmö©e_simuœti⁄
 = 0;

80 
	`±hªad_muãx_öô
 ( &
m
, 
NULL
 );

82  
i
 = 0; i < 
PHNUM
; i++ )

84 
°ick
[
i
] = 0;

85 
phs
[
i
] = 'O';

86 
	`±hªad_c⁄d_öô
 ( &
q
[
i
], 
NULL
 );

88 
phs
[
PHNUM
] = '\0';

90  
i
 = 0; i < 
PHNUM
; i++ )

91 
	`±hªad_¸óã
 ( &
thªad
[
i
], 
NULL
, 
phûos›hî
, (*) i );

93 
	`«no¶ìp
 ( &
sim_time
, 
NULL
 );

95 
ãrmö©e_simuœti⁄
 = 1;

97  
i
 = 0; i < 
PHNUM
; i++ )

98 
	`±hªad_joö
 ( 
thªad
[
i
], 
NULL
 );

100 
	`±hªad_muãx_de°roy
 ( &
m
 );

102  
i
 = 0; i < 
PHNUM
; i++ )

103 
	`±hªad_c⁄d_de°roy
 ( &
q
[
i
] );

106 
	}
}

	@programs/round_robin/round_robin.c

3 
	~<°dio.h
>

4 
	~<±hªad.h
>

5 
	~<time.h
>

6 
	~<¨ch/¥o˚ss‹.h
>

7 
	~<kî√l/„©uªs.h
>

9 
	gPROG_HELP
[] = "Round Robin schedulingÉxample.";

11 
	#THR_NUM
 3

	)

12 
	#INNER_LOOP_COUNT
 100000

	)

13 
	#TEST_DURATION
 10

	)

15 
	gôîs
[
THR_NUM
];

16 vﬁ©ûê
	gíd
;

19 *
	$º_thªad
 ( *
∑øm
 )

21 
i
, 
j
, 
thr_no
;

23 
thr_no
 = (Ë
∑øm
;

25 
	`¥ötf
 ( "RRÅhªad %d sèπög\n", 
thr_no
 );

28 i‡–
thr_no
 =
THR_NUM
 - 1 )

30 
	`¥ötf
 ( "GreedyÅhread disabling others for someÅime!\n" );

31 
	`OS_DISABLE
 ( 
FEATURE_SCHED_RR
 );

32  
i
 = 1; i < 500; i++ )

34  
j
 = 0; j < 
INNER_LOOP_COUNT
 && !
íd
; j++ )

35 
	`mem‹y_b¨rõr
 ();

37 
ôîs
[
thr_no
]++;

39 
	`OS_ENABLE
 ( 
FEATURE_SCHED_RR
 );

40 
	`¥ötf
 ( "GreedyÅhreadÉnabling scheduling!\n" );

44  
i
 = 1; !
íd
; i++ )

46  
j
 = 0; j < 
INNER_LOOP_COUNT
 && !
íd
; j++ )

47 
	`mem‹y_b¨rõr
 ();

49 
ôîs
[
thr_no
]++;

52 
	`¥ötf
 ( "RRÅhªad %dÉxôög\n", 
thr_no
 );

54  
NULL
;

55 
	}
}

57 
	$round_robö
 ( *
¨gs
[] )

59 
±hªad_t
 
thªad
[
THR_NUM
];

60 
±hªad_©å_t
 
©å
;

61 
sched_∑øm_t
 
sched_∑øm
;

62 
i
;

63 
time•ec_t
 
¶ìp
;

65 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

66 
PROG_HELP
 );

68 
sched_∑øm
.
sched_¥i‹ôy
 = 
THREAD_DEF_PRIO
/2 + 1;

69 
	`±hªad_©å_öô
 ( &
©å
 );

70 
	`±hªad_©å_£tschedpﬁicy
 ( &
©å
, 
SCHED_RR
 );

71 
	`±hªad_©å_£tsched∑øm
 ( &
©å
, &
sched_∑øm
 );

73 
íd
 = 
FALSE
;

75  
i
 = 0; i < 
THR_NUM
; i++ )

77 
ôîs
[
i
] = 0;

78 
	`±hªad_¸óã
 ( &
thªad
[
i
], &
©å
, 
º_thªad
, (*) i );

81 
	`¥ötf
 ( "Thªad†¸óãd, givögÅhem %d sec⁄ds\n", 
TEST_DURATION
 );

82 
¶ìp
.
tv_£c
 = 
TEST_DURATION
;

83 
¶ìp
.
tv_n£c
 = 0;

84 
	`«no¶ìp
 ( &
¶ìp
, 
NULL
 );

86 
	`¥ötf
 ( "Test over -ÅhreadsáreÅo be canceled\n");

87 
íd
 = 
TRUE
;

89  
i
 = 0; i < 
THR_NUM
; i++ )

90 
	`±hªad_joö
 ( 
thªad
[
i
], 
NULL
 );

91  
i
 = 0; i < 
THR_NUM
; i++ )

92 
	`¥ötf
 ( "Thªad %d, cou¡=%d\n", 
i
, 
ôîs
[i] );

95 
	}
}

	@programs/run_all/run_all.c

3 
	~<°dio.h
>

4 
	~<lib/°rög.h
>

5 
	~<time.h
>

6 
	~<±hªad.h
>

7 
	~<î∫o.h
>

8 
	~<¨ch/¥o˚ss‹.h
>

10 
	gPROG_HELP
[] = "Runáll compiledÖrograms";

12 #ö˛udê
PROGRAMS


14 
	s_cmd_t_


16 (*
	mfunc
Ë–*
	m¨gv
[] );

17 *
	m«me
;

18 *
	mdes¸
;

20 
	tcmd_t
;

22 
cmd_t
 
	g¥og
[] = 
PROGRAMS_FOR_SHELL
;

24 
°¨t_¥ogøm
 ( 
i
 );

26 
	$run_Æl
 ( *
¨gs
[] )

28 
i
, 
j
, 
îr‹
 = 0;

29 *
¥ogs_to_°¨t
[] = {

31 "m⁄ô‹s", "mesßges", "sig«ls", "º", 
NULL
 };

33  
j
 = 0; !
îr‹
 && 
¥ogs_to_°¨t
[j]; j++ )

34  
i
 = 0; !
îr‹
 && 
¥og
[i].
func
; i++ )

35 i‡–!
	`°rcmp
 ( 
¥ogs_to_°¨t
[
j
], 
¥og
[
i
].
«me
 ) )

36 i‡–
	`°¨t_¥ogøm
 (
i
) )

37 
îr‹
 = 1;

39  
îr‹
;

40 
	}
}

42 
	$°¨t_¥ogøm
 ( 
i
 )

44 *
°©us
, 
rv
;

45 
±hªad_t
 
thr
;

47 
	`¥ötf
 ( "StartingÖrogram: %s\n"

48 "---------------------------------------\n", 
¥og
[
i
].
«me
 );

50 
rv
 = 
	`±hªad_¸óã
 ( &
thr
, 
NULL
, (*Ë
¥og
[
i
].
func
, NULL );

51 i‡–!
rv
 )

53 
rv
 = 
	`±hªad_joö
 ( 
thr
, (**Ë&
°©us
 );

54 i‡–
rv
 && 
	`gë_î∫o
 (Ë!
ESRCH
 )

56 
	`¥ötf
 ( "\npthread_joinÉrror!\n\n" );

62 i‡–
°©us
 && *status )

64 
	`¥ötf
 ( "\nProgram %sÉxited withÉrror %d!\n\n",

65 
¥og
[
i
].
«me
, *
°©us
 );

70 
	`¥ötf
 ( "\nProgram %sÉxited successfully!\n\n",

71 
¥og
[
i
].
«me
 );

76 
	`¥ötf
 ( "\nProgøm: %†nŸ sèπed!\n", 
¥og
[
i
].
«me
 );

79 
	}
}

	@programs/segm_fault/segm_fault.c

3 
	~<°dio.h
>

5 
	gPROG_HELP
[] = "Generate segmentation fault.";

9 
	$£gm_Áu…
 ( *
¨gv
[] )

11 *
p
;

12 
i
, 
j
=0;

14 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

15 
PROG_HELP
 );

17 
	`¥ötf
 ( "Before segmentation fault\n" );

19  
i
 = 2; i < 32; i++ )

21 
p
 = (*Ë(1 << 
i
);

22 
	`¥ötf
 ( "[%x]=%d\n", 
p
, *p );

23 
j
+*
p
;

26 
	`¥ötf
 ( "A·îÉx≥˘ed segmíèti⁄ fau…, j=%d\n", 
j
 );

29 
	}
}

	@programs/semaphores/semaphores.c

3 
	~<°dio.h
>

4 
	~<±hªad.h
>

5 
	~<time.h
>

6 
	~<î∫o.h
>

8 
	gPROG_HELP
[] = "ThreadÉxample (semaphore):Öroducer consumerÉxample.";

10 
	#CONSUMERS
 2

	)

11 
	#PRODUCERS
 3

	)

12 
	#BUFF_SIZE
 5

	)

14 
time•ec_t
 
	g¶ìp
;

15 
	gíd_msgs
;

17 
£m_t
 
	gfûÀd
, 
	gem±y
, 
	g¸ô1
, 
	g¸ô2
;

19 
	gbuf„r
[
BUFF_SIZE
], 
	gö
, 
	gout
;

22 *
	$c⁄sumî
 ( *
∑øm
 )

24 
i
, 
thr_no
, 
mybuff
[
BUFF_SIZE
*
PRODUCERS
], 
ôems
;

26 
thr_no
 = (Ë
∑øm
;

27 
ôems
 = 0;

29 
	`¥ötf
 ( "C⁄sumî %d sèπög\n", 
thr_no
 );

31  
íd_msgs
 < 
PRODUCERS
 )

33 
	`£m_waô
 ( &
fûÀd
 );

34 
	`£m_waô
 ( &
¸ô1
 );

36 i‡–
íd_msgs
 >
PRODUCERS
 )

38 
	`£m_po°
 ( &
¸ô1
 );

39 
	`£m_po°
 ( &
em±y
 );

43 
mybuff
[
ôems
] = 
buf„r
[
out
];

44 i‡–++
out
 >
BUFF_SIZE
 )

45 
out
 %
BUFF_SIZE
;

47 i‡–!
mybuff
[
ôems
] )

48 
íd_msgs
++;

50 
	`¥ötf
 ( "C⁄sumî %d: gŸ %d\n", 
thr_no
, 
mybuff
[
ôems
++] );

52 
	`£m_po°
 ( &
¸ô1
 );

53 
	`£m_po°
 ( &
em±y
 );

55 
	`«no¶ìp
 ( &
¶ìp
, 
NULL
 );

58 
	`¥ötf
 ( "C⁄sumî %dÉxôög,Ñe˚ived: ", 
thr_no
 );

59  
i
 = 0; i < 
ôems
; i++ )

60 
	`¥ötf
 ( "%d ", 
mybuff
[
i
] );

61 
	`¥ötf
 ( "\n" );

63 
	`£m_po°
 ( &
fûÀd
 );

65  
NULL
;

66 
	}
}

69 *
	$¥odu˚r
 ( *
∑øm
 )

71 
i
, 
thr_no
, 
d©a
;

73 
thr_no
 = (Ë
∑øm
;

75 
	`¥ötf
 ( "Produ˚∏%d sèπög\n", 
thr_no
 );

77  
i
 = 1; i < 
BUFF_SIZE
; i++ )

79 
	`£m_waô
 ( &
em±y
 );

80 
	`£m_waô
 ( &
¸ô2
 );

82 
d©a
 = ( 
i
 < 
BUFF_SIZE
 - 1 ? 
thr_no
 * 10 + i % 10 : 0 );

84 
	`¥ötf
 ( "Produ˚∏%d: síd†%d\n", 
thr_no
, 
d©a
 );

86 
buf„r
[
ö
] = 
d©a
;

87 i‡–++
ö
 >
BUFF_SIZE
 )

88 
ö
 %
BUFF_SIZE
;

90 
	`£m_po°
 ( &
¸ô2
 );

91 
	`£m_po°
 ( &
fûÀd
 );

93 
	`«no¶ìp
 ( &
¶ìp
, 
NULL
 );

95 
	`¥ötf
 ( "Produ˚∏%dÉxôög\n", 
thr_no
 );

97  
NULL
;

98 
	}
}

100 
	$£m≠h‹es
 ( *
¨gs
[] )

102 
±hªad_t
 
thªad
[
CONSUMERS
 + 
PRODUCERS
];

103 
i
;

105 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

106 
PROG_HELP
 );

108 
¶ìp
.
tv_£c
 = 1;

109 
¶ìp
.
tv_n£c
 = 0;

111 
	`£m_öô
 ( &
fûÀd
, 
FALSE
, 0 );

112 
	`£m_öô
 ( &
em±y
, 
FALSE
, 
BUFF_SIZE
 );

113 
	`£m_öô
 ( &
¸ô1
, 
FALSE
, 1 );

114 
	`£m_öô
 ( &
¸ô2
, 
FALSE
, 1 );

115 
ö
 = 
out
 = 0;

116 
íd_msgs
 = 0;

118  
i
 = 0; i < 
CONSUMERS
; i++ )

119 
	`±hªad_¸óã
 ( &
thªad
[
i
], 
NULL
, 
c⁄sumî
, (*) (i+1) );

121  
i
 = 0; i < 
PRODUCERS
; i++ )

122 
	`±hªad_¸óã
 ( &
thªad
[
CONSUMERS
+
i
], 
NULL
,

123 
¥odu˚r
, (*Ë(
i
+1) );

125  
i
 = 0; i < 
CONSUMERS
 + 
PRODUCERS
; i++ )

126 
	`±hªad_joö
 ( 
thªad
[
i
], 
NULL
 );

128 
	`£m_de°roy
 ( &
fûÀd
 );

129 
	`£m_de°roy
 ( &
em±y
 );

130 
	`£m_de°roy
 ( &
¸ô1
 );

131 
	`£m_de°roy
 ( &
¸ô2
 );

134 
	}
}

	@programs/shell/shell.c

3 
	~<°dio.h
>

4 
	~<î∫o.h
>

5 
	~<lib/°rög.h
>

6 
	~<time.h
>

7 
	~<kî√l/mem‹y.h
>

8 
	~<¨ch/¥o˚ss‹.h
>

9 
	~<±hªad.h
>

11 
	gPROG_HELP
[] = "Simple command shell";

13 #ö˛udê
PROGRAMS


15 
	s_cmd_t_


17 (*
	mfunc
Ë–*
	m¨gv
[] );

18 *
	m«me
;

19 *
	mdes¸
;

21 
	tcmd_t
;

23 
	#MAXCMDLEN
 72

	)

24 
	#MAXARGS
 10

	)

25 
	#INFO_SIZE
 1000

	)

27 
hñp
 ();

28 
˛ór
 ();

29 
sysöfo
 ( *
¨gs
[] );

31 
cmd_t
 
	gsh_cmd
[] =

33 { 
hñp
, "help", "help -Üistávailable commands" },

34 { 
˛ór
, "clear", "clear - clear screen" },

35 { 
sysöfo
, "sysinfo", "system information; usage: sysinfo [options]" },

36 { 
NULL
, "" }

39 
cmd_t
 
	g¥og
[] = 
PROGRAMS_FOR_SHELL
;

42 
	$shñl
 ( *
¨gs
[] )

44 
cmd
[
MAXCMDLEN
 + 1];

45 
i
, 
key
, 
rv
;

46 
time•ec_t
 
t
 
	`__©åibuã__
 ((
unu£d
));

47 
¨gnum
;

48 *
¨gvÆ
[
MAXARGS
 + 1];

49 
±hªad_t
 
thr
;

50 
pﬁlfd
 
fds
 = { 0 , 
POLLRDNORM
, 0 };

53 
	`¥ötf
 ( "\n*** Simple shell interpreter ***\n\n" );

55 
	`hñp
 ();

57 
t
.
tv_£c
 = 0;

58 
t
.
tv_n£c
 = 100000000;

62 
√w_cmd
:

63 
	`¥ötf
 ( "\n> " );

65 
i
 = 0;

66 
	`mem£t
 ( 
cmd
, 0, 
MAXCMDLEN
 );

69  
i
 < 
MAXCMDLEN
 )

71 i‡–!
	`pﬁl
 ( &
fds
, 1, 0 ) )

73 
	`«no¶ìp
 ( &
t
, 
NULL
 );

77 
key
 = 
	`gëch¨
 ();

78 i‡–!
key
 )

81 i‡–
key
 == '\n' || key == '\r')

83 i‡–
i
 > 0 )

86 
√w_cmd
;

89  
key
 )

92 i‡–
i
 > 0 )

94 
cmd
[--
i
] = 0;

95 
	`¥ötf
 ( "%c", 
key
 );

100 
	`¥ötf
 ( "%c", 
key
 );

101 
cmd
[
i
++] = (Ë
key
;

105 
	`¥ötf
 ( "\n" );

108 
¨gnum
 = 0;

109 
i
 = 0; i < 
MAXCMDLEN
 && 
cmd
[i]!=0 && 
¨gnum
 < 
MAXARGS
; i++)

111 i‡–
cmd
[
i
] == ' ' || cmd[i] == '\t')

114 
¨gvÆ
[
¨gnum
++] = &
cmd
[
i
];

115  
cmd
[
i
] && cmd[i] != ' ' && cmd[i] != '\t'

116 && 
i
 < 
MAXCMDLEN
 )

117 
i
++;

119 
cmd
[
i
] = 0;

121 
¨gvÆ
[
¨gnum
] = 
NULL
;

124  
i
 = 0; 
sh_cmd
[i].
func
 !
NULL
; i++ )

126 i‡–
	`°rcmp
 ( 
¨gvÆ
[0], 
sh_cmd
[
i
].
«me
 ) == 0 )

128 i‡–
sh_cmd
[
i
].
	`func
 ( 
¨gvÆ
 ) )

129 
	`¥ötf
 ( "\nProgramÑeturnedÉrror!\n" );

131 
√w_cmd
;

137  
i
 = 0; 
¥og
[i].
func
 !
NULL
; i++ )

139 i‡–
	`°rcmp
 ( 
¨gvÆ
[0], 
¥og
[
i
].
«me
 ) == 0 )

141 
rv
 = 
	`±hªad_¸óã
 ( &
thr
, 
NULL
,

142 (*Ë
¥og
[
i
].
func
,

143 
¨gvÆ
 );

144 i‡–!
rv
 )

146 i‡–
¨gnum
 < 2 ||

147 
¨gvÆ
[
¨gnum
-1][0] != '&' )

148 
	`±hªad_joö
 ( 
thr
, 
NULL
 );

150 
√w_cmd
;

155 i‡–
	`°rcmp
 ( 
¨gvÆ
[0], "quit" ) == 0 ||

156 
	`°rcmp
 ( 
¨gvÆ
[0], "exit" ) == 0 )

160 
	`¥ötf
 ( "Invalid command!" );

163 
	`¥ötf
 ( "Exiting from shell\n" );

166 
	}
}

168 
	$hñp
 ()

170 
i
;

172 
	`¥ötf
 ( "Shell commands: " );

173  
i
 = 0; 
sh_cmd
[i].
func
 !
NULL
; i++ )

174 
	`¥ötf
 ( "%†", 
sh_cmd
[
i
].
«me
 );

175 
	`¥ötf
 ( " quit/exit\n" );

177 
	`¥ötf
 ( "Programs: " );

178  
i
 = 0; 
¥og
[i].
func
 !
NULL
; i++ )

179 
	`¥ötf
 ( "%†", 
¥og
[
i
].
«me
 );

180 
	`¥ötf
 ( "\n" );

183 
	}
}

185 
	$˛ór
 ()

187 
	`¥ötf
 ( "\x1b[2J" );

190 
	}
}

192 
	$sysöfo
 ( *
¨gs
[] )

194 
öfo
[
INFO_SIZE
];

196 
	`sys__sysöfo
 ( 
öfo
, 
INFO_SIZE
, 
¨gs
 );

198 
	`¥ötf
 ( "%s\n", 
öfo
 );

201 
	}
}

	@programs/signals/signals.c

3 
	~<°dio.h
>

4 
	~<time.h
>

5 
	~<sig«l.h
>

6 
	~<±hªad.h
>

7 
	~<î∫o.h
>

9 
	gPROG_HELP
[] = "Signal demonstration.";

11 
time•ec_t
 
	gt0
;

13 
	$sig_h™dÀr
 ( 
sigöfo_t
 *
sigöfo
 )

15 
num
;

16 
time•ec_t
 
t
, 
t1
;

17 
i
;

19 
num
 = 
sigöfo
->
si_vÆue
.
sivÆ_öt
;

20 
	`˛ock_gëtime
 ( 
CLOCK_REALTIME
, &
t
 );

21 
	`time_sub
 ( &
t
, &
t0
 );

23 
	`¥ötf
 ( "[%d:%d] Signal %d\n",

24 
t
.
tv_£c
,Å.
tv_n£c
/1000000, 
num
 );

26 
t1
.
tv_£c
 = 1;

27 
t1
.
tv_n£c
 = 0;

28  
i
 = 1; i < 4; i++ )

30 
	`¥ötf
 ( "I¿sig«»h™dÀ∏(%d)\n", 
i
 );

31 
	`˛ock_«no¶ìp
 ( 
CLOCK_REALTIME
, 0, &
t1
, 
NULL
 );

33 
	}
}

35 *
	$sig«l_waôög_thªad
 ( *
∑øm
 )

37 
sig£t_t
 
£t
;

38 
sigöfo_t
 
öfo
;

40 
	`sigfûl£t
 ( &
£t
 );

41 
	`±hªad_sigmask
 ( 
SIG_BLOCK
, &
£t
, 
NULL
);

43 
	`¥ötf
 ( "Signal waitingÅhread started\n" );

44 
	`sigwaôöfo
 ( &
£t
, &
öfo
 );

45 
	`¥ötf
 ( "Signal waitingÅhread got signal:"

47 
öfo
.
si_signo
, info.
si_code
, info.
si_î∫o
,

48 
öfo
.
si_vÆue
.
sivÆ_öt
 );

50  
NULL
;

51 
	}
}

53 
	$sig«ls
 ( *
¨gs
[] )

55 
time•ec_t
 
t
;

56 
ôimî•ec_t
 
t1
;

57 
timî_t
 
timî1
;

58 
siga˘i⁄_t
 
a˘
;

59 
sigevít_t
 
evp
;

60 
i
;

61 
±hªad_t
 
thªad
;

62 
sigvÆ_t
 
sigvÆ
;

63 
£m_t
 
£m
;

65 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

66 
PROG_HELP
 );

68 
	`˛ock_gëtime
 ( 
CLOCK_REALTIME
, &
t
 );

69 
t0
 = 
t
;

70 
	`¥ötf
 ( "[START] Sy°emÅime: %d:%d\n", 
t
.
tv_£c
,Å.
tv_n£c
/1000000 );

73 
evp
.
sigev_nŸify
 = 
SIGEV_SIGNAL
;

74 
evp
.
sigev_signo
 = 
SIGUSR1
;

76 
a˘
.
ß_siga˘i⁄
 = 
sig_h™dÀr
;

77 
a˘
.
ß_Êags
 = 
SA_SIGINFO
;

78 
	`sigem±y£t
 ( &
a˘
.
ß_mask
 );

79 
	`siga˘i⁄
 ( 
SIGUSR1
, &
a˘
, 
NULL
 );

82 
t1
.
ô_öãrvÆ
.
tv_£c
 = 6;

83 
t1
.
ô_öãrvÆ
.
tv_n£c
 = 0;

84 
t1
.
ô_vÆue
.
tv_£c
 = 6;

85 
t1
.
ô_vÆue
.
tv_n£c
 = 0;

86 
evp
.
sigev_vÆue
.
sivÆ_öt
 = 
SIGUSR1
;

87 
	`timî_¸óã
 ( 
CLOCK_REALTIME
, &
evp
, &
timî1
 );

88 
	`timî_£âime
 ( &
timî1
, 0, &
t1
, 
NULL
 );

90 i‡–
	`±hªad_¸óã
 ( &
thªad
, 
NULL
, 
sig«l_waôög_thªad
, NULL ) )

91 
	`¥ötf
 ( "ThreadÇot created!\n" );

93 
t
.
tv_£c
 = 1;

94 
t
.
tv_n£c
 = 0;

95 
	`£m_öô
 ( &
£m
, 0, 3 );

96  
i
 = 0; i < 10; i++ )

98 
	`¥ötf
 ( "I¿maöÅhªad (%d)\n", 
i
 );

99 i‡–
i
 < 5 && 
	`£m_waô
 ( &
£m
 ) =
EXIT_FAILURE
 )

101 
î∫o
 = 
	`gë_î∫o
 ();

102 
	`¥ötf
 ( "£m_waô i¡îru±ed,Éºno=%d\n", 
î∫o
 );

106 i‡–
	`˛ock_«no¶ìp
(
CLOCK_REALTIME
,0,&
t
,
NULL
Ë=
EXIT_FAILURE
 )

108 
î∫o
 = 
	`gë_î∫o
 ();

109 
	`¥ötf
 ( "I¡îru±ed,Éºno=%d\n", 
î∫o
 );

113 
	`timî_dñëe
 ( &
timî1
 );

116 
sigvÆ
.
sivÆ_öt
 = 
SIGUSR2
;

119 
	`sigqueue
 ( 
thªad
, 
SIGUSR2
, 
sigvÆ
 );

121 
	`±hªad_joö
 ( 
thªad
, 
NULL
 );

123 
	`˛ock_gëtime
 ( 
CLOCK_REALTIME
, &
t
 );

124 
	`¥ötf
 ( "[END] Sy°emÅime: %d:%d\n", 
t
.
tv_£c
,Å.
tv_n£c
 / 1000000 );

127 
	}
}

	@programs/sse_test/sse_test.c

3 
	~<°dio.h
>

4 
	~<±hªad.h
>

5 
	~<time.h
>

7 
	gPROG_HELP
[] = "Test SSE support by using SSEÑegister.";

9 
	#THR_NUM
 3

	)

10 
	#ITERS
 5

	)

12 
time•ec_t
 
	g¶ìp
;

14 *
	$s£_ã°_thªad
 ( *
∑øm
 )

16 
thr_no
 = (Ë
∑øm
;

18 
	`¥ötf
 ( "Thªad %d sèπög\n", 
thr_no
 );

20 #ifde‡
USE_SSE


21 
	sxmm_ªg


23 
p1
, 
p2
, 
p3
, 
p4
;

25 
ªg1
, 
ªg2
;

26 
i
;

27 
uöt32
 
¨ch_s£_suµ‹ãd
;

28 i‡–!
¨ch_s£_suµ‹ãd
 )

30 
	`¥ötf
 ( "SSE support compiled, "

32 
	`¥ötf
 ( "Thªad %dÉxôög\n", 
thr_no
 );

33  
NULL
;

37 
ªg1
.
p1
 =Ñeg1.
p2
 =Ñeg1.
p3
 =Ñeg1.
p4
 = 
thr_no
;

38 
asm
 vﬁ©ûê–"movup†%0, %%xmm0" :: "m" ( 
ªg1
 ) );

40  
i
 = 1; i <
ITERS
; i++ )

42 
	`¥ötf
 ( "Thªad %d: iã∏%d - ", 
thr_no
, 
i
 );

45 
asm
 vﬁ©ûê–"movup†%%xmm0, %0" : "=m" ( 
ªg2
 ) );

46 
	`¥ötf
 ( "xmm0Ñegister: %d, %d, %d, %d\n",

47 
ªg2
.
p1
,Ñeg2.
p2
,Ñeg2.
p3
,Ñeg2.
p4
 );

49 
	`«no¶ìp
 ( &
¶ìp
, 
NULL
 );

52 
	`¥ötf
 ( "SSE supportÇot included (compiled)!\n" );

54 
	`¥ötf
 ( "Thªad %dÉxôög\n", 
thr_no
 );

56  
NULL
;

57 
	}
}

59 
	$s£_ã°
 ( *
¨gs
[] )

61 
±hªad_t
 
thªad
[
THR_NUM
];

62 
i
, 
j
;

64 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

65 
PROG_HELP
 );

67 
¶ìp
.
tv_£c
 = 1;

68 
¶ìp
.
tv_n£c
 = 0;

70  
i
 = 0; i < 
THR_NUM
; i++ )

71 i‡–
	`±hªad_¸óã
 ( &
thªad
[
i
], 
NULL
,

72 
s£_ã°_thªad
, (*Ë
i
) )

74 
	`¥ötf
 ( "ThreadÇot created!\n" );

78 
	`«no¶ìp
 ( &
¶ìp
, 
NULL
 );

79 
	`«no¶ìp
 ( &
¶ìp
, 
NULL
 );

81  
j
 = 0; j < 
i
; j++ )

82 
	`±hªad_joö
 ( 
thªad
[
j
], 
NULL
 );

85 
	}
}

	@programs/threads/threads.c

3 
	~<°dio.h
>

4 
	~<±hªad.h
>

5 
	~<time.h
>

6 
	~<î∫o.h
>

8 
	#THR_NUM
 3

	)

9 
	#ITERS
 5

	)

11 
	gPROG_HELP
[] = "Thread demonstrationÉxample: create severalÅhreadsÅhat "

14 
time•ec_t
 
	g¶ìp
;

17 *
	$sim∂e_thªad
 ( *
∑øm
 )

19 
i
, 
thr_no
;

21 
thr_no
 = (Ë
∑øm
;

23 
	`¥ötf
 ( "Thªad %d sèπög\n", 
thr_no
 );

24  
i
 = 1; i <
ITERS
; i++ )

26 
	`¥ötf
 ( "Thªad %d: iã∏%d\n", 
thr_no
, 
i
 );

27 
	`«no¶ìp
 ( &
¶ìp
, 
NULL
 );

29 
	`¥ötf
 ( "Thªad %dÉxôög\n", 
thr_no
 );

31  
NULL
;

32 
	}
}

34 
	$thªads
 ( *
¨gs
[] )

36 
±hªad_t
 
thªad
[
THR_NUM
];

37 
i
, 
j
;

38 
î∫o_by_gë
, 
î∫o_by_ma¸o
;

40 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

41 
PROG_HELP
 );

43 
¶ìp
.
tv_£c
 = 1;

44 
¶ìp
.
tv_n£c
 = 0;

46  
i
 = 0; i < 
THR_NUM
; i++ )

47 i‡(
	`±hªad_¸óã
 (&
thªad
[
i
], 
NULL
, 
sim∂e_thªad
, (*)i))

49 
	`¥ötf
 ( "ThreadÇot created!\n" );

53  
j
 = 0; j < 
i
; j++ )

54 
	`±hªad_joö
–
thªad
[
j
], 
NULL
 );

56 
	`¥ötf
 ( "\nerrnoÅest\n" );

58 
î∫o_by_gë
 = 
	`gë_î∫o
();

59 
î∫o_by_ma¸o
 = 
_î∫o
;

60 
	`¥ötf
 ( "Cuºíàî∫ÿby gë_î∫ÿ%d\n", 
î∫o_by_gë
 );

61 
	`¥ötf
 ( "Cuºíàî∫ÿby _î∫ÿ%d\n", 
î∫o_by_ma¸o
 );

63 
	`£t_î∫o
 (10);

64 
î∫o_by_gë
 = 
	`gë_î∫o
();

65 
î∫o_by_ma¸o
 = 
_î∫o
;

66 
	`¥ötf
 ( "Cuºíàî∫ÿby gë_î∫ÿ%d\n", 
î∫o_by_gë
 );

67 
	`¥ötf
 ( "Cuºíàî∫ÿby _î∫ÿ%d\n", 
î∫o_by_ma¸o
 );

69 
_î∫o
 = 5;

70 
î∫o_by_gë
 = 
	`gë_î∫o
();

71 
î∫o_by_ma¸o
 = 
_î∫o
;

72 
	`¥ötf
 ( "Cuºíàî∫ÿby gë_î∫ÿ%d\n", 
î∫o_by_gë
 );

73 
	`¥ötf
 ( "Cuºíàî∫ÿby _î∫ÿ%d\n", 
î∫o_by_ma¸o
 );

76 
	}
}

	@programs/timer/timer.c

3 
	~<°dio.h
>

4 
	~<time.h
>

6 
	gPROG_HELP
[] = "Timer interface demonstration:ÖeriodicÅimeráctivations.";

8 
time•ec_t
 
	gt0
;

10 
	$Æ¨m_¡
 ( 
sigvÆ_t
 
∑øm
 )

12 
num
;

13 
time•ec_t
 
t
;

15 
num
 = 
∑øm
.
sivÆ_öt
;

16 
	`˛ock_gëtime
 ( 
CLOCK_REALTIME
, &
t
 );

17 
	`time_sub
 ( &
t
, &
t0
 );

19 
	`¥ötf
 ( "[%d:%d] Alarm %d (every %d seconds)\n",

20 
t
.
tv_£c
,Å.
tv_n£c
/100000000, 
num
,Çum );

21 
	}
}

23 
	$timî
 ( *
¨gs
[] )

25 
time•ec_t
 
t
;

26 
ôimî•ec_t
 
t1
, 
t2
;

27 
timî_t
 
timî1
, 
timî2
;

28 
sigevít_t
 
evp
;

30 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

31 
PROG_HELP
 );

33 
	`˛ock_gëtime
 ( 
CLOCK_REALTIME
, &
t
 );

34 
t0
 = 
t
;

35 
	`¥ötf
 ( "Sy°emÅime: %d:%d\n", 
t
.
tv_£c
,Å.
tv_n£c
/100000000 );

37 
evp
.
sigev_nŸify
 = 
SIGEV_THREAD
;

38 
evp
.
sigev_nŸify_fun˘i⁄
 = 
Æ¨m_¡
;

39 
evp
.
sigev_nŸify_©åibuãs
 = 
NULL
;

42 
t1
.
ô_öãrvÆ
.
tv_£c
 = 3;

43 
t1
.
ô_öãrvÆ
.
tv_n£c
 = 0;

44 
t1
.
ô_vÆue
.
tv_£c
 = 3;

45 
t1
.
ô_vÆue
.
tv_n£c
 = 0;

46 
evp
.
sigev_vÆue
.
sivÆ_öt
 = 
t1
.
ô_öãrvÆ
.
tv_£c
;

47 
	`timî_¸óã
 ( 
CLOCK_REALTIME
, &
evp
, &
timî1
 );

48 
	`timî_£âime
 ( &
timî1
, 0, &
t1
, 
NULL
 );

51 
t2
.
ô_öãrvÆ
.
tv_£c
 = 5;

52 
t2
.
ô_öãrvÆ
.
tv_n£c
 = 0;

53 
t2
.
ô_vÆue
.
tv_£c
 = 5;

54 
t2
.
ô_vÆue
.
tv_n£c
 = 0;

55 
evp
.
sigev_vÆue
.
sivÆ_öt
 = 
t2
.
ô_öãrvÆ
.
tv_£c
;

56 
	`timî_¸óã
 ( 
CLOCK_REALTIME
, &
evp
, &
timî2
 );

57 
	`timî_£âime
 ( &
timî2
, 0, &
t2
, 
NULL
 );

59 
t
.
tv_£c
 = 26;

60 
t
.
tv_n£c
 = 0;

62  
	`TIME_IS_SET
 (&
t
) )

63 i‡–
	`˛ock_«no¶ìp
 ( 
CLOCK_REALTIME
, 0, &
t
, &t ) )

64 
	`¥ötf
 ( "Interrupted sleep?\n" );

66 
	`˛ock_gëtime
 ( 
CLOCK_REALTIME
, &
t
 );

67 
	`¥ötf
 ( "Sy°emÅime: %d:%d\n", 
t
.
tv_£c
,Å.
tv_n£c
 / 100000000 );

69 
	`timî_dñëe
 ( &
timî1
 );

70 
	`timî_dñëe
 ( &
timî2
 );

73 
	}
}

	@programs/user_threads/user_threads.c

3 
	~"uthªad.h
"

5 
	~<°dio.h
>

7 
	gPROG_HELP
[] = "Threads createdánd managed in user space - kernel sees"

10 
fú°
 ( *
∑øm
 );

11 
£c⁄d
 ( *
∑øm
 );

12 
thúd
 ( *
∑øm
 );

14 vﬁ©ûê
	gthr_num
;

16 
	$u£r_thªads
 ( *
¨gs
[] )

18 
	`¥ötf
 ( "Exam∂ê¥ogøm: [%s:%s]\n%s\n\n", 
__FILE__
, 
__FUNCTION__
,

19 
PROG_HELP
 );

21 
	`uthªads_öô
 ();

23 (Ë
	`¸óã_uthªad
 ( 
fú°
, (*) 1 );

24 (Ë
	`¸óã_uthªad
 ( 
£c⁄d
, (*) 2 );

25 (Ë
	`¸óã_uthªad
 ( 
thúd
, (*) 3 );

26 
thr_num
 = 3;

28  
thr_num
 > 0 )

29 
	`uthªad_yõld
 ();

32 
	}
}

35 
	$fú°
 ( *
∑øm
 )

37 
i
;

39 
	`¥ötf
 ( "Fú°Åhªad sèπög,Ö¨am %x\n", 
∑øm
 );

40  
i
 = 0; i < 3; i++ )

42 
	`¥ötf
 ( "Fú°Åhªad, iã∏%d\n", 
i
 );

43 
	`uthªad_yõld
 ();

45 
	`¥ötf
 ( "FirstÅhreadÉxiting\n" );

47 
thr_num
--;

48 
	}
}

50 
	$£c⁄d
 ( *
∑øm
 )

52 
i
;

54 
	`¥ötf
 ( "Sec⁄dÅhªad sèπög,Ö¨am %x\n", 
∑øm
 );

55  
i
 = 0; i < 3; i++ )

57 
	`¥ötf
 ( "Sec⁄dÅhªad, iã∏%d\n", 
i
 );

58 
	`uthªad_yõld
 ();

60 
	`¥ötf
 ( "SecondÅhreadÉxiting\n" );

61 
thr_num
--;

62 
	}
}

64 
	$thúd
 ( *
∑øm
 )

66 
i
;

68 
	`¥ötf
 ( "ThúdÅhªad sèπög,Ö¨am %x\n", 
∑øm
 );

69  
i
 = 0; i < 3; i++ )

71 
	`¥ötf
 ( "ThúdÅhªad, iã∏%d\n", 
i
 );

72 
	`uthªad_yõld
 ();

74 
	`¥ötf
 ( "ThirdÅhreadÉxiting\n" );

76 
thr_num
--;

77 
	}
}

	@programs/user_threads/uthread.c

3 
	#USER_THREAD_C


	)

5 
	~"uthªad.h
"

7 
	~<mÆloc.h
>

8 
	~<î∫o.h
>

10 
	g√xt_id
;

11 
li°_t
 
	ga˘ive
;

12 
li°_t
 
	gªady
;

14 
uthªad_t
 
	gmaö_thªad
;

16 
	$uthªads_öô
 ()

18 
√xt_id
 = 1;

20 
	`li°_öô
 ( &
a˘ive
 );

21 
	`li°_≠≥nd
 ( &
a˘ive
, &
maö_thªad
, &maö_thªad.
li°
 );

22 
	`li°_öô
 ( &
ªady
 );

23 
	}
}

25 
uthªad_t
 *
¸óã_uthªad
 ( (
func
Ë(*), *
∑øm
 )

27 
uthªad_t
 *
thªad
;

29 
thªad
 = 
	`mÆloc
 (  (
uthªad_t
) );

30 
thªad
->
°ack
 = 
	`mÆloc
 (
DEFAULT_THREAD_STACK_SIZE
);

31 
	`ASSERT
 ( 
thªad
 &&Åhªad->
°ack
 );

33 
thªad
->
id
 = 
√xt_id
;

35 
	`¨ch_¸óã_thªad_c⁄ãxt
 ( &
thªad
->
c⁄ãxt
, 
func
, 
∑øm
,

36 
uthªad_exô
, 
thªad
->
°ack
, 
DEFAULT_THREAD_STACK_SIZE
 );

38 
√xt_id
++;

39 
	`li°_≠≥nd
 ( &
ªady
, 
thªad
, &thªad->
li°
 );

41  
thªad
;

42 
	}
}

44 
	$uthªad_exô
 ()

46 
uthªad_t
 *
cur_thªad
, *
√w_thªad
;

49 
cur_thªad
 = 
	`li°_ªmove
 ( &
a˘ive
, 
FIRST
, 
NULL
 );

51 
	`‰ì
 ( 
cur_thªad
->
°ack
 );

55 
	`‰ì
 ( 
cur_thªad
 );

58 
√w_thªad
 = 
	`li°_ªmove
 ( &
ªady
, 
FIRST
, 
NULL
 );

60 
	`li°_≠≥nd
 ( &
a˘ive
, 
√w_thªad
, &√w_thªad->
li°
 );

62 
	`¨ch_swôch_to_thªad
 ( 
NULL
, &
√w_thªad
->
c⁄ãxt
 );

63 
	}
}

65 
	$uthªad_yõld
 ()

67 
uthªad_t
 *
cur_thªad
, *
√w_thªad
;

70 
cur_thªad
 = 
	`li°_ªmove
 ( &
a˘ive
, 
FIRST
, 
NULL
 );

71 
	`li°_≠≥nd
 ( &
ªady
, 
cur_thªad
, &cur_thªad->
li°
 );

74 
√w_thªad
 = 
	`li°_ªmove
 ( &
ªady
, 
FIRST
, 
NULL
 );

75 
	`li°_≠≥nd
 ( &
a˘ive
, 
√w_thªad
, &√w_thªad->
li°
 );

78 
	`¨ch_swôch_to_thªad
 ( &
cur_thªad
->
c⁄ãxt
, &
√w_thªad
->context );

79 
	}
}

	@programs/user_threads/uthread.h

3 #¥agm®
⁄˚


5 #i‚de‡
USER_THREAD_C


7 
	tuthªad_t
;

11 
	~<lib/li°.h
>

12 
	~<¨ch/c⁄ãxt.h
>

14 
	s_uthªad_t_


16 
	mid
;

17 
c⁄ãxt_t
 
	mc⁄ãxt
;

18 *
	m°ack
;

19 
li°_h
 
	mli°
;

21 
	tuthªad_t
;

25 
uthªads_öô
 ();

26 
uthªad_t
 *
¸óã_uthªad
 ( (
func
Ë(*), *
∑øm
 );

27 
	`uthªad_exô
 ();

28 
	`uthªad_yõld
 ();

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/stropts.h

18 #i‚de‡
_STROPTS_H


19 
	#_STROPTS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/ty≥s.h
>

23 
	~<bôs/xtôy≥s.h
>

25 #i‚de‡
__gid_t_deföed


26 
__gid_t
 
	tgid_t
;

27 
	#__gid_t_deföed


	)

30 #i‚de‡
__uid_t_deföed


31 
__uid_t
 
	tuid_t
;

32 
	#__uid_t_deföed


	)

35 
__t_sˇœr_t
 
	tt_sˇœr_t
;

36 
__t_usˇœr_t
 
	tt_usˇœr_t
;

39 
	~<bôs/°r›ts.h
>

42 
__BEGIN_DECLS


45 
	$iß°ªam
 (
__fûdes
Ë
__THROW
;

51 
	`gëmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

52 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

53 *
__ª°ri˘
 
__Êag•
);

60 
	`gëpmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

61 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

62 *
__ª°ri˘
 
__b™dp
, *__ª°ri˘ 
__Êag•
);

67 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

73 
	`putmsg
 (
__fûdes
, c⁄° 
°rbuf
 *
__˘Õå
,

74 c⁄° 
°rbuf
 *
__d©≠å
, 
__Êags
);

80 
	`puçmsg
 (
__fûdes
, c⁄° 
°rbuf
 *
__˘Õå
,

81 c⁄° 
°rbuf
 *
__d©≠å
, 
__b™d
, 
__Êags
);

85 
	$Áâach
 (
__fûdes
, c⁄° *
__∑th
Ë
__THROW
;

88 
	$fdëach
 (c⁄° *
__∑th
Ë
__THROW
;

90 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
147
3187
api/prog_info.c
api/pthread.c
api/signal.c
api/stdio.c
api/time.c
arch/arm/bits.h
arch/arm/config.h
arch/arm/context.c
arch/arm/context.h
arch/arm/device.h
arch/arm/drivers/pl011.c
arch/arm/drivers/pl011.h
arch/arm/drivers/pl190.c
arch/arm/drivers/pl190.h
arch/arm/drivers/sp804.c
arch/arm/drivers/sp804.h
arch/arm/drivers/uart0.c
arch/arm/interrupt.c
arch/arm/interrupt.h
arch/arm/memory.c
arch/arm/processor.h
arch/arm/time.c
arch/arm/time.h
arch/arm/types.h
arch/i386/bits.h
arch/i386/context.c
arch/i386/context.h
arch/i386/descriptor.c
arch/i386/descriptor.h
arch/i386/device.h
arch/i386/drivers/i8042.c
arch/i386/drivers/i8042.h
arch/i386/drivers/i8253.c
arch/i386/drivers/i8253.h
arch/i386/drivers/i8259.c
arch/i386/drivers/i8259.h
arch/i386/drivers/uart.c
arch/i386/drivers/uart.h
arch/i386/drivers/vga_text.c
arch/i386/interrupt.c
arch/i386/interrupt.h
arch/i386/io.h
arch/i386/memory.c
arch/i386/processor.h
arch/i386/time.c
arch/i386/time.h
arch/i386/types.h
include/api/errno.h
include/api/malloc.h
include/api/prog_info.h
include/api/pthread.h
include/api/signal.h
include/api/stdio.h
include/api/time.h
include/arch/bits.h
include/arch/context.h
include/arch/device.h
include/arch/interrupt.h
include/arch/memory.h
include/arch/multiboot.h
include/arch/processor.h
include/arch/time.h
include/arch/types.h
include/kernel/device.h
include/kernel/errno.h
include/kernel/features.h
include/kernel/kprint.h
include/kernel/memory.h
include/kernel/pthread.h
include/kernel/signal.h
include/kernel/thread.h
include/kernel/time.h
include/lib/ff_simple.h
include/lib/gma.h
include/lib/list.h
include/lib/string.h
include/types/basic.h
include/types/bits.h
include/types/bits_generic.h
include/types/errno.h
include/types/io.h
include/types/pthread.h
include/types/signal.h
include/types/time.h
kernel/device.c
kernel/device.h
kernel/kprint.c
kernel/memory.c
kernel/memory.h
kernel/pthread.c
kernel/pthread.h
kernel/sched.c
kernel/sched.h
kernel/signal.c
kernel/signal.h
kernel/startup.c
kernel/thread.c
kernel/thread.h
kernel/time.c
kernel/time.h
lib/list.c
lib/mm/ff_simple.c
lib/mm/gma.c
lib/mm/test/test.c
lib/mm/test/test.h
lib/string.c
programs/arguments/arguments.c
programs/hello_world/hello_world.c
programs/keyboard/keyboard.c
programs/messages/messages.c
programs/monitors/monitors.c
programs/round_robin/round_robin.c
programs/run_all/run_all.c
programs/segm_fault/segm_fault.c
programs/semaphores/semaphores.c
programs/shell/shell.c
programs/signals/signals.c
programs/sse_test/sse_test.c
programs/threads/threads.c
programs/timer/timer.c
programs/user_threads/user_threads.c
programs/user_threads/uthread.c
programs/user_threads/uthread.h
/usr/include/errno.h
/usr/include/features.h
/usr/include/malloc.h
/usr/include/memory.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/stropts.h
/usr/include/time.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/stdc-predef.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
